<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Structure on Kaka&#39;s Blog</title>
    <link>https://kaka-lin.github.io/categories/data-structure/</link>
    <description>Recent content in Data Structure on Kaka&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Jul 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://kaka-lin.github.io/categories/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Iterating over Results An Iter::map operation might fail, for example:
fn main() { let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let possible_numbers: Vec&amp;lt;_&amp;gt; = strings .into_iter() .map(|s| s.parse::&amp;lt;i32&amp;gt;()) .collect(); println!(&amp;quot;Results: {:?}&amp;quot;, possible_numbers); }  Let&amp;rsquo;s step through strategies for handling this.
Ignore the failed items with filter_map filter_map calls a function and filters out the resultes that are None.
fn main() { let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let possible_numbers: Vec&amp;lt;_&amp;gt; = strings .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Option &amp;amp; unwrap Option Option&amp;lt;T&amp;gt; is an enum in the std library.
enum Option&amp;lt;T&amp;gt; { Some(T), None, }  Option&amp;lt;T&amp;gt; is used when absence is a possible.
It manifests itself as one of two &amp;ldquo;options&amp;rdquo;:
  Some(T)
An element of type T was found
  None:
No element was found
  unwrap Is a shortcut method that is implement just like the match expression.
  If the Option value is Some(T) variant, unwrap will return the value T inside the Some(T).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Combinators: map match is a valid method for handling Option. However, you may enventually find heavy usage tedious, especially with operations only valid with input. In this case, combinators can be used to manage control flow in a modular fashion(模組化方式). map() Is a Option&amp;rsquo;s built in method. A combinator for the simple mpping of Some -&amp;gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Combinators: and_then map() was described as a chainable way to simplify match statements. However, using map() on a function that returns an Option&amp;lt;T&amp;gt; results in the nested Option&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt;. Chaining multiple calls together can then become confusing. That&amp;rsquo;s where another combinator called and_then(), known in some language as flatmap, comes in.
and_then() Calling its function input with the wrapped value and returns the result.
Some -&amp;gt; Some, None -&amp;gt; None
pub fn and_then&amp;lt;U, F&amp;gt;(self, f: F) -&amp;gt; Option&amp;lt;U&amp;gt;  where F: FnOnce(T) -&amp;gt; Option&amp;lt;U&amp;gt;,</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Result Result is an richer version of the Option type that describes possible error instead of possible absence.
enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), }    Ok&amp;lt;T&amp;gt;: An element T was found
  Err&amp;lt;E&amp;gt;: An error was found with element E
  Like Option, Result has many methods associated with it.
For example:
  unwrap():
either yields the element T or panics
  For case handling, there are many combinators between Result and Option that overlap.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>map for Result Panicking in the previous example&amp;rsquo;s multiply does not make for robuts code. Generally, we want to return the error to the caller so it can decide what is the right way to respond to errors. We first need to know what kind of error type we are dealing with. To determine the Err type, we look to parse(), which is implemented with the FromStr tarit for i32.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>aliases for Result How about when we want ot reuse a specific Result type many times? -&amp;gt; aliases. Aliasing The type statement can be used to give a new name to an existing type. Exmaple At a module level, creating aliases can be particularly helpful. Errors found in a specific module often have the same Err type, so a single alias can succinct</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Early returns </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Introducing ? Sometimes we just want the simplicity of unwrap without the possible of a panic.
Until now, unwrap has forced us to nest deeper and deeper when what we really was to get the value out.
=&amp;gt; This is exactly the purpose of ?
Upon finding an Err, there are two valid actions to take:
 panic! which we already decided to try to avoid if possibe. return because an Err means it cannot be handled.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Error handling </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Module System A key question when writing program is scope: what names does the compiler know about at this location in the code? What functions am I allowed to call? What does this variable refer to?
Rust has a number of features related to scopes. This is sometimes called the module system, but it encompasses more than just modules:
  Packages
It are a Cargo feature that let you build, test, and share crates.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Rust by Example This repo is the record that I exercise the Rust by Example!
Rust version: 1.31.0 or later
Chapter Before you to read chapter 10, 11, and 12, you can read module system first.
 Modules
  Visibility
  Struct visibility
  The use declaration
  super and self
  File hierarchy
  pub use(re-exporting)
    Crates
  Library</description>
    </item>
    
  </channel>
</rss>
