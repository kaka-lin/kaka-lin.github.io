<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DSA on Kaka&#39;s Blog</title>
    <link>https://kaka-lin.github.io/tags/dsa/</link>
    <description>Recent content in DSA on Kaka&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 10 Jun 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://kaka-lin.github.io/tags/dsa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Rust Learning Notes   Rust Programming Language book!
  Rust by Example
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Generic Types, Traits, and Lifetimes Every programming language has tools for effectively handling the duplication of concepts. In Rust, one such tools is generic.
Generic Types Generics are abstract stand-ins for concrete types of other properties.
When we&amp;rsquo;re writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running code.
Traits A trait is a collection of methods defined for unknown type:`self`.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Rust Book Exercise This repo is the record that I exercise the book of Rust Programming Language book!
Rust version: 1.31.0 or later</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Visibility By default, the items in a module have private visibility, but this can be overridden with the pub modifier(keyword). Only the public items of a module can be accessed from outside the module scope.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Struct visibility Structs have an extral level of visibility with their fields. The visibility defaults to private, and can be overridden with the pub modifier.
This visibility only matters when a struct is accessed from outside the module where it is defined, and has the goal of hiding information(encapsulation).
Example If you use pub before a struct definition, you make the struct public. However, the struct&amp;rsquo;s fields are still private.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>The use declaration The use declaration can be used to bind a full path to a new name.
Example mod sound { pub mod instrument { pub fn clarinet() { // Function body code goes here } } } use crate:ðŸ”‰:instrument; fn main() { instrument::clarinet(); instrument::clarinet(); instrument::clarinet(); }  as keyword You can use the as keyword to bind imports to a different name
Example use std::fmt::Result; use std::io::Result as IoResult; fn function1() -&amp;gt; Result {} fn function2() -&amp;gt; IoResult&amp;lt;()&amp;gt; {}  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>super and self The super and self keywords can be used in the path to remove ambiguity when accessing items and to prevent unnecessary hardcoding of paths.
super You can construct relative paths beginning with super. Doing so is like starting a filesystem path with ..: the path starts from the parent module, rather than current module.
Example mod instrument { fn clarinet() { super::breathe_in(); } } fn breathe_in() { }  Advantage The reason you might want to choose a relative path starting with super rather than an absolute path starting with crate is that using super may make it easier to update your code to have a different module hierarchy, if the code defining the item and the code calling the item are moved together.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>File hierarchy Example $ tree . . |-- main.rs |-- my | |-- inaccessible.rs | |-- mod.rs | `-- nested.rs `-- split.rs  build &amp;amp;&amp;amp; run $ rustc src/split.rs &amp;amp;&amp;amp; ./split  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Re-exporting Names with pub use When you bring a name into scope with the use keyword, the name being available in the new scope is private, example:
mod sound { pub mod instrument { pub fn clarinet() { println!(&amp;quot;sound::instrument::clarinet()&amp;quot;); } } } mod performance_group { use crate:ðŸ”‰:instrument; pub fn clarinet_trio() { instrument::clarinet(); instrument::clarinet(); instrument::clarinet(); } } fn main() { // error[E0603]: module `instrument` is private performance_group::instrument::clarinet(); }  If you want to enable code calling your code to be able to refer to the type as if it was defined in that scope just as your code does, you can combine pub and use.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Modules Rust provides a powerful module system that can be used to hierarchically split code in logical units(modules), and manage visibility (public/private) between them.
A module is a collection of items: functions, structs, traits, impl block, and even other modules.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Library Let&amp;rsquo;s create a library, and then see how to link it to another crate.
pub fn public_function() { println!(&amp;quot;called rary&#39;s `public_function()`&amp;quot;); } fn private_function() { println!(&amp;quot;called rary&#39;s `private_function()`&amp;quot;); } pub fn indirect_access() { print!(&amp;quot;called rary&#39;s `indirect_access()`, that\n&amp;gt; &amp;quot;); private_function(); }  $ rustc --crate-type=lib src/libtest.rs $ ls lib* liblibtest.rlib  Libraries get prefixes with &amp;quot;lib&amp;quot;, and default they get named after their crate file, but this default name can be overridden usinf the crate_name attribute.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>extern crate To link a crate to this new library, the extern crate declaration must be used. This will not onlt link the library, but also import all its items under a module named the same as the library. The visibility rules that apply to modules also apply to libraries.
Example Filename: src/main.rs
extern crate libtest; fn main() { libtest::public_function();  # 1. build library crate $ rustc --crate-type=lib --out-dir=src src/libtest.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Crates A crate is a compilation unit in Rust. Whenever rustc some_file.rs is called, some_file.rs is treated as the crate file.
If some_file.rs has mod declarations in it, then the contents of module files would be insert in places where mod declarations in the crate file are found, before running the compiler over it. In other words, modules do not get compiled individually, only crates get compiled.
A crate can be compiled into a binary or into a library.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Cargo </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Iterators The Iterator trait is uesd to implement iterators over collections such as arrays.
The trait requires only a meths to be defined for the next element, which may be manually defined in an impl block or automatically defined (as in arrays and ranges).
As a point of convenience for common situations, the for construct turns some collections into iterators using the .into_iterator() method.
Example struct Fibonacci { curr: u32, next: u32, } // Implement `Iterator` for `Fibonacci`.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Traits </description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>panic The simples error handling mechanism we will see is panic.
It prints an error message, starts unwinding the task, and usually exits the program.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Multiple error types Somtimes an Option needs to interact with a Reasult, or a Result&amp;lt;T, Error1&amp;gt; need to interact with a Result&amp;lt;T, Error2&amp;gt;. In those cases, we want to manage our different error types in a way that makes them composable and easy to interact with.
Example In the following code, two instances of unwrap generate different error types.
Vec::first returns an Option, while parse::&amp;lt;i32&amp;gt; returns a Result&amp;lt;i32, ParseIntError&amp;gt;
fn double_first(vec: Vec&amp;lt;&amp;amp;str&amp;gt;) -&amp;gt; i32 { let first = vec.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Pulling Results out of Options The most basic way of handling mixed error types is to just embed them in each other.
Example use std::num::ParseIntError; fn double_first(vec: Vec&amp;lt;&amp;amp;str&amp;gt;) -&amp;gt; Option&amp;lt;Result&amp;lt;i32, ParseIntError&amp;gt;&amp;gt; { vec.first().map(|first| { first.parse::&amp;lt;i32&amp;gt;().map(|n| 2 * n) }) } fn main() { let numbers = vec![&amp;quot;42&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let empty = vec![]; let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; println!(&amp;quot;The first doubled is {:?}&amp;quot;, double_first(numbers)); println!(&amp;quot;The first doubled is {:?}&amp;quot;, double_first(empty)); // Error 1: the input vector is empty println!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://kaka-lin.github.io/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaka-lin.github.io/1/01/readme/</guid>
      <description>Iterating over Results An Iter::map operation might fail, for example:
fn main() { let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let possible_numbers: Vec&amp;lt;_&amp;gt; = strings .into_iter() .map(|s| s.parse::&amp;lt;i32&amp;gt;()) .collect(); println!(&amp;quot;Results: {:?}&amp;quot;, possible_numbers); }  Let&amp;rsquo;s step through strategies for handling this.
Ignore the failed items with filter_map filter_map calls a function and filters out the resultes that are None.
fn main() { let strings = vec![&amp;quot;tofu&amp;quot;, &amp;quot;93&amp;quot;, &amp;quot;18&amp;quot;]; let possible_numbers: Vec&amp;lt;_&amp;gt; = strings .</description>
    </item>
    
  </channel>
</rss>
