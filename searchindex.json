{"categories":[{"title":"Data Science","uri":"https://kaka-lin.github.io/categories/data-science/"},{"title":"Data Structure","uri":"https://kaka-lin.github.io/categories/data-structure/"},{"title":"Database","uri":"https://kaka-lin.github.io/categories/database/"},{"title":"DevOps","uri":"https://kaka-lin.github.io/categories/devops/"},{"title":"Go","uri":"https://kaka-lin.github.io/categories/go/"},{"title":"LeetCode","uri":"https://kaka-lin.github.io/categories/leetcode/"},{"title":"matplotlib","uri":"https://kaka-lin.github.io/categories/matplotlib/"},{"title":"OS","uri":"https://kaka-lin.github.io/categories/os/"},{"title":"Python","uri":"https://kaka-lin.github.io/categories/python/"}],"posts":[{"content":"在開發I/O相關程式時常常會遇到以下這四種名詞:\n 同步(Synchronous) 非同步(Asynchronous) 阻塞(Blocking) 非阻塞(Non-blocling)  由於常常會將其搞混，於是參考了經典著作UNIX Network Programming與網路上相關文章，整理成以下筆記，以方便自己日後複習。\n名詞解釋 阻塞(Blocking)與非阻塞(Non-blocking) 阻塞與非阻塞關注的是同一個執行緒發出請求(呼叫)時在等待結果時的狀態。\n  阻塞: 調用方當發出請求後，在獲得結果之前，調用方會懸(Hang)住不動，無法回應，直到獲得結果。\n  非阻塞: 調用方當發出請求後，調用方不會因為等待結果，而懸住不動(Hang住)。但後續通常透過輪詢(Polling)機制取得結果。\n  同步(Synchronous)與非同步(Asynchronous) 同步與非同步關注的是執行緒之間的通訊模式。例如:使用者執行緒與Kernel之間的通訊模式。\n  同步: 使用者執行緒發出 I/O 請求後，要等待結果返回。\n其中等待結果返回，有兩種方法:\n 等待 Kernel 回覆: Blocking I/O 主動去問，輪詢(Pooling): Non-blocking I/O  執行緒發出請求後，需要等待或是主動詢問結果 -\u0026gt; 同步    非同步: 或稱異步。使用者執行緒發出 I/O 請求後，不需要等待直接返回，所以沒有返回結果。當Kernel I/O有結果後，會通知使用者執行緒或者呼叫callback函數。\n執行緒發出請求後，就不用管了，另一個執行緒自己會處理，等待處理好之後會通知使用者執行緒 -\u0026gt; 非同步    範例 當你要訂某家很夯的餐廳時，\n  阻塞:\n在服務生沒跟你說結果時，你會暫停所有動作(懸住不動)，直到服務生你說有沒有訂位成功。    非阻塞:\n不管服務生有沒有跟你說，你自己先去做其他事情了，但你會可能半小時check一下結果。    同步:\n服務生跟你說，稍等一下，\u0026quot;我查一下\u0026quot;，等查好了告訴你結果(返回結果)    非同步:\n服務生跟你說，\u0026quot;我查好再打電話給你\u0026quot;，然後就掛電話了(直接返回，但沒有結果)。然後查好之後，他就主動打電話通知你(這邊服務生是透過\u0026quot;回電\u0026quot;這種callback方式來處理)。    I/O Models 下圖是 I/O Models的四個象限，我們用Linux上的相關API來介紹。\n圖出處: Study Notes - I/O Models\n從上圖我們可以得出四種 I/O model:\n Blocking I/O (BIO): Synchronous / Blocking Non-Blocking I/O (NIO): Synchronous / Non-Blocking I/O Multiplexing: Asynchronous / Blocking Asynchronous I/O (AIO): Asynchronous / Non-Blocking  對於一個 Network I/O 而言，基本上會涉及到兩個系統層面的對象：\n 呼叫此I/O的Process/Thread 系統Kernel  以read()為例：\n 等待資料準備好(Waiting for the data to be ready.) 把資料從Kernel copy到Process/thread中(Copying the data from the kernel to the process.)  1. Blocking I/O (BIO) 同步(Synchronous)/阻塞(Blocking)  如下圖所示，Blocking I/O在呼叫read()後，首先使用者執行緒自己被hang住，直到Kernel返回值之後才能繼續下一個動作。\n圖出處: IBM: Async I/O\nBlocking I/O 特性:  應用程序不會詢問資料是否準備好了，直到返回結果給應用程式。  2. Non-Blocking I/O (NIO) 同步(Synchronous)/非阻塞(Non-Blocking)  如下圖所示，Blocking I/O在呼叫read()後，會立即返回EAGIN or EWOULDBLOCK，就不用卡在那邊等待。\n站在使用者執行緒角度來看，當發現回傳的值是error時就知道資料還沒準備好，當kernel準備好資料，且又再次收到使用者call read()時，kernel就可以把資料copy到user process中，然後回傳結果。\n所以其實NIO就是不斷的去問kernel說資料好了沒，基本上就是用一個loop一直去call read()，這其實就是輪詢(polling)。\nNIO其實效率很差，很浪費CPU Time，但還算是蠻常見的。\n圖出處: IBM: Async I/O\nNon-Blocking I/O 特性:  應用程序會不斷的詢問資料是否準備好了。  3. I/O Multiplexing (多工 or 多路複用) 非同步(Asynchronous)/阻塞(Blocking)  所謂的I/O Multiplexing，其實就是select/poll/epoll，有些地方也稱這種I/O方式為event drive I/O。\n如下圖所示，以select為例，當程式呼叫了select時，整個process就會被block，同時kernel會去\u0026quot;監視\u0026quot;所有由select負責的檔案描述符(ex: socket)，一但有任一檔案描述符準備好了，select就會立刻return。此時在呼叫read將資料copy至application buffer中。\n圖出處: I/O Multiplexing\nI/O Multiplexing vs Blocking I/O 看起來 I/O Multiplexing 好像和 Blocking I/O 沒有太大不同，但事實上還是有差:\n  I/O Multiplexing使用了兩次system call (select/read)，而Blocking I/O只需要一次system call (read)。\n  I/O Multiplexing可同時處理多個connection，但Blocking I/O一次只能處理一個。\n  如果I/O Multiplexing要處理的數量沒有很多的話，效能不一定比Blocking I/O的Multi-Thread好，甚至有可能有比較高的latency。\nI/O Multiplexing的優勢 不是對單個連接處理會更快，而是可以在只使用單個process/thread的情況下，監視/處理更多的connection。  4. Asynchronous I/O 非同步(Asynchronous)/非阻塞(Non-Blocking)  如下圖所示:\n 應用程式告訴Kernel做一個操作(Operation)，不等Kernel回覆，程序繼續執行(這樣就不會讓user process產生block)。 Kernel完成整個操作(包含取得資料、複製到Buffer)之後，會向user process發送一個訊號，通知說這個讀取操作已完成，且這個訊號是由aio_read指定的(deliver signal specified in aio_read)。  圖出處: IBM: Async I/O\n生活中的I/O Model 以剛剛的訂某家很夯的餐廳為例，當你打去訂位時， Blocking代表你的狀態，Sync代表服務生的處理方式。\n  Blocking I/O (BIO):\n Blocking: 你只能在電話那頭等待 Synchronous: 服務生查完之後，跟你說有沒有訂位成功    Non-Blocking I/O (NIO):\n Non-Blocking: 你可以繼續做其他事情，如跟朋友聊天 Synchronous: 但服務生不會主動通知你，你要主動去問有沒有訂位成功    I/O Multiplexing:\n Blocking: 你不能做其他事情，只能等待 Asynchronous: 服務生查完會主動打電話通知你    Asynchronous I/O (AIO):\n Non-Blocking: 你打完電話就繼續做其他事情 Asynchronous: 服務生查完會主動打電話通知你    程式範例 待更新～\nReference   Study Notes - I/O Models\n  IBM: Async I/O\n  ","id":0,"section":"posts","summary":"在開發I/O相關程式時常常會遇到以下這四種名詞: 同步(Synchronous) 非同步(Asynchronous) 阻塞(Blocking) 非阻","tags":["OS","I/O Models"],"title":"[OS] I/O Models: 同步、非同步、阻塞、非阻塞","uri":"https://kaka-lin.github.io/2020/07/io_models/","year":"2020"},{"content":"行程/處理程序(Process) 複習作業系統(Operating System)中的對於行程(Process)的解釋：\n行程(Process)是指已經執行並且load到記憶體中的程式(Program)， 行程中的每一行程式碼隨時都有可能被CPU執行。 現在面向執行緒設計的系統中，行程本身不是基本執行單位，而是執行緒的容器 行程需要一些資源才能完成工作，如CPU使用時間、記憶體、檔案及I/O裝置。  我們在電腦裡，點開應用程式就是將程式(Program)活化成行程/處理程序(Process)。\n每一個Process由下面兩項組成：\n  一個Memory Space，用來進行變數的存取。\n不同Process的Memory Space也不同，所以彼此之間變數不能共享。\n  一個以上的Thread(執行緒)\n  1. CPU 與 Process 一個CPU一次只能執行一個Process，現在的電腦都是多核因此可同時執行數個Process。\n但CPU的總量總是少於Process的運行總量，且Procee會佔用記憶體，因此如何排程(Scheduling)， 如合有效的管理記憶體(Memory)就是作業系統(OS)在關注處理的事。\n2. Thread 與 Process Thread是OS能夠進行運算排成的最小單位，他被包含在Process之中，是Process中的實際運作單位。\n Thread是OS分配CPU時間的對象 Process是OS分配資源的對象  總結  Process是電腦中已執行Program的實體，每一個Process互相獨立 Process需要一些資源才能完成工作，如CPU使用時間、記憶體、檔案及I/O裝置。 Process是基本執行單位Thread(執行緒)的容器 每一個Process由一個Memory Space和一個以上的Thread所組成  Python 模組: multiprocessing multiprocessing是Python的標準函式庫裡的模組，所以不需要另外安裝即可使用。\n行程/處理程序(Process): multiprocessing.Process Step 1. 建立行程/處理程序(Process) class multiprocessing.Process( group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)  Step 2. 啟動(執行)Process Process.start()  Step 3. 等待Process結束 Process.join([timeout]  Example import time import multiprocessing def job(process_id): proc = multiprocessing.current_process() print(\u0026quot;Process_{}, Name: {}, PID: {}\u0026quot;.format(process_id, proc.name, proc.pid)) time.sleep(1) # 建立3個Process p_list = [] for i in range(3): p_list.append(multiprocessing.Process(target=job, args=(i,))) # 執行Process for p in p_list: p.start() # Main Process 繼續執行自己的工作 proc = multiprocessing.current_process() print(proc.name, proc.pid) # 等待所有Process執行結束 for p in p_list: p.join() print(\u0026quot;All Done.\u0026quot;)  [Output]\nProcess_0, Name: Process-1, PID: 39377 Process_1, Name: Process-2, PID: 39378 Process_2, Name: Process-3, PID: 39379 MainProcess 39372 All Done.  物件導向 (Class) import time import multiprocessing class MyProcess(multiprocessing.Process): def __init__(self): super(MyProcess, self).__init__() def run(self): print(\u0026quot;{}, PID: {}\u0026quot;.format(self.name, self.pid)) time.sleep(1) # 建立3個Process p_list = [] for i in range(3): p_list.append(MyProcess()) # 執行Process for p in p_list: p.start() # Main Process 繼續執行自己的工作 proc = multiprocessing.current_process() print(\u0026quot;{}, PID: {}\u0026quot;.format(proc.name, proc.pid)) # 等待所有Process執行結束 for p in p_list: p.join() print(\u0026quot;All Done.\u0026quot;)  [Output]\nMyProcess-4, PID: 39380 MyProcess-5, PID: 39381 MyProcess-6, PID: 39382 MainProcess, PID: 39372 All Done.  行程池(Process Pool): multiprocess.Pool 在實際處理問題的過程中，很忙的時候可能有大量的任務要執行，閒的時候可能只有零星任務要執行。 那在很忙的時候，我們就需要創建大量的Procee，首先創建跟銷毀都需要一定時間。 再來就算我們創建了大量的Process，作業系統也不會他們同時執行，這樣反而會影響效率。 此時就需要利用行程池。\n例如在進行系統管裡時，同時操控多個文件或是遠程控制多台主機，並行操作可以節省大量時間。 當操控的主機不多時，可以直接生成多個行程，但假設今天機台有上百台、上千台時， 手動去限制行程數量太麻煩，這時候就可以發揮Pool的功效。  Step 1. 建立Pool class multiprocessing.pool.Pool( [processes[, initializer[, initargs[, maxtasksperchild[, context]]]]])   processes: the number of worker process to use. If processes is None then the number returned by os.cpu_count() is used.  Step 2. 執行\u0026amp;獲取返回值 Pool.map(func, iterable[, chunksize])   A parallel equivalent of the map() built-in function. It blocks until the result is ready.  Note: Process與Pool最大的不同點就是：\n Pool有返回值 Process無返回值  簡單範例 import os import multiprocessing def job(x): return x * x # 建立Pool, 並且設定Process數量 ''' cpu_count = os.cpu_count() # 4 pool = multiprocessing.Pool(processes=cpu_count) ''' pool = multiprocessing.Pool() # 用 map() 運行處理程序並捕獲結果 res = pool.map(job, range(10)) print(res)  [Output]\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  同步(Sync) v.s. 非同步(Async) 在multiprocess.Pool的提供的方法裡我們可以發現， 每個方法都有另外一個尾巴加上_async的方法，如: map() \u0026amp; map_async()。\n那到底有_async跟沒有_async差在哪呢？ 現下我們先來介紹同步(sync)跟非同步(async)的概念！\n所謂的同步與非同步指的是執行緒(Thread)之間訊息通訊機制(溝通機制)的同步與否，如下所示：\n  同步(synchronous communication):\n當一個要資料的Thread去跟一個負責給資料的Thread拿資料時，\n需要在那邊等待訊息回傳回來。\n在沒有得到結果前，該呼叫(call)就不會返回， 但是一但呼叫返回，就會得到返回值(return value)。 換句話說就是，呼叫者主動等待這個呼叫的結果。    非同步(asynchronous communication):\n當一個要資料的Thread去跟一個負責給資料的Thread拿資料時，\n不需要等待直接返回，等待訊息好的時候會自己通知要資料的Thread。\n在呼叫發出之後，這個呼叫(call function/API)會直接返回，所以沒有返回結果。 當被呼叫者準備好之後，被呼叫者通過狀態來通知呼叫者，或通過callback函數來處理。    Example: 當你打去某家餐廳要訂位時，\n  同步:\n餐廳服務生說，您稍等一下，\u0026quot;我查一下\u0026quot;，等查好了告訴你結果(返回結果)。    非同步:\n餐廳服務生說，我查一下，\u0026quot;查好再打電話給你\u0026quot;，然後就掛電話了(不返回結果)， 然後查好之後，他會主動打電話給你(在這裡老闆透過\u0026quot;回電\u0026quot;這種callback方式來處理)。    pool.map() v.s. pool.map_async()   map(func, iterable[, chuncksize]):\nA parallel equivalent of the `map()` built-in function. It blocks until the result is ready.    map_async(func, iterable[, chuncksize[, callable[, error_callback]]]):\nA variant of the `map()` method which returns a result object.   Note: 最後要寫close和join來避免主程序結束後，子程序被迫關閉。    1. pool.map() import os import time import multiprocessing def job(x): result = x * x print(\u0026quot;[In Pool]: {}\u0026quot;.format(result)) time.sleep(1) return result pool = multiprocessing.Pool(os.cpu_count()) pool_output = pool.map(job, range(10)) print(\u0026quot;將會阻塞直到子程序結束後才執行，返回值: {}\u0026quot;.format(pool_output)) # close 和 join 是確保主程序結束後，子程序仍然繼續執行 pool.close() pool.join() print(\u0026quot;Pool Done!!!\u0026quot;)  [Output]\n[In Pool]: 1 [In Pool]: 4 [In Pool]: 0 [In Pool]: 9 [In Pool]: 16 [In Pool]: 25 [In Pool]: 36 [In Pool]: 49 [In Pool]: 81 [In Pool]: 64 將會阻塞直到子程序結束後才執行，返回值: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] Pool Done!!!  2. pool.map_async() import os import time import multiprocessing def job(x): result = x * x print(\u0026quot;[In Pool]: {}\u0026quot;.format(result)) time.sleep(1) return result pool = multiprocessing.Pool(os.cpu_count()) pool_output = pool.map_async(job, range(10)) print(\u0026quot;將不會阻塞和子程序並行\u0026quot;) print(\u0026quot;Main Process: {}\u0026quot;.format(pool_output.get())) # close 和 join 確保主程序結束後，子程序仍然繼續執行 pool.close() pool.join() print(\u0026quot;Pool Done!!!\u0026quot;)  [Output]\n[In Pool]: 0 [In Pool]: 4 [In Pool]: 1 [In Pool]: 9 將不會阻塞和子程序並行 [In Pool]: 16 [In Pool]: 36 [In Pool]: 25 [In Pool]: 49 [In Pool]: 64 [In Pool]: 81 Main Process: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] Pool Done!!!  pool.close() and pool.join() 如上範例所示，_async最後要寫close和join來避免主程序結束後，子程序被迫關閉。\n  close():\nPrevents any more tasks from being submitted to the pool. Once all the tasks have been completed the worker processes will exit. 停止接收新的任務，如果還有任務來，就會拋出異常    join():\nWait for the worker processes to exit. One must call close() or terminate() before using join(). 等待所有任務完成，必須在close或是terminate之後呼叫，否則會拋出異常    _async 取的回傳結果: multiprocess.pool.AsyncResult 如上範例所示，_async要取得回傳的資料需要使用get()方法\nclass multiprocess.pool.AsyncResult \u0026quot;\u0026quot;\u0026quot;The class of the result returned by Pool.apply_async() and Pool.map_async().\u0026quot;\u0026quot;\u0026quot;  Method:   get([timeout]):\nReturn the result when it arrives.    wait([timeout]):\nWait until the result is avalibale or until timeout seconds pass.    read():\nReturn whether the call has completed.    successful():\nReturn whether the call completed without raising an exception.    待更新～\n","id":1,"section":"posts","summary":"行程/處理程序(Process) 複習作業系統(Operating System)中的對於行程(Process)的解釋： 行程(Process)是","tags":["Python","OS"],"title":"[Python] Ch2: Process Management - 02 Python 多行程/多處理程序(Multi-Processing)","uri":"https://kaka-lin.github.io/2020/07/02_multiprocessing/","year":"2020"},{"content":"Function as Arguments In Go, function is also a type. So we can pass function as another function\u0026rsquo;s parameters.\n當我們將function當成參數使用時，必須在參數列表列出funtion本身的參數type與及其所需的回傳type, 如:\nfunc(int, int) int  Example 1 func print(fn func(int, int) int, a, b int) { fmt.Println(fn(a, b)) } func area(a, b int) int { return a * b } func sum(a, b int) int { return a + b } func main() { print(area, 3, 4) // 12 print(sum, 3, 4) // 7 }  Example 2 func compute(fn func(float64, float64) float64) float64 { return fn(3, 4) } func hypot(x, y float64) float64 { return math.Sqrt(x*x + y*y) } func main() { fmt.Println(compute(hypot)) // 5 }  Function Closures Golang supports anonymous functions(匿名函式) which can form closures(閉包). Anonymous functions are useful when you want to define a function inline without having to name it.\nAnonymous Function 所謂的匿名函式就是沒有名字的函式   匿名函式可以作為返回值 匿名函式也可以作為變數  Example // anonymous function func(x, y int) int { return x + y } // anonymous function as a return value func printSum() func(int, int) { return func(x, y int) { fmt.Println(x + y) } } // anonymous function as a variable f := func(x, y int) int { return x + y }   Python\u0026rsquo;s lambda  # anonymous function lambda x, y: x + y f = lambda x, y: x + y  Closure A closure is a function value that references variables from outside its body\n閉包就是能夠讀取其他函式內部變量的函式。好處是可以把變數隱藏在內部，讓外部存取不到，只能看到我們想要提供的值  Example 1 func intSeq() func() int { i := 0 return func() int { i += 1 return i } } func main() { nextInt := intSeq() fmt.Println(nextInt()) // 1 fmt.Println(nextInt()) // 2 fmt.Println(nextInt()) // 3 }  上例將變數i隱藏在內部匿名函式中，我們無法對變數i進行操作，只能拿到他的值。\nExample 2 func adder() func(int) int { sum := 0 return func(x int) int { sum += x return sum } }   Closure in Python  def printMessage(): string = \u0026quot;This is closure\u0026quot; def print_msg(): print(string) return print_msg  ","id":2,"section":"posts","summary":"Function as Arguments In Go, function is also a type. So we can pass function as another function\u0026rsquo;s parameters. 當我們將function當成參數使用時，必須在參數列表列出funtion本身的參數type與及其所需的","tags":["Go"],"title":"[Go] Ch1: Go Basics - 06 Advanced Function","uri":"https://kaka-lin.github.io/2020/07/06_advanced_function/","year":"2020"},{"content":"執行緒(Thread) 複習作業系統(Operating System)中的對於執行緒(thread)的解釋：\n執行緒(thread)是OS能夠進行運算排程的最小單位，被包含在程序(Process)之中，是Process中的實際運算單位。   同一顆CPU執行 同一個Process下的Thread共享資源，如記憶體、全域變數等 一個執行緒被中斷會導致集體死亡  Python 模組: threading threading是Python的標準函式庫裡的模組，所以不需要另外安裝即可使用，雖然功能沒有很多，但已經足夠我們用來設計基本的多執行緒程式。\n執行緒(Thread): threading.Thread Step 1. 建立子執行緒與執行 class threading.Thread( group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)   group: should be None; reserved for future extension when a ThreadGroup class is implemented. target: the callable object to be invoked by the run() method. name: the thread name. args: the argument tuple for the target invocation. Defaults to (). kwargs: a dictionary of keyword arguments for the target invocation. Defaults to {}.  Step 2. 執行子執行緒 Thread.start()  Step 3. 等待子執行緒結束 Thread.join(timeout=None)  Wait until the thread terminates. When the timeout argument is present and not `None`, it should be a floating point number specifying a timeout for the operation in second  Example import time import threading def job(): for i in range(5): print(\u0026quot;Child Thread: {}\u0026quot;.format(i)) time.sleep(1) # 建立子執行緒 t = threading.Thread(target=job) # 子執行緒開始執行 t.start() # Main Thread繼續執行自己的工作 for i in range(3): print(\u0026quot;Main thread: {}\u0026quot;.format(i)) time.sleep(1) # 等待子執行緒執行結束 t.join() print(\u0026quot;All Done.\u0026quot;)  [Output]\nChild Thread: 0Main thread: 0 Child Thread: 1Main thread: 1 Child Thread: 2Main thread: 2 Child Thread: 3 Child Thread: 4 All Done.  這裡的主程式會在join的地方等待到子執行緒t結束後，才會繼續往下執行。\n建立多個子執行緒與參數 import time import threading def job2(num): print(\u0026quot;Thread: {}\u0026quot;.format(num)) time.sleep(1) # 建立5個子執行緒 threads = [] for i in range(5): threads.append(threading.Thread(target=job2, args=(i,))) # 執行剛剛建立的子執行緒 threads[i].start() # Main Thread繼續執行自己的工作 for i in range(3): print(\u0026quot;Main thread: {}\u0026quot;.format(i)) time.sleep(1) # 等待所有子執行緒執行結束 for i in range(5): threads[i].join() print(\u0026quot;All Done.\u0026quot;)  [Output]\nThread: 0 Thread: 1 Thread: 2 Thread: 3 Thread: 4 Main thread: 0 Main thread: 1 Main thread: 2 All Done.  物件導向 (Class) 將Thread變成一個Class，需要覆寫run()\nThread.run()  Method representing the thread’s activity.\nYou may override this method in a subclass\nExample import time import threading import random class Counter(threading.Thread): def __init__(self, thread_name): super(Counter, self).__init__(name=thread_name) def run(self): '''重寫父類run方法，在執行緒啟動後執行該方法內的程式''' count = 0 for i in range(1000): count = count + 1 print(\u0026quot;{}, count: {}\u0026quot;.format(self.name, count)) # 建立5個子行緒 threads = [] for i in range(5): threads.append(Counter('thread_' + str(i))) threads[i].start() # Main Thread繼續執行自己的工作 for i in range(3): print(\u0026quot;Main thread: {}\u0026quot;.format(i)) time.sleep(1) # 等待所有子執行緒執行結束 for i in range(5): threads[i].join() print(\u0026quot;All Done.\u0026quot;)  [Output]\nthread_0, count: 1000 thread_1, count: 1000 thread_2, count: 1000 thread_3, count: 1000thread_4, count: 1000 Main thread: 0 Main thread: 1 Main thread: 2 All Done.  鎖(Lock) 為了避免多個執行緒同時對同一個記憶體做存取（例如：將資料寫入同一個檔案），必須使用Lock將那個記憶體區段鎖起來，以確保一次只有一個執行緒可以去存取記憶體裡的資料。\n我們可以使用threading模組裡的Lock()來處理。\nclass threading.Lock()  利用Thread.Lock()來建構互斥鎖(Mutex)\n1. 取得Lock ```python Lock.acquire(blocking=True, timeout=-1) ``` Acquire a lock, `blocking` or `non-blocking`  2. 釋放Lock ```python Lock.release() ``` Release a lock. This can be called from any thread, not only the thread which has acquired the lock.  Example 不使用 Lock import time import threading import random count = 0 class Counter(threading.Thread): def __init__(self, thread_name): super(Counter, self).__init__(name=thread_name) def run(self): global count for i in range(1000): count += 1 print(\u0026quot;{}, count: {}\u0026quot;.format(self.name, count)) # 建立5個子行緒 threads = [] for i in range(5): threads.append(Counter('thread_' + str(i))) threads[i].start() # Main Thread繼續執行自己的工作 for i in range(3): print(\u0026quot;Main thread: {}\u0026quot;.format(i)) time.sleep(1) # 等待所有子執行緒執行結束 for i in range(5): threads[i].join() print(\u0026quot;Final Count: {}\u0026quot;.format(count)) print(\u0026quot;All Done.\u0026quot;)  [Output]\nthread_0, count: 1000 thread_1, count: 2000 thread_2, count: 3000 thread_3, count: 4000thread_4, count: 5000 Main thread: 0 Main thread: 1 Main thread: 2 Final Count: 5000 All Done.  由上輸出可已看到，Output很亂。\n使用 Lock import time import threading import random count = 0 class Counter(threading.Thread): def __init__(self, lock, thread_name): super(Counter, self).__init__(name=thread_name) self.lock = lock def run(self): global count # 取得 lock self.lock.acquire() print(\u0026quot;Lock acquire by {}\u0026quot;.format(self.name)) for i in range(10000): count += 1 # 不能讓多個執行續同時進行的工作 print(\u0026quot;{}, count: {}\u0026quot;.format(self.name, count)) time.sleep(1) # 釋放 lock print(\u0026quot;Lock released by {}\u0026quot;.format(self.name)) self.lock.release() # 建立 lock lock = threading.Lock() # 建立5個子行緒 threads = [] for i in range(5): threads.append(Counter(lock, 'thread_' + str(i))) threads[i].start() # Main Thread繼續執行自己的工作 for i in range(3): print(\u0026quot;Main thread: {}\u0026quot;.format(i)) time.sleep(1) # 等待所有子執行緒執行結束 for i in range(5): threads[i].join() print(\u0026quot;Final Count: {}\u0026quot;.format(count)) print(\u0026quot;All Done.\u0026quot;)  [Output]\nLock acquire by thread_0 thread_0, count: 10000 Main thread: 0 Lock released by thread_0 Lock acquire by thread_1Main thread: 1 thread_1, count: 20000 Main thread: 2 Lock released by thread_1 Lock acquire by thread_2 thread_2, count: 30000 Lock released by thread_2 Lock acquire by thread_3 thread_3, count: 40000 Lock released by thread_3 Lock acquire by thread_4 thread_4, count: 50000 Lock released by thread_4 Final Count: 50000 All Done.  從結果可以看出，執行緒是一個接著一個執行\n旗標(Semaphore) class threading.Semaphore([value])  因為系統資源有限，所以在處理某些耗資源的工作時，會允許有限的執行緒同時進行，跟鎖(Lock)類似 但是Lock僅允許一次一個執行緒，而旗標(Semaphore)允許多個執行緒，但要限制同時執行的執行緒上限。\nSemaphore是進入與出去某個Code block的門鎖, 而這把門鎖會記錄多少個Thread進入到控制的Code block 以確保該Code block最多只能被n個Thread同時執行。\nSemaphore物件上面只有兩個方法:\n acquire([blocking]) release()  另外在取得Semaphore物件的時候你可以透過參數value指定Code block最多只能有多少個Thread同時進入該Code block(即是所謂的Critical Section).\n可以簡單地把Semaphore想像為計數器：\n 當一個執行緒呼叫了acquire()時，旗標內部計數器就減1 當一個執行緒呼叫了release()時，旗標內部計數器就加1  當計數器為0時，之後的執行緒就要等待其他執行緒release後，才能繼續  Example import threading import time import random count = 0 lock = threading.Lock() semphore = threading.Semaphore(2) def code_block(thd, i): global count, lock lock.acquire() count += 1 print(\u0026quot;{} (+1), count: {}\u0026quot;.format(thd.name, count)) lock.release() time.sleep(random.randrange(2, 10)) lock.acquire() count -= 1 print(\u0026quot;{} (-1), count: {}\u0026quot;.format(thd.name, count)) lock.release() class Guest(threading.Thread): def __init__(self, semphore, thread_name): super(Guest, self).__init__(name=thread_name) self.semphore = semphore def run(self): # 取得旗標 # acquire一次，semaphore就會減1，直到數量為0時，就會阻塞這在 self.semphore.acquire() print(\u0026quot;Semphore acquired by {}\u0026quot;.format(self.name)) # 僅允許有限個執行緒同時進的工作 code_block(self, i) time.sleep(1) # 釋放旗標 # release一次，semaphore就會加1 print(\u0026quot;Semphore released by {}\u0026quot;.format(self.name)) self.semphore.release() # 建立3個子行緒 threads = [] for i in range(3): threads.append( Guest(semphore, 'thread_' + str(i))) threads[i].start() # 等待所有子執行緒執行結束 for i in range(3): threads[i].join() print(\u0026quot;Final Count: {}\u0026quot;.format(count)) # should be 0 print(\u0026quot;All Done.\u0026quot;)  [Output]\nSemphore acquired by thread_0Semphore acquired by thread_1 thread_0 (+1), count: 1 thread_1 (+1), count: 2 thread_1 (-1), count: 1 Semphore released by thread_1 Semphore acquired by thread_2 thread_2 (+1), count: 2 thread_0 (-1), count: 1 Semphore released by thread_0 thread_2 (-1), count: 0 Semphore released by thread_2 Final Count: 0 All Done.  事件(Event) This is one of the simplest mechanisms for communication between threads: one thread signals an event and other threads wait for it.\nclass threading.Event()  用於Thread之間的溝通，應用方式通常為ㄧ個thread發起一個event，然後其他thread會等待發出event的thread才開始做相信動作。\nEvent透過維護內部的flag符來實現thread之間的同步問題， 維護flag的狀態有三種方法(wait, set, clear)\n event.wait(): 使執行緒組塞，直到flag值為True，初始值為Flase event.set(): 通知相對應的執行緒作相應動作，將flag值設為True envet.clear(): 做完相對應動作後，再次等待下次通知，將flag值設為False  Example 1 import time import threading class TestThread(threading.Thread): def __init__(self, name, event): super(TestThread, self).__init__() self.name = name self.event = event def run(self): print(\u0026quot;\\tThread: {} wait!\u0026quot;.format(self.name)) self.event.wait() print(\u0026quot;\\tThread: {} start!\u0026quot;.format(self.name)) def run(): event = threading.Event() threads = [] for i in range(1, 5): threads.append(TestThread(str(i), event)) print(\u0026quot;Main thread start!\u0026quot;) for thread in threads: thread.start() print(\u0026quot;\\n--------------------\u0026quot;) print(\u0026quot;Sleep 3 seconds!\u0026quot;) time.sleep(3) print(\u0026quot;Now awake other threads !\u0026quot;) event.set() run()  [Output]\nMain thread start! Thread: 1 wait! Thread: 2 wait! Thread: 3 wait! Thread: 4 wait! -------------------- Sleep 3 seconds! Now awake other threads ! Thread: 2 start!\tThread: 4 start! Thread: 3 start! Thread: 1 start!  Example 2: 十字路口 import time import random import threading class VehicleThread(threading.Thread): ''' Class representing a motor vehicle at an intersection ''' def __init__(self, thread_name, event): super(VehicleThread, self).__init__(name=thread_name) self.event = event def run(self): ''' Vehicle waits unless/until light is green ''' # Staggered arrival times time.sleep(random.randrange(1, 10)) # prints arrival time of car at intersection print(\u0026quot;{} arrived {}\u0026quot;.format( self.getName(), time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()))) # wait for green light self.event.wait() # displays time that car departs intersection print(\u0026quot;{} passes through the intersection at {}\u0026quot;.format( self.getName(), time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()))) def run(): green_light = threading.Event() # creates and starts ten vehicle threads vehicle_threads = [] for i in range(1, 11): vehicle_threads.append(VehicleThread('Vehicle ' + str(i), green_light)) print(\u0026quot;----------------- Start: {}\u0026quot;.format( time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()))) for vehicle in vehicle_threads: vehicle.start() # Run in jupyter notebook, default thread is: 5 while threading.active_count() \u0026gt; 5: # sets the Event's flag to false -- block all incoming vehicles green_light.clear() print(\u0026quot;RED LIGHT! at: {}\u0026quot;.format( time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()))) time.sleep(3) print(\u0026quot;----------------- 3 second -----------------\u0026quot;) # sets the Event's flag to true -- awake all waiting vehicles green_light.set() time.sleep(1) print(\u0026quot;----------------- End: {}\u0026quot;.format( time.strftime(\u0026quot;%Y-%m-%d %H:%M:%S\u0026quot;, time.localtime()))) run()  [Output]\n----------------- Start: 2020-07-15 17:51:40 RED LIGHT! at: 2020-07-15 17:51:40 Vehicle 1 arrived 2020-07-15 17:51:41 Vehicle 4 arrived 2020-07-15 17:51:41 Vehicle 2 arrived 2020-07-15 17:51:42Vehicle 5 arrived 2020-07-15 17:51:42Vehicle 7 arrived 2020-07-15 17:51:42 ----------------- 3 second ----------------- Vehicle 4 passes through the intersection at 2020-07-15 17:51:43Vehicle 5 passes through the intersection at 2020-07-15 17:51:43Vehicle 7 passes through the intersection at 2020-07-15 17:51:43Vehicle 2 passes through the intersection at 2020-07-15 17:51:43Vehicle 1 passes through the intersection at 2020-07-15 17:51:43 RED LIGHT! at: 2020-07-15 17:51:44 Vehicle 3 arrived 2020-07-15 17:51:46 Vehicle 10 arrived 2020-07-15 17:51:46 Vehicle 8 arrived 2020-07-15 17:51:47 ----------------- 3 second ----------------- Vehicle 10 passes through the intersection at 2020-07-15 17:51:47Vehicle 8 passes through the intersection at 2020-07-15 17:51:47Vehicle 3 passes through the intersection at 2020-07-15 17:51:47 Vehicle 6 arrived 2020-07-15 17:51:48Vehicle 9 arrived 2020-07-15 17:51:48 Vehicle 9 passes through the intersection at 2020-07-15 17:51:48 Vehicle 6 passes through the intersection at 2020-07-15 17:51:48 ----------------- End: 2020-07-15 17:51:48  條件變數(Condition) 當執行緒需要滿足某些條件才能繼續執行時，可以使用threading模組裡的Lock()來處理。\nclass threading.Condition(lock=None)   lock: Optional, default is RLock.  threading.Condition提供了三種方法，來進行thread之間的溝通\n wait(): 條件不滿足時，執行緒會釋放並進入阻塞等待 notify(n=1): 條件滿足後，喚醒一個在等待池裡的執行緒 notifyAll(): 條件滿足後，喚醒所有在等待池裡的執行緒  Example：捉迷藏遊戲  遊戲開始後，Seeker先把自己眼睛矇上，蒙上眼後就通知Hider Hider接收到通知後，開始找地方將自己藏起來，再通知Seeker可以開始找了 Seeker接到通知後，就開始找hider  import threading import time class Hider(threading.Thread): def __init__(self, cond, name): super(Hider, self).__init__() self.cond = cond self.name = name def run(self): time.sleep(1) # 確保先運行Seeker中的方法 self.cond.acquire() # b print('To {}: 我已經把眼睛蒙上了'.format(self.name)) print('\\t[Info] {} notify()...'.format(self.name)) self.cond.notify() print('\\t[Info] {} wait()...'.format(self.name)) self.cond.wait() # c print('To {}: 我找到你了！！！'.format(self.name)) print('\\t[Info] {} notify()...'.format(self.name)) self.cond.notify() print('\\t[Info] {} release()...'.format(self.name)) self.cond.release() print('To {}: 我贏了'.format(self.name)) class Seeker(threading.Thread): def __init__(self, cond, name): super(Seeker, self).__init__() self.cond = cond self.name = name def run(self): self.cond.acquire() print('\\t[Info] {} wait()...'.format(self.name)) self.cond.wait() print('To {}: 我已經藏好了，你快來找我吧！！！'.format(self.name)) print('\\t[Info] {} notify()...'.format(self.name)) self.cond.notify() print('\\t[Info] {} wait()...'.format(self.name)) self.cond.wait() print('\\t[Info] {} release()...'.format(self.name)) self.cond.release() print('To {}: 被你找到了，我輸了！'.format(self.name)) if __name__ == '__main__': cond = threading.Condition() seeker = Seeker(cond, 'seeker') hider = Hider(cond, 'hider') seeker.start() hider.start()  [Output]\n [Info] seeker wait()... To hider: 我已經把眼睛蒙上了 [Info] hider notify()... [Info] hider wait()... To seeker: 我已經藏好了，你快來找我吧！！！ [Info] seeker notify()... [Info] seeker wait()... To hider: 我找到你了！！！ [Info] hider notify()... [Info] hider release()... To hider: 我贏了 [Info] seeker release()... To seeker: 被你找到了，我輸了！  ","id":3,"section":"posts","summary":"執行緒(Thread) 複習作業系統(Operating System)中的對於執行緒(thread)的解釋： 執行緒(thread)是OS能夠進","tags":["Python","OS"],"title":"[Python] Ch2: Process Management - 01 Python 多執行緒(Multi-Thread)","uri":"https://kaka-lin.github.io/2020/07/01_multithread/","year":"2020"},{"content":"Packages (套件) 每個 Go Program 都是由套件(packages)組成的\n程式運行的入口是: package main\npackage main func main() {}  Import import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; )  Exported names In Go, a name is exported if it begins with a capital letter.\nFor example, Pi is an exported name which is from the math package.\nVariables The var statement declares a list of variables; as in function arguments lists, the type is last.\n// statement (陳述) var i int // expression (表達) var j = 2   如果變數初始化是使用表達，則可以省略型別，如上所示。變數從初始值中獲得型別。  Short variable declarations := short assignment statement\n在函式中，在明確類型的地方可以用 := 取代 var。\nvar k = 3 // equal k := 3  Functions Define with function func.\nFunctions continued When two or more consecutive named function parameters share a type, you can omit the type from all but the last.\nx int, y int // equal x, y int  Multiple results func swap(x, y string) (string, string) { return y, x }  Named return values Go\u0026rsquo;s return values may be named. If so, they are treated as variables defined at the top of the function.\nfunc split(sum int) (x, y int) { x = sum * 4 / 9 y = sum - x return }   These names should be used to document the meaning of the return value. A return statement without arguments returns the named return values. This is known as a \u0026quot;naked\u0026quot; return. Naked return statements should be used only in short functions, as with the example show here. They can harm readability in longer functions.  Basic types bool string int int8 int32 int64 uint uint8 uint16 uint32 uint64 uintptr byte // alias for uint8 rune // alias for int32 float32 float64 complex64 complex128  Zero values Variables declared without an explicit initial value are given their zero value\nThe zero value is:\n numeric type: 0 boolean type: false strings: \u0026quot;\u0026quot;  Type coversions (型別轉換) The expression(表達式) T(v) convers the value to the type T.\nvar i int = 42 var f float64 = float64(i) var u uint = uint(f) // or i := 42 f := float64(i) u := uint(f)  Type inference When declaring a variable without specifying an explicit type (either by using the := syntax or var =  expression syntax), the variable\u0026rsquo;s type is inferred from the value on the right hand side.\nvar i int j := i // j is an int  Constants Constants are declared like variable, but with the const keyword.\n  Constants can be charater, string, boolean, or numeric values.\n  Constants cannot be declared using the := syntax.\n  const World = \u0026quot;世界\u0026quot;  Numeric Constants Numeric constants are high-precision values.\nAn untyped constant takes the type needed by its context.  const ( // Create a huge number by shifting a 1 bit left 100 places. // In other words, the binary number that is 1 followed by 100 zeroes. Big = 1 \u0026lt;\u0026lt; 100 // Shift it right again 99 places, so we end up with 1\u0026lt;\u0026lt;1, or 2. Small = Big \u0026gt;\u0026gt; 99 )  ","id":4,"section":"posts","summary":"Packages (套件) 每個 Go Program 都是由套件(packages)組成的 程式運行的入口是: package main package main func main() {} Import import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) Exported names In Go, a name is exported if it begins with a capital letter. For example, Pi is an exported","tags":["Go"],"title":"[Go] Ch1: Go Basics - 01 Go Basics","uri":"https://kaka-lin.github.io/2020/07/01_go_basics/","year":"2020"},{"content":"For Go has only one looping construct, the foor loop\nfor \u0026lt;init state\u0026gt;; \u0026lt;condition\u0026gt;; \u0026lt;post state\u0026gt;  sum := 0 for i := 0; i \u0026lt; 10; i++ { sum += i }   Go的for看起來跟C或Java中的依樣，但是沒有 ()，但{}是必要的，如上所示。  Note For的 init 和 post statements可以為空。\nsum :=1 for ; sum \u0026lt; 1000; { sum += sum } // 1024  While Go沒有While, 因為可以省略分號(;)，C的while在Go中就是for\nsum := 1 for sum \u0026lt; 1000 { sum += sum // 1024 }  Infinite loop for { // do something }  If Go\u0026rsquo;s if statements are like its for loops; the expression need not be surrounded by parentheses  ( ) but the braces { } are required.\nif \u0026lt;condition\u0026gt; { // do something }  If with a short statement 跟for一樣，if可以在條件之前執行一個簡單的語句，這個語句的作用範圍僅在if的範圍內\nfunc pow(x, n, lim float64) float64 { if v := math.Pow(x, n); v \u0026lt; lim { return v } return lim }  If and else func pow(x, n, lim float64) float64 { if v := math.Pow(x, n); v \u0026lt; lim { return v } else { fmt.Printf(\u0026quot;%g \u0026gt;= %g\\n\u0026quot;, v, lim) } return lim }  Exercise: Loop and Functions 用牛頓法實現開根號函式   牛頓法:\n選擇一個初始點，然後帶入下面公式重覆計算，來求Sqrt(x)的近似值\n$z = z - ((z^2 - x) / 2z)$\n  此練習我們宣告一個浮點數1.0當作我們的初始值，並且重覆計算10次，觀察結果是否與math.Sqrt()相近\npackage main import ( \u0026quot;fmt\u0026quot; \u0026quot;math\u0026quot; ) func Sqrt(x float64) float64 { // define init value z := 1.0 cal_times := 10 for cal_times \u0026gt; 0 { z -= (z*z - x) / (2 * x) cal_times -= 1 } return z } func main() { fmt.Println(Sqrt(4)) fmt.Println(math.Sqrt(4)) }  Switch Go\u0026rsquo;s switch is like the one in C, C++, Java, Javascript, and PHP.\n Go的switch會自動提供break在每個case的結尾，所以不用自己寫 Go的swich case不必為常數，且值也不必為整數  switch os := runtime.GOOS; os { case \u0026quot;drawin\u0026quot;: fmt.Println(\u0026quot;OS X.\u0026quot;) case \u0026quot;linux\u0026quot;: fmt.Println(\u0026quot;Linux.\u0026quot;) default: fmt.Printf(\u0026quot;%s.\\n\u0026quot;, os) }  Defer A defer statement defers the execution of a function until the surrounding function returns.\nThe deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.  func main() { defer fmt.Println(\u0026quot;world\u0026quot;) fmt.Println(\u0026quot;hello\u0026quot;) }  [Output]:\nhello world  Sracking defers Deferred function calls are pushed onto a stack.\nWhen a function returns, its deferred calls are executed in last-in-first-out order.  func main() { fmt.Println(\u0026quot;counting\u0026quot;) for i := 0; i \u0026lt; 10; i++ { defer fmt.Println(i) } fmt.Println(\u0026quot;done\u0026quot;) }  [Output]:\ncounting done 9 8 7 6 5 4 3 2 1 0  ","id":5,"section":"posts","summary":"For Go has only one looping construct, the foor loop for \u0026lt;init state\u0026gt;; \u0026lt;condition\u0026gt;; \u0026lt;post state\u0026gt; sum := 0 for i := 0; i \u0026lt; 10; i++ { sum += i } Go的for看起來跟C或Java中的依樣，但是沒有 ()，但{}是必要的，如上","tags":["Go"],"title":"[Go] Ch1: Go Basics - 02 Flow Control","uri":"https://kaka-lin.github.io/2020/07/02_flow_control-copy/","year":"2020"},{"content":"Structs (Structures) A struct or structure is a collection of fields.\n1. Defining a struct Using struct keyword to create a new structure type.\ntype StructName struct { field1 fieldType1 field2 fieldType2 ... }  Example:\ntype Vertex struct { X int Y int }  2. Accessing Struct Fields (Members) Struct fields are accessed using a dot.\nv := Vertrx{1, 2} v.X = 4 fmt.Println(v.X) // 4  Pointers to Structs 1. Pointer A pointer holds the memory address of a value.\nThe type *T is a pointer to a T value. Its zero value is nil.\nvar *p int  The \u0026amp; operator generates a pointer to its operand.\ni := 42 p = \u0026amp;i  The * operator denotes the pointer\u0026rsquo;s underlying value.\nfmt.Println(*p) // read i through the pointer p *p = 21 // set i through the pointer p  This is known as \u0026quot;dereferencing\u0026quot; or \u0026quot;indirecting\u0026quot;.\n Unlike C, Go has no pointer arithmetic (沒有指針運算).  2. Pointers to Structs Struct fields can be accessed through a struct pointer.\nThe syntax to create a pointer to a struct is as follows.\ns := StructType{...} p := \u0026amp;s // or p := \u0026amp;StructType{...}  Example:\nv := Vertex{1, 2} p := \u0026amp;v q := \u0026amp;Vertex{3, 4}  3. Accessing the field of Struct Pointer To access the field X of a struct when we have the struct pointer p, we need to use dereferencing syntax (*p) to get the actual value of struct it is pointing to and use (*p).X to access X of that struct value.\nHowever, that notation is cumbersome, so the language permits us instead to write just p.X, without the explicit dereference.\nv := Vertex{1, 2} p := \u0026amp;v p.X = 1e3 fmt.Println(v) // {1000, 2}  ","id":6,"section":"posts","summary":"Structs (Structures) A struct or structure is a collection of fields. 1. Defining a struct Using struct keyword to create a new structure type. type StructName struct { field1 fieldType1 field2 fieldType2 ... } Example: type Vertex struct { X int Y int } 2. Accessing Struct Fields (Members) Struct fields are accessed using a dot. v := Vertrx{1, 2} v.X = 4 fmt.Println(v.X) // 4 Pointers to Structs 1.","tags":["Go"],"title":"[Go] Ch1: Go Basics - 03 Go Data Structure: `Structs`","uri":"https://kaka-lin.github.io/2020/07/03_structs/","year":"2020"},{"content":"Array 1. Creating an Array The type [n]T is an array of n values of type T.\nThe expression\nvar a [10]int   An array\u0026rsquo;s length is part of its type, so arrays cannot be resized. But Go provides a convenient way of working with array.  2. Array initialize a := [6]int{2, 3, 5, 7, 11, 13} // or a := []int{2, 3, 5, 7, 11, 13}  Slices A slice is a dynamically-size, flexible view into the elements of an array.\nSlice的長度是可變的，與Array相比，提供一種更高階的觀點看待一片資料。   Slice also has continuous segments of memory locations The default value of uninitialized slice is nil Slices does not store the data. It just provides reference to an array  1. Creating a Slice Method 1: like array but no size The type []T is a slice with elements of type T.\nvar s []int // length: 0, capacity: 0 -\u0026gt; nil  Method 2: use make() Create slice by using make() which is available in builtin package of golang\ns := make([]int, 5) // lenght == capacity == 5 // or s := make([]int, 5, 10) // lenght: 5, capacity: 10  Method 3: [low:high] A slice is formed by specifying two indices, a low and high bound, seperated by a colon:\nvar s []type = a[low:high] //or s := a[low:high]  Example: // Elements 1 through 3 // a = [1, 2, 3, 4, 5] //var s []int = a[1:4] s := a[1:4] // [2, 3, 4]   More  // slice initialize a := []int{2,3,5,7,11} a1 = a[1:4] // [3 5 7] a2 = a[:2] // [2 3] a3 = a[1:] // [3 5 7 11] a4 = a[:] // [2 3 5 7 11]  2. Slices are like references to arrays A slice does not store any data, it just describes a section of an underlying array.\n Changing the elements of a slice modifies the corresponding elements of its underlying array.  a := [6]int{1, 2, 3, 4, 5, 6} fmt.Println(a) // [1 2 3 4 5 6] b := a[1:4] fmt.Println(b) // [2 3 4] b[1] = 10 fmt.Println(b) // [2 10 4] fmt.Println(a) // [1 2 10 4 5 6]  3. Slice length and capacity A slice has both a length and a capacity.\n  length\nThe length of a slice is the number of elements it contains.\nNumber of elements    capacity\nThe capacity of a slice is the number of elements in the underlying array\nTotal size    // length len(s) // capacity cap(s)  4. Slices of slices Slices can contain any type, including other slices\nExample: 2D Array 3x3 Array\nmatrix := [][]int{ make([]int, 3), make([]int, 3), make([]int, 3), }  tic-tac-toe boart(井字遊戲)\nboard := [][]string{ []string{\u0026quot;-\u0026quot;, \u0026quot;-\u0026quot;, \u0026quot;-\u0026quot;}, []string{\u0026quot;-\u0026quot;, \u0026quot;-\u0026quot;, \u0026quot;-\u0026quot;}, []string{\u0026quot;-\u0026quot;, \u0026quot;-\u0026quot;, \u0026quot;-\u0026quot;}, }  5. append function Appending new values to the slice using built-in append function.\nfunc append(s []T, vs ...T) []T    If the backing array of s is too small to fit all the given values a bigger array will be allocated. The returned slice will point to the newly allocated array.\n當append的元素個數超過原slice的capacity時，append利用現有的slice建立一個新的slice，並將後續的參數附加在這個slice之後。    var s []int s = append(s, 0)  6. copy function Copying one slice into another using built-in copy function.\nfunc copy(dst []T, src []T) int   copy will return the number of elements copied which is the minimum of len(dst) and len(src).  複製時，目的slice的容量必須足夠，否則會發生 cap out of range的錯誤，copy函式若執行成功，會傳回複製的元素個數。    s1 := []int{1,2,3} s2 := make([]int, 2) copy(s1, s2)  7. range function The range form of the for loop iterates over a slice or map.\nWhen ranging over a slice, two values are returned for each iteration.\n index copy of the element at that index.  var a = []int{1,2,3,4,5} for i, v := range a { fmt.Printf(\u0026quot;a[%d]: %d\\n\u0026quot;, i, v) }  Skip the index or value Can skip the index or value by assigning to _\nfor i, _ := range array for _, v := range array  If only want the index, can omit the second variable.\nfor i := range array  Exercise: Slices Implement Pic. It should return a slice of length dy, each element of which is a slice of dx 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values.\nThe choice of image is up to you. Interesting functions include (x+y)/2, x*y, and x^y.\nfunc Pic(dx, dy int) [][]uint8 { image := make([][]uint8, dy) for i := range image { image[i] = make([]uint8, dx) for j := range image[i] { image[i][j] = uint8((i+j) / 2) } } return image }  ","id":7,"section":"posts","summary":"Array 1. Creating an Array The type [n]T is an array of n values of type T. The expression var a [10]int An array\u0026rsquo;s length is part of its type, so arrays cannot be resized. But Go provides a convenient way of working with array. 2. Array initialize a := [6]int{2, 3, 5, 7, 11, 13} // or a := []int{2, 3, 5, 7, 11, 13} Slices A slice is","tags":["Go"],"title":"[Go] Ch1: Go Basics - 04 Go Data Structure: `Array` \u0026 `Slice`","uri":"https://kaka-lin.github.io/2020/07/04_array_slice/","year":"2020"},{"content":"Maps A map maps key to value.\nGolang provides map data structure which implements hashtable.\n1. Creating a Maps The zero value of a map is nil. A nil map has no keys, nor can keys be added.\nMethod 1: like array // nil map var m map[keyTpye]valueType    Note:\n如果使用此方法來create map，還需要使用make()來初始化此map，否則無法存放key-value.\n  Method 2: use make() The make function returns a map od the given type, initialized and ready for use.\nm := make(map[keyTpye]valueType) // or // Define a map var m map[keyTpye]valueType // Using make function to initiate map m = make(map[keyTpye]valueType)  2. Maps initialize Map literals are like struct literals, but the keys are required.\nvar m = map[keyType]valueType { key1: value1, key2: value2, }  3. Mutating Maps Insert or Update Insert or update an element in map m\nm[key] = value  Detele Delete an element\ndelete(m, key)  Check if the key is exist Test that a key is present with a two-value assignment:\nv, ok := m[key]   If key is in map, ok is true. If not, ok is false. If key is not in map, then v is zero value for the map\u0026rsquo;s element type.  Exercise: Maps Implement WordCount. It should return a map of the counts of each “word” in the string s. The wc.Test function runs a test suite against the provided function and prints success or failure.\nfunc WordCount(s string) map[string]int { m := make(map[string]int) //a := strings.Split(s, \u0026quot; \u0026quot;) a := string.Fields(s) for _, c := range a { m[c]++ } return m }  ","id":8,"section":"posts","summary":"Maps A map maps key to value. Golang provides map data structure which implements hashtable. 1. Creating a Maps The zero value of a map is nil. A nil map has no keys, nor can keys be added. Method 1: like array // nil map var m map[keyTpye]valueType Note: 如果使用此方法來create map，還需要","tags":["Go"],"title":"[Go] Ch1: Go Basics - 05 Go Data Structure: `Maps`","uri":"https://kaka-lin.github.io/2020/07/05_maps/","year":"2020"},{"content":"Array  Array  What is Array?  Memory is (Generally Viewed as) Array Array as Memory Block in C/C++   Array as Abstract Data Structure C++ STL Vector: a Growing Array Two Dimensional Array  One Block Implementation of 2D Array Array of Array Implementation of 2D Array Comparison of Two Implementations A Table between Two Programs   Ordered Array  Definition of Ordered Array insert of Ordered Array construct of Ordered Array  Method 1: Selection sort Method 2: Insertion sort   update and remove of Ordered Array   Binary Search with Ordered Array  Application: Book Search within (Digital) Library  Method 1: Sequential Search Algorithm Method 2: Sequential Search Algorithm with Cut (Ordered Array) Method 3: Binary Search Algorithm (Ordered Array)        What is Array? 可以想像成櫃子，櫃子上有某些連續的編號  \u0026ndash;\u0026gt; 有編號的櫃子\nMemory is (Generally Viewed as) Array 記憶體就是一個很大的Array\naddress就是index  Array as Memory Block in C/C++ 反過來說Array也是記憶體\n Note: 一個 Data Structure 看的是如何取用與維護  Array as Abstract Data Structure C++ STL Vector: a Growing Array 完整的array implementation\nTwo Dimensional Array 最熟悉的 Two Dimensional Array: 圖片\nOne Block Implementation of 2D Array 把2D展開成1D\nArray of Array Implementation of 2D Array ex: 第一個raw與第二個raw分開放(每個raw有5個element)\nComparison of Two Implementations    # one block array of array     space elements elments \u0026amp; nRow pointers   construct fixed prop. nRow   get one deref two deref     tradeoff:  one block: faster \u0026amp; succinct array of array: again easier for programmers    A Table between Two Programs 以下兩種方式，哪種比較快？\n  Ans: rowsum()\n因為快取機制，rowsum() 是連續的記憶體，比較吃香\n  Ordered Array Definition of Ordered Array An array of consecutive elements with ordered values.\narr[0] \u0026lt;= arr[1] \u0026lt;= arr[2] \u0026lt;= ... \u0026lt;= arr[end-1]  insert of Ordered Array 不能亂插，需考慮值得大小\n  example:\n[2, 6, 7, 13] ^ | 10 ------- Resutl: [2, 6, 7, 10, 13]    Maintain Ordered Array\n以前在維護Array時只需要他的開頭(Head)的位置(因為其他位置都可以從開頭算出來)，現在如果要維護Consecutive Array時需要知道array的尾巴(Tail)，這樣才能知道下次要放新東西時該往哪邊繼續放下去(資料的地方到哪)\n  田神: 希望同學有機會想想，修正上面的程式碼～\nconstruct of Ordered Array Example: 1, 3, 7, 4, 6, 5, 2\nMethod 1: Selection sort 其中一種方法是使用 getMinIndex()幫我們找出一個Array中最小的，每次叫出最小的，放到new array裡或是與原來的交換，依此類推就可以排出ordered array。 此方法叫做選擇排序法(selection sort)。\ngetMinIndex multiple times (selection sort)  Method 2: Insertion sort 假設array的左邊是排好序的array(一開始就是index 0)， 右邊是還沒排好的的array(一開始就是index 1~end)，然後從右邊抽一個數字(右邊array的第一個位置)插到左邊，依此類推就可以排出ordered array。\ninsert multiple times (insertion sort)  update and remove of Ordered Array Binary Search with Ordered Array Application: Book Search within (Digital) Library 數位圖書館，每一本書前面有索引(book ID number)，在同一個架子上時書會按照ID大小排序(Ordered Array)\nMethod 1: Sequential Search Algorithm 已經知道在某個架子上了，那就從左邊找到右邊\nfor i from 0 to tail if (arr[i].ID == toFind.ID) return FIND end for eturn NOTFIND  此方法並沒有用到ordered array的優點，就算架子上的書沒按照順序排也沒差。\nMethod 2: Sequential Search Algorithm with Cut (Ordered Array) Possibly easier to declare not found\ntoFind.ID = 5566 for i from 0 to tail if (arr[i].ID == toFind.ID) return FIND if (arr[i].ID \u0026gt; toFind.ID) return NOTFIND end for eturn NOTFIND  Method 3: Binary Search Algorithm (Ordered Array) begin = 0 end = tail while (begin != end) { mid = (begin + end) / 2 if (arr[mid] \u0026gt; toFind) end = mid - 1 else if (arr[mid] \u0026lt; toFind) begin = mid + 1 else if arr[mid] = toFind FIND }  ","id":9,"section":"posts","summary":"Array Array What is Array? Memory is (Generally Viewed as) Array Array as Memory Block in C/C++ Array as Abstract Data Structure C++ STL Vector: a Growing Array Two Dimensional Array One Block Implementation of 2D Array Array of Array Implementation of 2D Array Comparison of Two Implementations A Table between Two Programs Ordered Array Definition of Ordered Array insert of Ordered Array construct of Ordered Array Method 1: Selection","tags":["Data Structure","DSA"],"title":"[DSA] NTU CSIE DSA, 01: Array","uri":"https://kaka-lin.github.io/2020/07/01_array/","year":"2020"},{"content":"Database Basics  Database Basics  What is a Database  The basic functions for manipulating a database: CRUD   Database Management System (DBMS) 資料庫的類型  關聯式資料庫 非關聯式資料庫(NoSQL)  SQL與NoSQL差異     Database Transaction SQL  SQL語法  SQL - 四種語言   SQL Datatype   Object Relational Mapping (ORM)    What is a Database 資料庫(Database)就是儲存資料的地方，使用者可以對資料庫中的資料執行新增、讀取、更新、刪除等操作。\n正式定義：\n資料庫是一群相關資料的集合題  The basic functions for manipulating a database: CRUD  C: Create R: Read U: Update D: Delete  Database Management System (DBMS) 資料庫是儲存資料的地方，但是如果資料只是儲存到電腦的檔案中，其效用並不大，因此我們需要一套能夠讓我們很方便的管理這些資料庫檔案的軟體，就是所謂的資料庫管理系統(Database Management System, DBMS)\nDatabase System = Database + DBMS  資料庫的類型 資料庫管理系統可以依據所支援的資料庫模型來作分類\n  階層式(Hierarchical)資料庫\n是一種由上而下(Top-down)的結構，資料之間是一種樹狀的關係，所以又稱為樹狀結構(Tree)。    網路式(Network)資料庫\n結構和階層式類似，差別是提供多對多(M:N)的關係，就像一張網子一樣，每一個子節點可以有多個父節點相連，可以消除階層式的資料重覆問題。    關聯式(Relational)\n關聯式資料庫是以2維的矩陣來儲存資料(把資料儲存在表格的欄、列之中)，而儲存在欄、列裡的資料必會有所`關聯`，所以這種儲存資料的方式才會稱為關聯式資料庫，而儲存資料的表格稱為資料表。   優點：可以從一個資料表中的欄位透過資料表的關聯，而找到另一個資料表中的資料   Image reference: 陳建成老師 - 資料庫系統    而現今主流的資料庫類型為：\n 關聯式資料庫(Relational Database Management System, RDBMS) NoSQL(Not Only SQL)資料庫  關聯式資料庫  SQLite MySQL  MariaDB (MySQL的代替品)   PostgreSQL Microsoft SQL Server Oracle DB IBM DB2  非關聯式資料庫(NoSQL)  MongoDB Redis Firebase Realtime Database  SQL與NoSQL差異  SQL: 表格 NoSQL: JSON  Database Transaction 資料庫事務，包含一組資料庫操作的邏輯單元工作，在事務中包含的資料庫操作是不可分割的整體，這些操作要麼一起做，要麼一起回滾(Roll Back)到執行前的狀態。\n事務的ACID特性:\n  atomicity(原子性)：事務不可分割，不可約簡\n一個事務中的所有操作，或者全部完成，或者全部不完成，不會結束在中間某個環節。事務在執行過程中發生錯誤，會被回滾(Rollback)到事物開始前的狀態，就像這個事務從來沒有執行過一樣。    consistency(一致性)\n在事務開始之前和事務結束以後，資料庫的完整性沒有被破壞。也就是若這次事務成功，整個資料庫都必須是事務結束後的狀態    isolation(隔離性)\n資料庫允許多個並發事務同時對其數據進行讀寫和修改的能力，隔離性可以防止多個事務並發執行時由所交叉執行而導致數據的不一致。  事務隔離分為不同等級:\n Read uncommitted Read committed Repeatable read Serializable    durability(持續性)\n事務處理結束後，對數據的修改就是永久的，即使系統故障也不會丟失。     SQL   SQL: 標準化程式語言(Structured Query Language)\n是一種資料庫查詢和程式設計語言，用於存取資料以及查詢、更新和管理關聯式資料庫系統    SQL Tutorial\n  SQL語法 SQL主要是以關鍵字(keyword)和表格名稱(table)和欄位名稱(column)當作一段完整的語句。\nSQL語法使用分號;當作結尾，英文不分大小寫，單字間使用空白間隔。\n 單行註解： -- 多行註解： /**/  SQL - 四種語言   DDL(Data Definition Language)：資料定義語言\n能建立或刪除資料庫和表格等用來儲存的單位\n CREATE ALTER: 修改資料表結構，新增or刪除欄位 DROP    DML(Data Manipulation Language)：資料操作語言\n用於操縱表格裡資料\n INSERT UPDATE DELETE    DQL(Data Query Language)：資料查詢語言\n負責進行資料查詢，不會對資料本身進行修改的語句\n SELECT    DCL(Data Control Language)：資料控制語言\n用來控制資料表格、檢視表之存取權限，提供資料庫的安全性\n COMMIT: 完成交易作業 ROLLBACK: 交易作業異常，將已變動的資料回復到交易開始的狀態 GRANT: 賦予使用者權限 REVOKE: 取消使用者的權限    SQL Datatype  微軟-資料類型 (Transact-SQL)   Object Relational Mapping (ORM) Object Relational Mapping (ORM): 物件關聯對映\n將關聯式資料庫映射至物件導向的資料抽象化技術， 讓程式開發人員可以用操作物件的方式對資料庫進行操作， 而不是直接使用SQL語法對資料庫進行操作。    優點：\n 通用性：可以不用管底層的資料庫是使用哪種，僅須使用同一套語法攥寫即可，靈活性與擴展性佳。 安全性：可以防止SQL injection (SQL注入) 攻擊  就是駭客在傳輸到網站Server的資料裡直接寫SQL，當我們網站某段SQL直接讀取駭客傳來的資料並執行時，如果傳來的是正常的資料就會沒事，如果傳來的是SQL語句，且包含惡意（如：DELETE）就會讓網站資料被移除。   簡化性：使得我們資料庫結構化，如ORM可以將MySQL轉換成Python工程師可以讀懂的Class，可讀性高。    缺點：\n 效能：自動化進行關聯式資料庫的Mapping一定需要消耗一定的效能。 複雜的查詢上ORM仍然力不從心，如：多表聯查、where條件複雜的查詢時。    ","id":10,"section":"posts","summary":"Database Basics Database Basics What is a Database The basic functions for manipulating a database: CRUD Database Management System (DBMS) 資料庫的類型 關聯式資料庫 非關聯式資料庫(NoSQL) SQL與NoSQL差異 Database Transaction SQL SQL語法 SQL - 四種語","tags":["Database"],"title":"[DB] Database Basics","uri":"https://kaka-lin.github.io/2020/06/db_basics/","year":"2020"},{"content":"MySQL - Basics  SQL Tutorial MySQL Documentation MySQL - Tutorial Quickstart for Cloud SQL for MySQL  Load ipython-sql ipython-sql:\n 是jupyter notebook的extension，用來擴充jupyter對SQL的支援 其底層是使用SQLAlchemy  %load_ext sql # for engines that do not support autocomit %config SqlMagic.autocommit=False  Connect Database Because ipython-sql is based on SQLAlchemy, we use the SQLAlchemy\u0026rsquo;s DBAPI to connect the MySQL database via the mysqlclient (maintained fork of MySQL-Python) driver.\nSQLAlchemy - MySQL DBAPI\nmysql+mysqldb://\u0026lt;user\u0026gt;:\u0026lt;password\u0026gt;@\u0026lt;host\u0026gt;[:\u0026lt;port\u0026gt;]/\u0026lt;dbname\u0026gt;  %sql mysql+mysqldb://root:\u0026lt;passwd\u0026gt;@35.201.196.222/kaka_test  %%sql SELECT * FROM entries;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 2 rows affected.     guestName content entryID     first guest I got here 1   second guest Me too! 2    MySQL Version %sql SHOW VARIABLES LIKE '%version%';   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 8 rows affected.  Create Table  MySQL - Data Type  %%sql CREATE TABLE persons( PRIMARY KEY (person_id), person_id INT NOT NULL AUTO_INCREMENT, firstname VARCHAR(255) NOT NULL, lastname VARCHAR(255), age INT, height FLOAT, weight FLOAT, city VARCHAR(255) );   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 0 rows affected. []  CRUD for Data  C: Create R: Read U: Update D: Delete  Create Data: SQL INSERT INTO %%sql INSERT INTO persons VALUES (10, 'kaka','Lin', 28, 175, 70, 'Taipei'); INSERT INTO persons (firstname, lastname, age, height, weight, city) VALUES ('kiwi','Li', 30, 173, 70, 'Taipei');   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 1 rows affected. 1 rows affected. []  Read Data: SQL SELECT %%sql SELECT * FROM persons;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 2 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 70.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    Update Data: SQL UPDATE %%sql UPDATE persons SET weight = 68 WHERE firstname = 'kaka';   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 1 rows affected. []  %%sql SELECT * FROM persons;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 2 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    Delete Data: SQL DELETE Before we delete data, we first add the data that we want to delete.\n%%sql INSERT INTO persons VALUES (3, 'albert','Lin', 28, 180, 70, 'Taipei');   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 1 rows affected. []  %%sql SELECT * FROM persons;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 3 rows affected.     person_id firstname lastname age height weight city     3 albert Lin 28 180.0 70.0 Taipei   10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    %%sql DELETE FROM persons WHERE person_id = 3;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 1 rows affected. []  %%sql SELECT * FROM persons;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 2 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    SQL WHERE %%sql INSERT INTO persons (firstname, lastname, age, height, weight, city) VALUES ('Albert', 'Lin', 28, 160, 70, 'Taipei'), ('Andy', 'Wei', 24, 175, 72, 'Teipei'), ('kevin', 'Wang', 30, 174, 63, 'San Francisco'), ('kevin', 'Wei', 27, 178, 65, 'Taipei'), ('David', 'Kang', 26, 175, 65, 'Washington'), ('Matt', 'Wang', 26, 172, 72, 'Taipei'), ('kaka-ideal', 'Lin', 28, 178, 70, 'Janpan');   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 7 rows affected. []  %%sql SELECT * FROM persons   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 9 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco   15 kevin Wei 27 178.0 65.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    %%sql SELECT * FROM persons WHERE age = 28;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 3 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   18 kaka-ideal Lin 28 173.0 70.0 Janpan    SQL AND, OR and NOT AND %%sql SELECT * FROM persons WHERE age = 28 AND height \u0026gt; 170;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 2 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    OR %%sql SELECT * FROM persons WHERE age = 28 OR height \u0026gt; 170;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 9 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco   15 kevin Wei 27 178.0 65.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    SQL IN Operator The IN operator allows you to specify multiple values in a WHERE clause.\n%%sql SELECT * FROM persons WHERE age = 28 OR age = 26;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 5 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    %%sql SELECT * FROM persons WHERE age IN (26, 28);   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 5 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    Not %%sql SELECT * FROM persons WHERE age != 28;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 6 rows affected.     person_id firstname lastname age height weight city     11 kiwi Li 30 173.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco   15 kevin Wei 27 178.0 65.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei    SQL ORDER BY SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;   Default: ASC  %%sql SELECT * FROM persons ORDER BY age;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 9 rows affected.     person_id firstname lastname age height weight city     13 Andy Wei 24 175.0 72.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   15 kevin Wei 27 178.0 65.0 Taipei   10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan   11 kiwi Li 30 173.0 70.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco    SQL LIKE Operator The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nThere are two wildcards often used in conjunction with the LIKE operator:\n % : The percent sign represents zero, one, or multiple characters _ : The underscore represents a single character  %%sql SELECT * FROM persons WHERE city LIKE '%pei%';   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 6 rows affected.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   15 kevin Wei 27 178.0 65.0 Taipei   17 Matt Wang 26 172.0 72.0 Taipei    MySQL - Functions  MySQL Function  Modify Table: SQL ALTER TABLE   Add a new column in an existing table\nALTER TABLE table_name ADD column_name datatype;    %%sql ALTER TABLE persons ADD height_meters REAL; UPDATE persons SET height_meters = round(height / 100, 2); SELECT * FROM persons;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 0 rows affected. 9 rows affected. 9 rows affected.     person_id firstname lastname age height weight city height_meters     10 kaka Lin 28 175.0 68.0 Taipei 1.75   11 kiwi Li 30 173.0 70.0 Taipei 1.73   12 Albert Lin 28 160.0 70.0 Taipei 1.6   13 Andy Wei 24 175.0 72.0 Taipei 1.75   14 kevin Wang 30 174.0 63.0 San Francisco 1.74   15 kevin Wei 27 178.0 65.0 Taipei 1.78   16 David Kang 26 175.0 65.0 Washington 1.75   17 Matt Wang 26 172.0 72.0 Taipei 1.72   18 kaka-ideal Lin 28 178.0 70.0 Janpan 1.78    Drop Table %%sql DROP TABLE persons;   * mysql+mysqldb://root:***@35.201.196.222/kaka_test 0 rows affected. []  ","id":11,"section":"posts","summary":"MySQL - Basics SQL Tutorial MySQL Documentation MySQL - Tutorial Quickstart for Cloud SQL for MySQL Load ipython-sql ipython-sql: 是jupyter notebook的extension，用來擴充jupyter對SQL的支援 其底層是使用","tags":["Database","MySQL"],"title":"[DB] Mysql Basics","uri":"https://kaka-lin.github.io/2020/06/mysql-basics/","year":"2020"},{"content":"SQLAlchemy - basics SQLAlchemy - Tutorial\nimport sqlalchemy from sqlalchemy import create_engine, Table from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, ForeignKey, Integer, String, Numeric from sqlalchemy.orm import sessionmaker sqlalchemy.__version__  Connect Database # SQLite #connect_db = 'sqlite:///test.db' # MySQL connect_db = 'mysql+mysqldb://root:\u0026lt;passwd\u0026gt;@35.201.196.222/kaka_test' ''' create_engine 此時只有建立SQLAlchemy Engine instance(實例) 此時還沒真正真正連到資料庫 只有第一個SQL指令被下達時，才會真正連到資料庫 ''' engine = create_engine(connect_db, echo=True, encoding=\u0026quot;utf8\u0026quot;)  !ls -al  total 80 drwxr-xr-x 5 kakalin staff 160 May 8 17:19 \u001b[1m\u001b[36m.\u001b[m\u001b[m drwxr-xr-x 11 kakalin staff 352 May 6 15:51 \u001b[1m\u001b[36m..\u001b[m\u001b[m drwxr-xr-x 3 kakalin staff 96 May 8 13:56 \u001b[1m\u001b[36m.ipynb_checkpoints\u001b[m\u001b[m -rw-r--r-- 1 kakalin staff 264 May 8 14:10 README.md -rw-r--r-- 1 kakalin staff 33194 May 8 17:19 sqlalchemy-basics.ipynb  Create Table: Declare Mapping SQLAlchemy ORM - Declaring Mapping\n在使用ORM時，我們要先描述資料庫表格，然後定義我們要映射(mapping)到這些表格的類別(classes)\nCreate base class  我們使用declarative_base()來建立一個基礎類別  Base = declarative_base()  Defines a class (table) Column and Data Types\nclass User(Base): __tablename__ = 'user' id = Column(Integer, primary_key=True) firstname = Column(String(255)) lastname = Column(String(255)) age = Column(Integer) height = Column(Numeric) weight = Column(Numeric) city = Column(String(255)) def __init__(self, id, firstname, lastname, age, height, weight, city): self.id = id self.firstname = firstname self.lastname = lastname self.age = age self.height = height self.weight = weight self.city = city def __repr__(self): return \u0026quot;\u0026lt;User({}, name: {} {}, age: {}, H: {}, W: {}, city: {})\u0026gt;\u0026quot;.format( self.id, self.firstname, self.lastname, self.age, int(self.height), int(self.weight), self.city)  Create Table Each Table object is a member of a larger collection known as MetaData and this object is available using the .metadata attribute of a declarative base class.  The MetaData.create_all() method is, passing in our Engine as a source of database connectivity.\nFor all tables that haven’t been created yet, it issues CREATE TABLE statements to the database.\nBase.metadata.create_all(engine)  2020-05-08 17:20:20,005 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'sql_mode' 2020-05-08 17:20:20,011 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,051 INFO sqlalchemy.engine.base.Engine SHOW VARIABLES LIKE 'lower_case_table_names' 2020-05-08 17:20:20,052 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,189 INFO sqlalchemy.engine.base.Engine SELECT DATABASE() 2020-05-08 17:20:20,190 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,281 INFO sqlalchemy.engine.base.Engine show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin' 2020-05-08 17:20:20,288 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,354 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1 2020-05-08 17:20:20,357 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,397 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1 2020-05-08 17:20:20,398 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,437 INFO sqlalchemy.engine.base.Engine SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1 2020-05-08 17:20:20,438 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,578 INFO sqlalchemy.engine.base.Engine DESCRIBE `user` 2020-05-08 17:20:20,578 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,616 INFO sqlalchemy.engine.base.Engine ROLLBACK 2020-05-08 17:20:20,661 INFO sqlalchemy.engine.base.Engine CREATE TABLE user ( id INTEGER NOT NULL AUTO_INCREMENT, firstname VARCHAR(255), lastname VARCHAR(255), age INTEGER, height NUMERIC, weight NUMERIC, city VARCHAR(255), PRIMARY KEY (id) ) 2020-05-08 17:20:20,662 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:20,724 INFO sqlalchemy.engine.base.Engine COMMIT  !ls -al  total 80 drwxr-xr-x 5 kakalin staff 160 May 8 17:19 \u001b[1m\u001b[36m.\u001b[m\u001b[m drwxr-xr-x 11 kakalin staff 352 May 6 15:51 \u001b[1m\u001b[36m..\u001b[m\u001b[m drwxr-xr-x 3 kakalin staff 96 May 8 13:56 \u001b[1m\u001b[36m.ipynb_checkpoints\u001b[m\u001b[m -rw-r--r-- 1 kakalin staff 264 May 8 14:10 README.md -rw-r--r-- 1 kakalin staff 33194 May 8 17:19 sqlalchemy-basics.ipynb  SQLAlchemy ORM - Creating Session In order to interact with the database, we need to obtain its handle. A session object is a handle to the database.    Session class is defined using sessionmaker():\na configurable session factory method which is bound to the engine object created earlier.\n  Session = sessionmaker(bind=engine) session = Session()  CRUD for Data SQLAlchemy ORM - Adding Objects: SQL INSERT INTO We have declared a Customer class that has been mapped to the customer\u0026rsquo;s table.\nWe have to declare an object of this class and persistently add it to the table by add() method of the session object.\nuser_1 = User(1, 'kaka', 'Lin', 28, 175, 70, 'Taipei') user_2 = User(2, 'kiwi', 'Li', 30, 173, 70, 'Taipei') session.add_all([ user_1, user_2 ])  Note that this transaction is pending until the same is flushed using commit() method.\nsession.commit()  2020-05-08 17:20:20,988 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-05-08 17:20:20,995 INFO sqlalchemy.engine.base.Engine INSERT INTO user (id, firstname, lastname, age, height, weight, city) VALUES (%s, %s, %s, %s, %s, %s, %s) 2020-05-08 17:20:21,005 INFO sqlalchemy.engine.base.Engine ((1, 'kaka', 'Lin', 28, 175, 70, 'Taipei'), (2, 'kiwi', 'Li', 30, 173, 70, 'Taipei')) 2020-05-08 17:20:21,098 INFO sqlalchemy.engine.base.Engine COMMIT  SQLAlchemy ORM - Using Query: SQL SELECT All SELECT statements generated by SQLAlchemy ORM are constructed by Query object.\n\u0026quot;\u0026quot;\u0026quot;Equivalent SELECT * FROM user \u0026quot;\u0026quot;\u0026quot; resutl = session.query(User).all() resutl  2020-05-08 17:20:21,217 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-05-08 17:20:21,220 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user 2020-05-08 17:20:21,223 INFO sqlalchemy.engine.base.Engine () [\u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 70, city: Taipei)\u0026gt;, \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt;]  SQLAlchemy ORM - Updating Objects: SQL UPDATE x = session.query(User).get(1) x  \u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 70, city: Taipei)\u0026gt;  x.weight = 68 session.commit()  2020-05-08 17:20:21,319 INFO sqlalchemy.engine.base.Engine UPDATE user SET weight=%s WHERE user.id = %s 2020-05-08 17:20:21,323 INFO sqlalchemy.engine.base.Engine (68, 1) 2020-05-08 17:20:21,386 INFO sqlalchemy.engine.base.Engine COMMIT  session.query(User).all()  2020-05-08 17:20:21,487 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-05-08 17:20:21,495 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user 2020-05-08 17:20:21,497 INFO sqlalchemy.engine.base.Engine () [\u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt;, \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt;]  SQLAlchemy ORM - Deleting Related Objects: SQL DELETE user_3 = User(3, 'albert', 'Lin', 28, 180, 70, 'Taipei') session.add(user_3) session.commit()  2020-05-08 17:20:21,561 INFO sqlalchemy.engine.base.Engine INSERT INTO user (id, firstname, lastname, age, height, weight, city) VALUES (%s, %s, %s, %s, %s, %s, %s) 2020-05-08 17:20:21,568 INFO sqlalchemy.engine.base.Engine (3, 'albert', 'Lin', 28, 180, 70, 'Taipei') 2020-05-08 17:20:21,624 INFO sqlalchemy.engine.base.Engine COMMIT  session.query(User).all()  2020-05-08 17:20:21,740 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-05-08 17:20:21,743 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user 2020-05-08 17:20:21,748 INFO sqlalchemy.engine.base.Engine () [\u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt;, \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt;, \u0026lt;User(3, name: albert Lin, age: 28, H: 180, W: 70, city: Taipei)\u0026gt;]  x = session.query(User).get(3) session.delete(x) session.commit()  2020-05-08 17:20:21,819 INFO sqlalchemy.engine.base.Engine DELETE FROM user WHERE user.id = %s 2020-05-08 17:20:21,822 INFO sqlalchemy.engine.base.Engine (3,) 2020-05-08 17:20:21,866 INFO sqlalchemy.engine.base.Engine COMMIT  session.query(User).all()  2020-05-08 17:20:21,962 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-05-08 17:20:21,966 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user 2020-05-08 17:20:21,970 INFO sqlalchemy.engine.base.Engine () [\u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt;, \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt;]  SQLAlchemy ORM - Applying Filter: SQL WHERE user_4 = User(4, 'Albert', 'Lin', 28, 160, 70, 'Taipei') user_5 = User(5, 'Andy', 'Wei', 24, 175, 72, 'Teipei') user_6 = User(6, 'kevin','Wang', 30, 174, 63, 'San Francisco') user_7 = User(7, 'kevin', 'Wei', 27, 178, 65, 'Taipei') user_8 = User(8, 'David','Kang', 26, 175, 65, 'Washington') user_9 = User(9, 'Matt','Wang', 26, 172, 72, 'Taipei') user_10 = User(10, 'kaka-ideal', 'Lin', 28, 178, 70, 'Janpan') session.add_all([ user_4, user_5, user_6, user_7, user_8, user_9, user_10, ]) session.commit()  2020-05-08 17:20:22,049 INFO sqlalchemy.engine.base.Engine INSERT INTO user (id, firstname, lastname, age, height, weight, city) VALUES (%s, %s, %s, %s, %s, %s, %s) 2020-05-08 17:20:22,050 INFO sqlalchemy.engine.base.Engine ((4, 'Albert', 'Lin', 28, 160, 70, 'Taipei'), (5, 'Andy', 'Wei', 24, 175, 72, 'Teipei'), (6, 'kevin', 'Wang', 30, 174, 63, 'San Francisco'), (7, 'kevin', 'Wei', 27, 178, 65, 'Taipei'), (8, 'David', 'Kang', 26, 175, 65, 'Washington'), (9, 'Matt', 'Wang', 26, 172, 72, 'Taipei'), (10, 'kaka-ideal', 'Lin', 28, 178, 70, 'Janpan')) 2020-05-08 17:20:22,095 INFO sqlalchemy.engine.base.Engine COMMIT  session.query(User).all()  2020-05-08 17:20:22,182 INFO sqlalchemy.engine.base.Engine BEGIN (implicit) 2020-05-08 17:20:22,187 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user 2020-05-08 17:20:22,188 INFO sqlalchemy.engine.base.Engine () [\u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt;, \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt;, \u0026lt;User(4, name: Albert Lin, age: 28, H: 160, W: 70, city: Taipei)\u0026gt;, \u0026lt;User(5, name: Andy Wei, age: 24, H: 175, W: 72, city: Teipei)\u0026gt;, \u0026lt;User(6, name: kevin Wang, age: 30, H: 174, W: 63, city: San Francisco)\u0026gt;, \u0026lt;User(7, name: kevin Wei, age: 27, H: 178, W: 65, city: Taipei)\u0026gt;, \u0026lt;User(8, name: David Kang, age: 26, H: 175, W: 65, city: Washington)\u0026gt;, \u0026lt;User(9, name: Matt Wang, age: 26, H: 172, W: 72, city: Taipei)\u0026gt;, \u0026lt;User(10, name: kaka-ideal Lin, age: 28, H: 178, W: 70, city: Janpan)\u0026gt;]  results = session.query(User).filter(User.age == 28) for row in results: print(row)  2020-05-08 17:20:22,299 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user WHERE user.age = %s 2020-05-08 17:20:22,316 INFO sqlalchemy.engine.base.Engine (28,) \u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt; \u0026lt;User(4, name: Albert Lin, age: 28, H: 160, W: 70, city: Taipei)\u0026gt; \u0026lt;User(10, name: kaka-ideal Lin, age: 28, H: 178, W: 70, city: Janpan)\u0026gt;  SQLAlchemy ORM - Filter Operators SQLAlchemy ORM - Filter Operators\nAND results = session.query(User).filter(User.age == 28, User.height \u0026gt; 170) for row in results: print(row)  2020-05-08 17:20:22,411 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user WHERE user.age = %s AND user.height \u0026gt; %s 2020-05-08 17:20:22,414 INFO sqlalchemy.engine.base.Engine (28, 170) \u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt; \u0026lt;User(10, name: kaka-ideal Lin, age: 28, H: 178, W: 70, city: Janpan)\u0026gt;  OR from sqlalchemy import or_ results = session.query(User).filter(or_(User.age == 28, User.height \u0026gt; 170)) for row in results: print(row)  2020-05-08 17:20:22,485 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user WHERE user.age = %s OR user.height \u0026gt; %s 2020-05-08 17:20:22,497 INFO sqlalchemy.engine.base.Engine (28, 170) \u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt; \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt; \u0026lt;User(4, name: Albert Lin, age: 28, H: 160, W: 70, city: Taipei)\u0026gt; \u0026lt;User(5, name: Andy Wei, age: 24, H: 175, W: 72, city: Teipei)\u0026gt; \u0026lt;User(6, name: kevin Wang, age: 30, H: 174, W: 63, city: San Francisco)\u0026gt; \u0026lt;User(7, name: kevin Wei, age: 27, H: 178, W: 65, city: Taipei)\u0026gt; \u0026lt;User(8, name: David Kang, age: 26, H: 175, W: 65, city: Washington)\u0026gt; \u0026lt;User(9, name: Matt Wang, age: 26, H: 172, W: 72, city: Taipei)\u0026gt; \u0026lt;User(10, name: kaka-ideal Lin, age: 28, H: 178, W: 70, city: Janpan)\u0026gt;  IN results = session.query(User).filter(User.age.in_([28, 26])) for row in results: print(row)  2020-05-08 17:20:22,578 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user WHERE user.age IN (%s, %s) 2020-05-08 17:20:22,579 INFO sqlalchemy.engine.base.Engine (28, 26) \u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt; \u0026lt;User(4, name: Albert Lin, age: 28, H: 160, W: 70, city: Taipei)\u0026gt; \u0026lt;User(8, name: David Kang, age: 26, H: 175, W: 65, city: Washington)\u0026gt; \u0026lt;User(9, name: Matt Wang, age: 26, H: 172, W: 72, city: Taipei)\u0026gt; \u0026lt;User(10, name: kaka-ideal Lin, age: 28, H: 178, W: 70, city: Janpan)\u0026gt;  LIKE results = session.query(User).filter(User.city.like('%pei')) for row in results: print(row)  2020-05-08 17:20:22,641 INFO sqlalchemy.engine.base.Engine SELECT user.id AS user_id, user.firstname AS user_firstname, user.lastname AS user_lastname, user.age AS user_age, user.height AS user_height, user.weight AS user_weight, user.city AS user_city FROM user WHERE user.city LIKE %s 2020-05-08 17:20:22,644 INFO sqlalchemy.engine.base.Engine ('%pei',) \u0026lt;User(1, name: kaka Lin, age: 28, H: 175, W: 68, city: Taipei)\u0026gt; \u0026lt;User(2, name: kiwi Li, age: 30, H: 173, W: 70, city: Taipei)\u0026gt; \u0026lt;User(4, name: Albert Lin, age: 28, H: 160, W: 70, city: Taipei)\u0026gt; \u0026lt;User(5, name: Andy Wei, age: 24, H: 175, W: 72, city: Teipei)\u0026gt; \u0026lt;User(7, name: kevin Wei, age: 27, H: 178, W: 65, city: Taipei)\u0026gt; \u0026lt;User(9, name: Matt Wang, age: 26, H: 172, W: 72, city: Taipei)\u0026gt;  SQLAlchemy ORM - Clossing Session Closes current session by clearing all items and ending any transaction in progress\nsession.close()  2020-05-08 17:20:22,729 INFO sqlalchemy.engine.base.Engine ROLLBACK  Drop Table User.__table__.drop(engine)  2020-05-08 17:20:22,794 INFO sqlalchemy.engine.base.Engine DROP TABLE user 2020-05-08 17:20:22,795 INFO sqlalchemy.engine.base.Engine () 2020-05-08 17:20:22,853 INFO sqlalchemy.engine.base.Engine COMMIT  Drop Database If we want to drop DB in SQLite, just delete the file.\n!rm -rf test.db !ls -al  total 80 drwxr-xr-x 5 kakalin staff 160 May 8 17:19 \u001b[1m\u001b[36m.\u001b[m\u001b[m drwxr-xr-x 11 kakalin staff 352 May 6 15:51 \u001b[1m\u001b[36m..\u001b[m\u001b[m drwxr-xr-x 3 kakalin staff 96 May 8 13:56 \u001b[1m\u001b[36m.ipynb_checkpoints\u001b[m\u001b[m -rw-r--r-- 1 kakalin staff 264 May 8 14:10 README.md -rw-r--r-- 1 kakalin staff 33194 May 8 17:19 sqlalchemy-basics.ipynb  ","id":12,"section":"posts","summary":"SQLAlchemy - basics SQLAlchemy - Tutorial import sqlalchemy from sqlalchemy import create_engine, Table from sqlalchemy.ext.declarative import declarative_base from sqlalchemy import Column, ForeignKey, Integer, String, Numeric from sqlalchemy.orm import sessionmaker sqlalchemy.__version__ Connect Database # SQLite #connect_db = 'sqlite:///test.db' # MySQL connect_db = 'mysql+mysqldb://root:\u0026lt;passwd\u0026gt;@35.201.196.222/kaka_test' ''' create_engine 此時只有建立SQLAlchemy Engine instance(","tags":["Database","SQLAlchemy"],"title":"[DB] Sqlalchemy Basics","uri":"https://kaka-lin.github.io/2020/06/sqlalchemy-basics/","year":"2020"},{"content":"SQLite - Basics  SQL - Tutorial SQL As Understood By SQLite(官網) SQLite - Tutorial  Load ipython-sql ipython-sql:\n 是jupyter notebook的extension，用來擴充jupyter對SQL的支援 其底層是使用SQLAlchemy  %load_ext sql  Create Database The concept of creating or dropping a database is not meant for an embedded database engine like SQLite.\nIf you want to create DB in SQLite, just from the command line: sqlite3 databasefilename.\nFor example: sqlite3 test.db\nCreate DB in Jupyter Because ipython-sql is based on SQLAlchemy, we can create and connect DB as follow:\n%sql sqlite:///test.db  !ls -al  total 32 drwxr-xr-x 3 kaka kaka 4096 5月 14 10:16 . drwxr-xr-x 7 kaka kaka 4096 5月 14 09:49 .. drwxr-xr-x 2 kaka kaka 4096 5月 14 09:52 .ipynb_checkpoints -rw-r--r-- 1 kaka kaka 422 5月 14 09:25 README.md -rw-r--r-- 1 kaka kaka 15267 5月 14 10:16 sqlite-basics.ipynb -rw-r--r-- 1 kaka kaka 0 5月 14 10:16 test.db  SQLite Version %sql SELECT sqlite_version() AS 'SQLite Version';  * sqlite:///test.db Done.  | SQLite Version | | 3.31.1 |  Create Table  SQLite - Data Type SQLite - AUTOINCREMENT  %%sql CREATE TABLE persons( person_id INTEGER PRIMARY KEY AUTOINCREMENT, firstname VARCHAR(255), lastname VARCHAR(255), age INTEGER, height REAL, weight REAL, city VARCHAR(255) );   * sqlite:///test.db Done. []  CRUD for Data  C: Create R: Read U: Update D: Delete  Create Data: SQL INSERT INTO %%sql INSERT INTO persons VALUES (10, 'kaka','Lin', 28, 175, 70, 'Taipei'); INSERT INTO persons (firstname, lastname, age, height, weight, city) VALUES ('kiwi','Li', 30, 173, 70, 'Taipei');   * sqlite:///test.db 1 rows affected. 1 rows affected. []  Read Data: SQL SELECT %%sql SELECT * FROM persons;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 70.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    Update Data: SQL UPDATE %%sql UPDATE persons SET weight = 68 WHERE firstname = 'kaka'; -- or WHERE person_id = 1;   * sqlite:///test.db 1 rows affected. 0 rows affected. []  %%sql SELECT * FROM persons;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    Delete Data: SQL DELETE Before we delete data, we first add the data that we want to delete.\n%%sql INSERT INTO persons VALUES (3, 'albert','Lin', 28, 180, 70, 'Taipei');   * sqlite:///test.db 1 rows affected. []  %%sql SELECT * FROM persons;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     3 albert Lin 28 180.0 70.0 Taipei   10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    %%sql DELETE FROM persons WHERE person_id = 3;   * sqlite:///test.db 1 rows affected. []  %%sql SELECT * FROM persons;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei    SQL WHERE %%sql INSERT INTO persons (firstname, lastname, age, height, weight, city) VALUES ('Albert', 'Lin', 28, 160, 70, 'Taipei'), ('Andy', 'Wei', 24, 175, 72, 'Teipei'), ('kevin', 'Wang', 30, 174, 63, 'San Francisco'), ('kevin', 'Wei', 27, 178, 65, 'Taipei'), ('David', 'Kang', 26, 175, 65, 'Washington'), ('Matt', 'Wang', 26, 172, 72, 'Taipei'), ('kaka-ideal', 'Lin', 28, 178, 70, 'Janpan');   * sqlite:///test.db 7 rows affected. []  %%sql SELECT * FROM persons   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco   15 kevin Wei 27 178.0 65.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    %%sql SELECT * FROM persons WHERE age = 28;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   18 kaka-ideal Lin 28 173.0 70.0 Janpan    SQL AND, OR and NOT AND %%sql SELECT * FROM persons WHERE age = 28 AND height \u0026gt; 170;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    OR %%sql SELECT * FROM persons WHERE age = 28 OR height \u0026gt; 170;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco   15 kevin Wei 27 178.0 65.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    SQL IN Operator The IN operator allows you to specify multiple values in a WHERE clause.\n%%sql SELECT * FROM persons WHERE age = 28 OR age = 26;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    %%sql SELECT * FROM persons WHERE age IN (26, 28);   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan    NOT %%sql SELECT * FROM persons /* WHERE NOT age = 28; */ WHERE age != 28;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     11 kiwi Li 30 173.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco   15 kevin Wei 27 178.0 65.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei    SQL ORDER BY SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC;   Default: ASC  %%sql SELECT * FROM persons ORDER BY age;   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     13 Andy Wei 24 175.0 72.0 Taipei   16 David Kang 26 175.0 65.0 Washington   17 Matt Wang 26 172.0 72.0 Taipei   15 kevin Wei 27 178.0 65.0 Taipei   10 kaka Lin 28 175.0 68.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   18 kaka-ideal Lin 28 178.0 70.0 Janpan   11 kiwi Li 30 173.0 70.0 Taipei   14 kevin Wang 30 174.0 63.0 San Francisco    SQL LIKE Operator The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nThere are two wildcards often used in conjunction with the LIKE operator:\n % : The percent sign represents zero, one, or multiple characters _ : The underscore represents a single character  %%sql SELECT * FROM persons WHERE city LIKE '%pei%';   * sqlite:///test.db Done.     person_id firstname lastname age height weight city     10 kaka Lin 28 175.0 68.0 Taipei   11 kiwi Li 30 173.0 70.0 Taipei   12 Albert Lin 28 160.0 70.0 Taipei   13 Andy Wei 24 175.0 72.0 Taipei   15 kevin Wei 27 178.0 65.0 Taipei   17 Matt Wang 26 172.0 72.0 Taipei    SQLite - Functions  SQLite Core Function  Modify Table: SQL ALTER TABLE   Add a new column in an existing table\nALTER TABLE table_name ADD column_name datatype;    %%sql ALTER TABLE persons ADD height_meters REAL; UPDATE persons SET height_meters = round(height / 100, 2); SELECT * FROM persons;   * sqlite:///test.db Done. 9 rows affected. Done.     person_id firstname lastname age height weight city height_meters     10 kaka Lin 28 175.0 68.0 Taipei 1.75   11 kiwi Li 30 173.0 70.0 Taipei 1.73   12 Albert Lin 28 160.0 70.0 Taipei 1.6   13 Andy Wei 24 175.0 72.0 Taipei 1.75   14 kevin Wang 30 174.0 63.0 San Francisco 1.74   15 kevin Wei 27 178.0 65.0 Taipei 1.78   16 David Kang 26 175.0 65.0 Washington 1.75   17 Matt Wang 26 172.0 72.0 Taipei 1.72   18 kaka-ideal Lin 28 178.0 70.0 Janpan 1.78    Drop Table %%sql DROP TABLE persons;   * sqlite:///test.db Done. []  Drop Database If we want to drop DB in SQLite, just delete the file.\n!rm -rf test.db !ls -al  total 32 drwxr-xr-x 3 kaka kaka 4096 5月 14 10:16 . drwxr-xr-x 7 kaka kaka 4096 5月 14 09:49 .. drwxr-xr-x 2 kaka kaka 4096 5月 14 09:52 .ipynb_checkpoints -rw-r--r-- 1 kaka kaka 422 5月 14 09:25 README.md -rw-r--r-- 1 kaka kaka 15267 5月 14 10:16 sqlite-basics.ipynb  ","id":13,"section":"posts","summary":"SQLite - Basics SQL - Tutorial SQL As Understood By SQLite(官網) SQLite - Tutorial Load ipython-sql ipython-sql: 是jupyter notebook的extension，用來擴充jupyter對SQL的支","tags":["Database","SQLite"],"title":"[DB] Sqlite Basics","uri":"https://kaka-lin.github.io/2020/06/sqlite-basics/","year":"2020"},{"content":"GitLab CI/CD  GitLab CI/CD  How GitLab CI/CD works Getting started with GitLab CI/CD  1. Build a Project 2. Configuring GitLab Runners  2-1. Use Shared Runners 2-2. Set up a Specific Runners  Exmaple with Docker   2-3. Introduction to Shared, Specific and Group Runners [Optional]   3. Creating a .gitlab-ci.yml file 4. Results      GitLab CI/CD is a powerful tool built into GitLab that allows you to apply all the continuous methods to your software with no third-party application or integration needed.\n Continuous Integration (CI): 持續整合 Continuous Delivery (CD): 持續交付 Continuous Deployment (CD): 持續發佈  How GitLab CI/CD works GitLab offers a continuous integration service. For each commit or push to trigger your CI pipeline, you must:\n Add a .gitlab-ci.yml file to your repository\u0026rsquo;s root directory. Ensure your project is configured to use a Runner.  The .gitlab-ci.yml file tells the GitLab Runner what to do. For example:\n build stage test stage deploy stage  Getting started with GitLab CI/CD Requirement:\n A working GitLab instance of version 8.0+ or are using GitLab.com  1. Build a Project Create a project in GitLab. See the Example.\n2. Configuring GitLab Runners In GitLab CI/CD, Runners run the jobs that you defined in .gitlab-ci.yml.\nA Runner can be a virtual machine, a VPS, a bare-metal machine, a docker container or even a cluster of containera.\nGitLab and the Runners communicate through an API, so the only requirement is that the Runner's machine has network access to the GitLab server.  There are three types of Runners::\n Shared Runners Specific Runners Group Runners  如果只是用來做一般測試，且沒有多餘的機器來當Runner，可以使用GitLab所提供的Shared Runner就好。 但當工作流程需要一些特別的驗證，或是可能需要運行某些套件或library或模組時，建議使用Specific Runners. 如果使用Shared Runner，每次在測試前都需要花時間配置所需的套件。  2-1. Use Shared Runners If you use GitLab.com you can use the Shared Runners provided by GitLab Inc.\n These are special virtual machines that run on GitLab\u0026rsquo;s infrastructure and can be build any project.  To enable the Shared Runners you have to go to your projects; Setting -\u0026gt; CI/CD and click Enable shared Runners, as below:\nShared Runners are enable by default as of GitLab 8.2, but can be disabled with the Disable shared Runners button which is present under each project's Setting -\u0026gt; CI/CD page.  Read more on Shared Runners\n2-2. Set up a Specific Runners If you want to set a specific Runners, you need to follow two steps:\n  Install GitLab Runner\nGitLab Runner can be installed and used on GNU/Linux, macOS, FreeBSD and Windows. There are three ways to install it, as below:\n Repository for rpm/deb packages Binaries for CNU/Linux, maxOS, Windows, FreeBSD Docker or Kubernetes  Ideally, the GitLab Runner should not be installed on the same machine as GitLab.    Configure it.\n  Exmaple with Docker   Install GitLab Runner Docker image.\n# docker pull $ docker pull gitlab/gitlab-runner:latest # docker run on macOS $ docker run -d --name gitlab-runner --restart always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /Users/Shared/gitlab-runner/config:/etc/gitlab-runner \\ gitlab/gitlab-runner:latest    Registering Runners\nRegistering a Runner is the process that binds the Runner with a GitLab instance.\n$ docker run --rm -t -i -v /Users/Shared/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register    You need to your repo\u0026rsquo;s URL and token, like:\n  If registering runner succeeded, you will see the status like:\n  Note 1:\nYou need to tick the Run untagged jobs checkbox for fix the issue of \u0026quot;Job is stuck in the pending state even a runner has been enabled for the project\u0026quot;.\n  Note 2:\nDisable shared Runners\n     2-3. Introduction to Shared, Specific and Group Runners [Optional] A Runner can be specific to a certain project or server any project in GitLab CI/CD.\n  Shared Runners:\nShared Runners are useful for jobs that have similar requirements, between multiple projects.\n  Rather than having multiple Runners idling for many projects, you can have a single or a small number of Runners that handle multiple projects. This makes it easier to maintain and update them.\n  Shared Runners process jobs using a fair usage queue. In contrast to specific Runners that use a FIFO queue, this prevents cases where projects create hundreds of jobs which can lead to eating all available shared Runners resources.\n  A Runner that serves all projects is called a Shared Runner.      Specific Runners:\nSpecific Runners are useful for jobs that have special requirements or for projects with a specific demand.\n  If a job has certain requirements, you can set up the specific Runner with this in mind, while not having to do this for all Runners.\nFor example, if you want to deploy a certain project, you can set up a specific Runner to have the right credentials for this.   The usage of tags may be useful in this case.    Specific Runners process jobs using a FIFO queue.\n      Group Runners:\nGroup Runners are useful when you have multiple projects under one group and would like all projects to have access to a set of Runners.\n Group Runners process jobs using a FIFO queue.    3. Creating a .gitlab-ci.yml file Creating a file named .gitlab-ci.yml in the root directory of your repository, like:\nbefore_script: - apt-get install python run-test: script: - python --version  4. Results   Pipelines\n  Pipelines -\u0026gt; Jobs\n  Log of that job\n    Shared Runners\n     Specific Runners\n      ","id":14,"section":"posts","summary":"GitLab CI/CD GitLab CI/CD How GitLab CI/CD works Getting started with GitLab CI/CD 1. Build a Project 2. Configuring GitLab Runners 2-1. Use Shared Runners 2-2. Set up a Specific Runners Exmaple with Docker 2-3. Introduction to Shared, Specific and Group Runners [Optional] 3. Creating a .gitlab-ci.yml file 4. Results GitLab CI/CD is a powerful tool built into GitLab that allows you to apply all the continuous methods to your","tags":["DevOps","CI/CD Tools"],"title":"[DevOps] Gitlab CI/CD","uri":"https://kaka-lin.github.io/2020/06/gitlab_ci_cd/","year":"2020"},{"content":"Get and Analysis the result of Google Trends with Python Google Trends (Google搜尋趨勢) 是由Google 提供的線上搜尋趨勢服務，可以簡單的看出最近哪些關鍵字是熱門的。 但大規模分析 Google Trends 是很麻煩不切實際的，且有時候連打開網頁都懶， 那麼我們如何才能有夠有效的使用Google Trends呢？\n  pytrends:\nUnofficial API for Google Trends\nAllows simple interface for automating downloading of reports from Google Trends. Only good until Google changes their backend again :-P. When that happens feel free to contribute!  這是一個非官方支援的API，允許從Google Trends下載資料（爬蟲）\n  Install pytrends package !pip3 install pytrends  Connect to Google   Pandas:\nPython Data Analysis Library\n  import pandas as pd from pytrends.request import TrendReq pytrend = TrendReq()  Build Payload 設定我們想要搜尋的關鍵字、類別、時間區段、地區以及類型\n\u0026quot;\u0026quot;\u0026quot;Create the payload for related queries, interest over time anf interest by region\u0026quot;\u0026quot;\u0026quot; TrendReq.build_payload(self, kw_list, cat=0, timeframe='today 5-y', geo='', gprop='')   Parameters:  kw_list:  keywords to get data for Up to five terms in a list (最多五個)   timeframe: Date to start from cat: Category to narrow resulta geo: Two letter country abbreviation gprop: What Google property to filter to    kw_list=['tea', 'coffe', 'coke', 'milk', 'water'] # timeframe=today 12-m': one year data # geo='US': specifying location with U.S. pytrend.build_payload(kw_list, timeframe='today 12-m', geo='TW') # gprop=yputube: only want to see Youtube search trends #pytrend.build_payload(kw_list, timeframe='today 12-m', geo='TW', gprop=youtube) # cat=71: category #pytrend.build_payload(kw_list, timeframe='today 12-m', geo='TW', gprop=youtube, cat=71)  Request data (Get results)  Interest Over Time Historical Hourly Interest Interest by REgion Related Topics Related Queries Trending Searches Top Charts Suggestions  Interest Over Time \u0026quot;\u0026quot;\u0026quot;Request data from Google's Interest Over Time section and return a dataframe\u0026quot;\u0026quot;\u0026quot; TrendReq.interest_over_time(self)   Returns: pandas.Dataframe  interest_over_time_df = pytrend.interest_over_time() interest_over_time_df.head()  Plot the result  Matplotlib seaborn  Matplotlib 顯示中文請參考：\n Windows Mac Ubuntu  #!pip3 install matplotlib seaborn  import matplotlib import matplotlib.pyplot as plt import seaborn as sns sns.set(color_codes=True) plt.style.use('fivethirtyeight') # 中文 plt.rcParams['font.sans-serif'] = ['Noto Sans Mono CJK TC', 'sans-serif'] plt.rcParams['axes.unicode_minus'] = False %matplotlib inline  Make plots of DataFrame using Matplotlib   plot lines:\nDataFrame.plot.line(self, x=None, y=None, **kwargs)    axes = interest_over_time_df.plot.line( figsize=(15,7), title='Interest Over Time') axes.set_xlabel('Date') axes.set_ylabel('Trends Index') axes.tick_params(axis='both', which='major', labelsize=13)  Google Keyword Suggestions Return a list of additional suggested keywords that can be used to refine a trend search.\n\u0026quot;\u0026quot;\u0026quot;Request data from Google's Keyword Suggestions dropdown and return a dictionary\u0026quot;\u0026quot;\u0026quot; TrendReq.suggestions(self, keyword)   Parameters:  keyword:  keyword to get suggestions for      keywords = pytrend.suggestions(keyword='beer') keywords_df = pd.DataFrame(keywords) keywords_df.drop(columns='mid') # This column makes no sense  Related Queries 當使用者搜尋某個主題時，他們也會搜尋相關的內容\nReturn data for the related keywords to a provided keyword shown on Google Trends\u0026rsquo; Related Queries section.\n\u0026quot;\u0026quot;\u0026quot;Request data from Google's Related Queries section and reutrn a dictionary of dataframe If not top and/or rising related queries are found, the value for the key \u0026quot;top\u0026quot; and/or \u0026quot;rising\u0026quot; will be None \u0026quot;\u0026quot;\u0026quot; TrendReq.related_queries(self)   Returns: dictionary of pandas.DataFrames  pytrend.build_payload(kw_list=['Coronavirus'])  # Related Queries, return a dictionary of dataframe related_queries = pytrend.related_queries() related_queries  {'Coronavirus': {'top': query value 0 taiwan coronavirus 100 1 taiwan 94 2 coronavirus update 64 3 coronavirus cases 52 4 coronavirus 中文 37 5 thank you coronavirus helpers 33 6 coronavirus news 31 7 corona 28 8 coronavirus us 27 9 coronavirus map 26 10 武漢 肺炎 26 11 china coronavirus 24 12 coronavirus tips 21 13 world coronavirus 20 14 coronavirus live 17 15 coronavirus usa 17 16 疫情 15 17 new coronavirus 15 18 coronavirus in taiwan 14 19 wuhan coronavirus 14 20 coronavirus worldometer 13 21 taiwan coronavirus cases 13 22 italy coronavirus 13 23 coronavirus symptoms 13 24 corona virus 13, 'rising': query value 0 taiwan coronavirus 806850 1 taiwan 760150 2 coronavirus update 520350 3 coronavirus cases 421850 4 thank you coronavirus helpers 264250 5 coronavirus us 217300 6 coronavirus map 210350 7 武漢 肺炎 207400 8 china coronavirus 190500 9 coronavirus tips 167400 10 world coronavirus 161150 11 coronavirus usa 135500 12 疫情 121000 13 coronavirus in taiwan 113550 14 wuhan coronavirus 111450 15 coronavirus worldometer 107600 16 taiwan coronavirus cases 105500 17 italy coronavirus 104450 18 coronavirus italy 100450 19 taiwan news coronavirus 96200 20 who coronavirus 95600 21 covid 94100 22 taiwan news 91750 23 who 87750 24 coronavirus uk 87600}}  COVID_19 = related_queries['Coronavirus']['top'] COVID_19  axes = COVID_19.plot.barh(x='query', y='value', figsize=(10,15))  The Search Trends of COVID-19 in 2020 pytrend.build_payload(kw_list=['Coronavirus'], timeframe='2020-01-01 2020-06-04') covid_19_interest_over_time_df = pytrend.interest_over_time() covid_19_interest_over_time_df.head()  axes = covid_19_interest_over_time_df.plot.line( figsize=(20,5), title='The Search Trends of COVID-19 in 2020') axes.set_yticks([0, 25, 50, 75, 100]) axes.set_xlabel('Date') axes.set_ylabel('Trends Index') axes.tick_params(axis='both', which='major', labelsize=13)  ","id":15,"section":"posts","summary":"Get and Analysis the result of Google Trends with Python Google Trends (Google搜尋趨勢) 是由Google 提供的線上搜尋趨勢服務，可以簡單的看出最近哪些關鍵字是熱門的。 但大規模分析 Google","tags":["Data Science","Google Trends","Python"],"title":"[DS] Google Trends 01: Operate with Python","uri":"https://kaka-lin.github.io/2020/06/01_google_trends_and_python/","year":"2020"},{"content":"Google Trends to Google Data Studio  Get the result form Google Trends Using gspread transform the data of Google Trends to Google Sheets Import the file of Google Sheets into Google Data Studio  Get the result from Goolge Trends import pandas as pd from pytrends.request import TrendReq # Create an instance(實例) of TrendReq pytrend = TrendReq() # Build a payload pytrend.build_payload(kw_list=['Coronavirus'], timeframe='2020-01-01 2020-06-04') # Requset data: Interest Over Time covid_19_interest_over_time_df = pytrend.interest_over_time() covid_19_interest_over_time_df.tail()  Plot the result import matplotlib import matplotlib.pyplot as plt import seaborn as sns sns.set(color_codes=True) plt.style.use('fivethirtyeight') # 中文 plt.rcParams['font.sans-serif'] = ['Noto Sans Mono CJK TC', 'sans-serif'] plt.rcParams['axes.unicode_minus'] = False %matplotlib inline  axes = covid_19_interest_over_time_df.plot.line( figsize=(20,5), title='The Search Trends of COVID-19 in 2020') axes.set_yticks([0, 25, 50, 75, 100]) axes.set_xlabel('Date') axes.set_ylabel('Trends Index') axes.tick_params(axis='both', which='major', labelsize=13)  Using gspread transform the data of Google Trends to Google Sheets Reference: Access spreadsheets via Google Sheets API.\nInstall the required packages  gspread oauth2client  !pip3 install gspread oauth2client  申請帳號並啟用API 因為我們要存取 Google sheets， 所以我們必須打開原本Google帳號的權限（或是申請一個新的帳號）\n  到 Google Cloud Platform 建立一個Project\n新增專案 -\u0026gt; 專案名稱:google-sheets -\u0026gt; 建立\n  啟動該Project的 API\n啟用API和服務 -\u0026gt; 在搜尋API和服務打上Drive API -\u0026gt; 啟用 -\u0026gt; 在搜尋API和服務打上Sheets API(Google Sheets) -\u0026gt; 啟用\n  建立憑證(Credentials)\n回到首頁點選憑證 -\u0026gt; 建立憑證 -\u0026gt; 選服務帳號 -\u0026gt; 服務帳號詳細資料：Google Trends to Google Sheets -\u0026gt; 建立 -\u0026gt; 繼續 -\u0026gt; 建立金鑰 -\u0026gt; 選擇 JSON -\u0026gt; 建立 -\u0026gt; 完成\n  將下載好的JSON檔案取名為auth.json\n  建立試算表 透過gspread建立並使用試算表有兩種方式\n  在Google Drive或是Google Sheets建立試算表，並將開試算表分享給剛剛下載的JSON裡的client_email裡的帳號: name...@...gserviceaccount.com使用，並給予編輯的權限，這樣才有辦法透過程式存取。\n  透過gspread的create()創建試算表\nsh = gc.create('A new spreadsheet')    Note: If you’re using a service account, this new spreadsheet will be visible only to your script's account. To be able to access newly created spreadsheet from Google Sheets with your own Google account you must share it with your email. See how to share a spreadsheet in the section below.    Sharing a Spreadsheet:\nsh.share('your_email', perm_type='user', role='writer')    以下使用第二種方法！\nConnect to Google Sheets import gspread from google.oauth2.service_account import Credentials  def google_oauth2_service(auth_path, scopes): credentials = Credentials.from_service_account_file( auth_path, scopes=scopes ) return gspread.authorize(credentials)  scopes = [ 'https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive' ] auth_path = 'google_sheets_auth.json' gc = google_oauth2_service(auth_path, scopes)  Connetc and share a spreadsheet # Create a spreadsheet sh = gc.create(\u0026quot;COVID-19 Search Trends\u0026quot;) # Share a spreadsheet sh.share('vn503024@gmail.com', perm_type='user', role='writer')  Select a worksheet Select worksheet by index. Worksheet indexes start from zero:\nworksheet = sh.get_worksheet(0)  Or by title:\nworksheet = sh.worksheet(\u0026quot;January\u0026quot;)  Or the most common case: Sheet1:\nworksheet = sh.sheet1  To get a list of all worksheets:\nworksheet_list = sh.worksheets()  worksheet = gc.open(\u0026quot;COVID-19 Search Trends\u0026quot;).sheet1  Update value of cell: send DataFrame into sheet Prepocess DataFrame  reset_index(): 因為我們需要date這個欄位 conver datatime to string: Object of type 'Timestamp' is not JSON serializable    covid_19_interest_over_time_df  covid_19_interest_over_time_df.index  DatetimeIndex(['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08', '2020-01-09', '2020-01-10', ... '2020-05-24', '2020-05-25', '2020-05-26', '2020-05-27', '2020-05-28', '2020-05-29', '2020-05-30', '2020-05-31', '2020-06-01', '2020-06-02'], dtype='datetime64[ns]', name='date', length=154, freq=None)   Reset index  covid_19_interest_over_time_df.reset_index(inplace=True) covid_19_interest_over_time_df  Convert datatime to string  def convert_datetime_to_string(df): df['date'] = df['date'].dt.strftime('%Y-%m-%d %H:%M:%S')  convert_datetime_to_string(covid_19_interest_over_time_df) covid_19_interest_over_time_df.head()  Send DataFram into Sheet def iter_pd(df): for val in df.columns: yield val for row in df.to_numpy(): for val in row: if pd.isna(val): yield \u0026quot;\u0026quot; else: yield val def pandas_to_sheets(pandas_df, sheet, clear=True): \u0026quot;\u0026quot;\u0026quot;Update all values in a worksheet to match a pandas dataframe\u0026quot;\u0026quot;\u0026quot; if clear: sheet.clear() (row, col) = pandas_df.shape cells = sheet.range(\u0026quot;A1:{}\u0026quot;.format(gspread.utils.rowcol_to_a1(row+1, col))) for cell, val in zip(cells, iter_pd(pandas_df)): cell.value = val sheet.update_cells(cells)  pandas_to_sheets(covid_19_interest_over_time_df, worksheet)  Result  DataFrame  Google Sheets  DataFrame.plot.line()  Google Data Studio: 時間序列圖表  ","id":16,"section":"posts","summary":"Google Trends to Google Data Studio Get the result form Google Trends Using gspread transform the data of Google Trends to Google Sheets Import the file of Google Sheets into Google Data Studio Get the result from Goolge Trends import pandas as pd from pytrends.request import TrendReq # Create an instance(實例) of TrendReq pytrend = TrendReq() # Build a","tags":["Data Science","Google Trends","Python"],"title":"[DS] Google Trends 02: Convert to Google Data Studio","uri":"https://kaka-lin.github.io/2020/06/02_google_trends_to_google_data_studio/","year":"2020"},{"content":"Matplotlib 顯示中文 Ref: Text with non-latin glyphs\n下載思源體 - source-han-sans\n 思源黑體 本教學使用此字型 思源宋體  # 查看安裝了哪些字型 # windows請忽略這段 # unix系統可以使用下command確認是否安裝成功 !fc-list :lang=zh family  # 重新加載字體 from matplotlib.font_manager import _rebuild _rebuild()  import matplotlib import matplotlib.pyplot as plt # 使用剛剛下載的思源體字型 plt.rcParams['font.sans-serif'] = ['Noto Sans Mono CJK TC', 'sans-serif'] plt.rcParams['axes.unicode_minus'] = False %matplotlib inline  Plot the result plt.figure() plt.plot((1, 2, 3),(4, 3, -1)) plt.title(\u0026quot;聲量圖\u0026quot;) plt.ylabel(\u0026quot;文章數量\u0026quot;) plt.xlabel(\u0026quot;品牌名稱\u0026quot;) plt.show()  ","id":17,"section":"posts","summary":"Matplotlib 顯示中文 Ref: Text with non-latin glyphs 下載思源體 - source-han-sans 思源黑體 本教學使用此字型 思源宋體 # 查看安裝了哪些字型 # windows請忽略這段 # unix系統可以使用下co","tags":["Data Science","matplotlib","python"],"title":"[DS] Matplotlib show Chinese: Mac","uri":"https://kaka-lin.github.io/2020/06/matplotlib_chinese_mac/","year":"2020"},{"content":"Matplotlib 顯示中文 Ref: Text with non-latin glyphs\n下載思源體 - source-han-sans\n 思源黑體 本教學使用此字型 思源宋體  # 查看安裝了哪些字型 # windows請忽略這段 # unix系統可以使用下command確認是否安裝成功 !fc-list :lang=zh family  import matplotlib import matplotlib.pyplot as plt # 使用剛剛下載的思源體字型 plt.rcParams['font.sans-serif'] = ['Noto Sans Mono CJK TC', 'sans-serif'] plt.rcParams['axes.unicode_minus'] = False %matplotlib inline  Plot the result plt.figure() plt.plot((1, 2, 3),(4, 3, -1)) plt.title(\u0026quot;聲量圖\u0026quot;) plt.ylabel(\u0026quot;文章數量\u0026quot;) plt.xlabel(\u0026quot;品牌名稱\u0026quot;) plt.show()  ","id":18,"section":"posts","summary":"Matplotlib 顯示中文 Ref: Text with non-latin glyphs 下載思源體 - source-han-sans 思源黑體 本教學使用此字型 思源宋體 # 查看安裝了哪些字型 # windows請忽略這段 # unix系統可以使用下co","tags":["Data Science","matplotlib","python"],"title":"[DS] Matplotlib show Chinese: Ubuntu","uri":"https://kaka-lin.github.io/2020/06/matplotlib_chinese_ubuntu/","year":"2020"},{"content":"Matplotlib 顯示中文 Ref: Text with non-latin glyphs\n下載思源體（下面兩種任選一種皆可）\n 思源黑體 思源宋體  # 查看matplotlib套件安裝位置 import matplotlib print(matplotlib.__file__)  Output:\nC:\\Users\\USER\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\matplotlib\\__init__.py  可以得知，matplotlib的安裝位置在C:\\Users\\USER\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\matplotlib。\n  Note:\n每個人的安裝位置會因電腦配置而有所不同。    安裝步驟  解開剛剛下載的壓縮檔 任選一個.otf檔案，複製到C:\\Users\\USER\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\資料夾內 刪除這個資料夾內的所有檔案：C:\\Users\\USER\\\\.matplotlib\\ 如果使用的是思源黑體，請將底下的fontType =' '變更為fontType ='Noto Sans CJK TC' 如果使用的是思源宋體，請將底下的fontType =' '變更為fontType ='Noto Serif CJK TC'  Configuration import matplotlib.pyplot as plt fontType = '' plt.rcParams['font.sans-serif'] = [fontType] plt.rcParams['axes.unicode_minus'] = False %matplotlib inline  Plot the result plt.figure() plt.plot((1, 2, 3),(4, 3, -1)) plt.title(\u0026quot;聲量圖\u0026quot;) plt.ylabel(\u0026quot;文章數量\u0026quot;) plt.xlabel(\u0026quot;品牌名稱\u0026quot;) plt.show()  ","id":19,"section":"posts","summary":"Matplotlib 顯示中文 Ref: Text with non-latin glyphs 下載思源體（下面兩種任選一種皆可） 思源黑體 思源宋體 # 查看matplotlib套件安裝位置 import matplotlib print(matplotlib.__file__) Output: C:\\Users\\USER\\Miniconda3\\envs\\tensorflow\\lib\\site-packages\\matplotlib\\__init__.py 可以得知，matplo","tags":["Data Science","matplotlib","python"],"title":"[DS] Matplotlib show Chinese: Windows","uri":"https://kaka-lin.github.io/2020/06/matplotlib_chinese_windows/","year":"2020"},{"content":"1. Two Sum Discription Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  Solution 1: One-pass Hash Table  Runtime: 36ms (95.30%) Memory Usage: 14.1 MB (56.68%)  class Solution: def twoSum(self, nums: List[int], target: int) -\u0026gt; List[int]: value_dict = {} for i in range(len(nums)): find_value = target - nums[i] if find_value in value_dict: return [value_dict[find_value], i] value_dict[nums[i]] = i  Time complexity:  O(n)  Space complexity  O(n)  ","id":20,"section":"posts","summary":"1. Two Sum Discription Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample: Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  Solution 1: One-pass Hash Table  Runtime: 36ms (95.","tags":["LeetCode","DSA"],"title":"[LeetCode] 001 Two Sum","uri":"https://kaka-lin.github.io/2020/06/001_two_sum/","year":"2020"},{"content":"002. Add Two Numbers Discription You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample: Input: (2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) Output: 7 -\u0026gt; 0 -\u0026gt; 8 Explanation: 342 + 465 = 807.  Solution: Elementary Math Hint:\nIn loop: we need let `ptr = ptr.ext` carry: 1 Input: 2 -\u0026gt; 4 -\u0026gt; 3 5 -\u0026gt; 6 -\u0026gt; 4 7 -\u0026gt; 0 -\u0026gt; 8 -\u0026gt; 0 (ptr.next) * So, we use dummy head: carry: 1 Input: 2 -\u0026gt; 4 -\u0026gt; 3 5 -\u0026gt; 6 -\u0026gt; 4 0 -\u0026gt; 7 -\u0026gt; 0 -\u0026gt; 8 (ptr.next) | dummy head =\u0026gt; return: dummy_head.next   Runtime: 72 ms (95.40%) Memory Usage: 13.4 MB (11.28%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -\u0026gt; ListNode: result = ListNode(0) ptr = result carry = 0 while l1 or l2: a = l1.val if l1 else 0 b = l2.val if l2 else 0 _sum = a + b + carry carry = _sum // 10 ptr.next = ListNode(_sum % 10) ptr = ptr.next if l1: l1 = l1.next if l2: l2 = l2.next if carry: ptr.next = ListNode(carry) return result.next  Time complexity  O(max(m, n))  Space complexity  O(max(m, n))  ","id":21,"section":"posts","summary":"002. Add Two Numbers Discription You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample: Input: (2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) Output: 7 -\u0026gt; 0 -\u0026gt; 8 Explanation: 342 + 465 = 807.","tags":["LeetCode","DSA"],"title":"[LeetCode] 002 Add Two Numbers","uri":"https://kaka-lin.github.io/2020/06/002_add_two_numbers/","year":"2020"},{"content":"7. Reverse Integer Discription Given a 32-bit signed integer, reverse digits of an integer.\nAssume that your function returns 0 when the reversed integer overflows.\nExample: Input: 123 Output: 321 Input: -123 Output: -321 Input: 120 Output: 21  Solution 1: String  Runtime: 40ms (81.25%) Memory Usage: 13.4 MB (12.43%)  class Solution: def reverse(self, x: int) -\u0026gt; int: if x == 0: return 0 str_x = str(x) ans = '' if x \u0026gt; 0: for i in range(len(str_x)-1, -1, -1): ans += str_x[i] else: str_x = str_x[1:] ans += '-' ans += str_x[::-1] # 32bit: [-214748364, 2147483647] ans = int(ans) return 0 if ans \u0026lt; -2147483648 or ans \u0026gt; 2147483647 else ans  Solution 2: Pop and Push Repeatedlly \u0026ldquo;pop\u0026rdquo; the last digit of x and \u0026ldquo;push\u0026rdquo; it to the back of the rev.\n Runtime: 36ms (91.37%) Memory Usage: 13.3 MB (26.14%)  class Solution: def reverse(self, x: int) -\u0026gt; int: if x == 0: return 0 INT_MAX = 2147483647 INT_MIN = -2147483648 rev = 0 if x \u0026gt; 0: while (x): pop = x % 10 x //= 10 rev = rev * 10 + pop else: x = -1 * x while (x): pop = x % 10 x //= 10 rev = rev * 10 + pop rev = -1 * rev return 0 if rev \u0026lt; INT_MIN or rev \u0026gt; INT_MAX else rev  Time complexity:  O(log(x))  Space complexity  O(1)  ","id":22,"section":"posts","summary":"7. Reverse Integer Discription Given a 32-bit signed integer, reverse digits of an integer.\nAssume that your function returns 0 when the reversed integer overflows.\nExample: Input: 123 Output: 321 Input: -123 Output: -321 Input: 120 Output: 21  Solution 1: String  Runtime: 40ms (81.25%) Memory Usage: 13.4 MB (12.43%)  class Solution: def reverse(self, x: int) -\u0026gt; int: if x == 0: return 0 str_x = str(x) ans = '' if x \u0026gt; 0: for i in range(len(str_x)-1, -1, -1): ans += str_x[i] else: str_x = str_x[1:] ans += '-' ans += str_x[::-1] # 32bit: [-214748364, 2147483647] ans = int(ans) return 0 if ans \u0026lt; -2147483648 or ans \u0026gt; 2147483647 else ans  Solution 2: Pop and Push Repeatedlly \u0026ldquo;pop\u0026rdquo; the last digit of x and \u0026ldquo;push\u0026rdquo; it to the back of the rev.","tags":["LeetCode","DSA"],"title":"[LeetCode] 007 Reverse Integer","uri":"https://kaka-lin.github.io/2020/06/007_reverse_integer/","year":"2020"},{"content":"9. Palindrome Number Discription Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nCoud you solve it without converting the integer to a string?\nExample: Input: 121 Output: true Input: -121 Output: false Explanation: 121- != -121 Input: 10 Output: false  Solution 1: Pop and Push Repeatedlly \u0026ldquo;pop\u0026rdquo; the last digit of x and \u0026ldquo;push\u0026rdquo; it to the back of the rev.\n Runtime: 56ms (99.03%) Memory Usage: 13.2 MB (76.11%)  class Solution: def isPalindrome(self, x: int) -\u0026gt; bool: if x == 0: return True if x \u0026lt; 0 or x % 10 == 0: return False temp = x rev = 0 while (temp): rev = rev * 10 + temp % 10 temp //= 10 return True if x == rev else False  Time complexity:  O(log(x))  Space complexity  O(1)  ","id":23,"section":"posts","summary":"9. Palindrome Number Discription Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nCoud you solve it without converting the integer to a string?\nExample: Input: 121 Output: true Input: -121 Output: false Explanation: 121- != -121 Input: 10 Output: false  Solution 1: Pop and Push Repeatedlly \u0026ldquo;pop\u0026rdquo; the last digit of x and \u0026ldquo;push\u0026rdquo; it to the back of the rev.","tags":["LeetCode","DSA"],"title":"[LeetCode] 009 Palindrome Number","uri":"https://kaka-lin.github.io/2020/06/009_palindrome_number/","year":"2020"},{"content":"13. Roman to Integer Discription Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nI 1 V 5 X 10 L 50 C 100 D 500 M 1000 IV 4 IX 9 XL 40 XC 90 CD 400 CM 900  Example: Input: \u0026quot;III\u0026quot; Output: 3 Input: \u0026quot;MCMXCIV\u0026quot; Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.  Solution: In special case, like \u0026ldquo;IV\u0026rdquo; is 4, \u0026ldquo;IX\u0026rdquo; is 9 or \u0026ldquo;CD\u0026rdquo; = 400, is all roman[i] \u0026lt; roman[i+1].\n Runtime: 24 ms (99.68%) Memory Usage: 11.6 MB (87.66%)  lass Solution(object): def romanToInt(self, s): \u0026quot;\u0026quot;\u0026quot; :type s: str :rtype: int \u0026quot;\u0026quot;\u0026quot; if s == \u0026quot;\u0026quot;: return 0 roman = {'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000} ans = 0 for i in range(len(s) - 1): if roman[s[i]] \u0026gt;= roman[s[i+1]]: ans += roman[s[i]] else: ans -=roman[s[i]] ans += roman[s[-1]] return ans  Time complexity Space complexity ","id":24,"section":"posts","summary":"13. Roman to Integer Discription Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nI 1 V 5 X 10 L 50 C 100 D 500 M 1000 IV 4 IX 9 XL 40 XC 90 CD 400 CM 900  Example: Input: \u0026quot;III\u0026quot; Output: 3 Input: \u0026quot;MCMXCIV\u0026quot; Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.","tags":["LeetCode","DSA"],"title":"[LeetCode] 013 Roman To Integer","uri":"https://kaka-lin.github.io/2020/06/013_roman_to_integer/","year":"2020"},{"content":"19. Remove Nth Node From End of List Discription Given a linked list, remove the n-th node from the end of list and return its head.\nExample: Given linked list: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-\u0026gt;2-\u0026gt;3-\u0026gt;5.  Solution:   Using dummy head to treat special case (like the node we want to delete is the head in the linked list).\n  Using a table to save current node:\n we can know the length of the linked list we can quickly to get the node that we want to delete and the previous node through an index. we specify prevous.next as delete.next (delete: the node we want to delete) we specify delete.next as None return dummy.next  Input: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5, n = 2 dummy: None-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5 table: [ [None,1,2,3,4,5], [1,2,3,4,5], [2,3,4,5], [3,4,5], [4,5], [5], ] previous: 3-\u0026gt;4-\u0026gt;5 delete: 4-\u0026gt;5 previous.next = delete.next delete.next = None dummy: None-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;5 return dummy.next     Runtime: 32 ms (97.69%) Memory Usage: 13.1 MB (75.86%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def removeNthFromEnd(self, head: ListNode, n: int) -\u0026gt; ListNode: table = [] dummy = ListNode(None) dummy.next = head curr = dummy while curr: table.append(curr) curr = curr.next prev = table[len(table) - n - 1] delete = table[len(table) - n] prev.next = delete.next delete.next = None return dummy.next  Time complexity  O(n)  Space complexity  O(n)  ","id":25,"section":"posts","summary":"19. Remove Nth Node From End of List Discription Given a linked list, remove the n-th node from the end of list and return its head.\nExample: Given linked list: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5, and n = 2. After removing the second node from the end, the linked list becomes 1-\u0026gt;2-\u0026gt;3-\u0026gt;5.  Solution:   Using dummy head to treat special case (like the node we want to delete is the head in the linked list).","tags":["LeetCode","DSA"],"title":"[LeetCode] 019 Remove Nth Node From End Of List","uri":"https://kaka-lin.github.io/2020/06/019_remove_nth_node_from_end_of_list/","year":"2020"},{"content":"21. Merge Two Sorted Lists Discription Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\nExample: Input: 1-\u0026gt;2-\u0026gt;4, 1-\u0026gt;3-\u0026gt;4 Output: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4 Input: 5, 1-\u0026gt;2-\u0026gt;4 Output: 1-\u0026gt;2-\u0026gt;4-\u0026gt;5  Solution: Recursion  Runtime: 40ms (93.23%) Memory Usage: 13.1MB (83.04%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def mergeTwoLists(self, l1: ListNode, l2: ListNode) -\u0026gt; ListNode: if l1 is None: return l2 if l2 is None: return l1 if l1.val \u0026lt;= l2.val: l1.next = self.mergeTwoLists(l1.next, l2) return l1 else: l2.next = self.mergeTwoLists(l1, l2.next) return l2  Time complexity Space complexity ","id":26,"section":"posts","summary":"21. Merge Two Sorted Lists Discription Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\nExample: Input: 1-\u0026gt;2-\u0026gt;4, 1-\u0026gt;3-\u0026gt;4 Output: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4 Input: 5, 1-\u0026gt;2-\u0026gt;4 Output: 1-\u0026gt;2-\u0026gt;4-\u0026gt;5  Solution: Recursion  Runtime: 40ms (93.23%) Memory Usage: 13.1MB (83.04%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 021 Merge Two Sorted List","uri":"https://kaka-lin.github.io/2020/06/021_merge_two_sorted_list/","year":"2020"},{"content":"24. Swap Nodes in Pairs Discription Given a linked list, swap every two adjacent nodes and return its head.\nYou may not modify the values in the list\u0026rsquo;s nodes, only nodes itself may be changed.\nExample: Given 1-\u0026gt;2-\u0026gt;3-\u0026gt;4, you should return the list as 2-\u0026gt;1-\u0026gt;4-\u0026gt;3.  Solution: Iteratively  Runtime: 24 ms (90.17%) Memory Usage: 12.8 MB (100%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def swapPairs(self, head: ListNode) -\u0026gt; ListNode: dummy = ListNode(None) dummy.next = head root = dummy while root.next and root.next.next: prev, post = root.next, root.next.next prev.next = post.next post.next = prev root.next = post root = root.next.next return dummy.next  Time complexity  O(n)  Space complexity  O(1)  ","id":27,"section":"posts","summary":"24. Swap Nodes in Pairs Discription Given a linked list, swap every two adjacent nodes and return its head.\nYou may not modify the values in the list\u0026rsquo;s nodes, only nodes itself may be changed.\nExample: Given 1-\u0026gt;2-\u0026gt;3-\u0026gt;4, you should return the list as 2-\u0026gt;1-\u0026gt;4-\u0026gt;3.  Solution: Iteratively  Runtime: 24 ms (90.17%) Memory Usage: 12.8 MB (100%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 024 Swap Nodes In Pairs","uri":"https://kaka-lin.github.io/2020/06/024_swap_nodes_in_pairs/","year":"2020"},{"content":"27. Remove Element Discription Given an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn\u0026rsquo;t matter what you leave beyond the new length.\nExample 1: Given nums = [3,2,2,3], val = 3, Your function should return length = 2, with the first two elements of nums being 2. It doesn't matter what you leave beyond the returned length.  Example 2: Given nums = [0,1,2,2,3,0,4,2], val = 2, Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.  Solution 1: Two Pointes - when elements to remove are rare Remove\n Runtime: 32 ms (96.43%) Memory Usage: 13.2 MB (35.57%)  class Solution: def removeElement(self, nums: List[int], val: int) -\u0026gt; int: index = 0 length = len(nums) while (index \u0026lt; length): if nums[index] == val: nums.pop(index) length -= 1 else: index += 1 return length  Time complexity  O(n)  Space complexity  O(1)  Solution 2: Two Pointes - Reorder Reorder\n Runtime: 32 ms (96.43%) Memory Usage: 13.2 MB (35.57%)  class Solution: def removeElement(self, nums: List[int], val: int) -\u0026gt; int: count = 0 for i in range(len(nums)): if nums[i] != val: nums[count] = nums[i] count += 1 return count  Time complexity  O(n)  Space complexity  O(1)  ","id":28,"section":"posts","summary":"27. Remove Element Discription Given an array nums and a value val, remove all instances of that value in-place and return the new length.\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nThe order of elements can be changed. It doesn\u0026rsquo;t matter what you leave beyond the new length.\nExample 1: Given nums = [3,2,2,3], val = 3, Your function should return length = 2, with the first two elements of nums being 2.","tags":["LeetCode","DSA"],"title":"[LeetCode] 027 Remove Element","uri":"https://kaka-lin.github.io/2020/06/027_remove_element/","year":"2020"},{"content":"28. Implement strStr() Discription Implement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nExample: Input: haystack = \u0026quot;hello\u0026quot;, needle = \u0026quot;ll\u0026quot; Output: 2 Input: haystack = \u0026quot;aaaaa\u0026quot;, needle = \u0026quot;bba\u0026quot; Output: -1  Clarification: What should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\u0026rsquo;s strstr() and Java\u0026rsquo;s indexOf().\nSolution:  Runtime: 28ms (98.83%) Memory Usage: 13.4MB (38.10%)  class Solution: def strStr(self, haystack: str, needle: str) -\u0026gt; int: if needle == \u0026quot;\u0026quot;: return 0 for i in range(len(haystack) - len(needle) + 1): if haystack[i:i + len(needle)] == needle: return i return -1  Time complexity Space complexity ","id":29,"section":"posts","summary":"28. Implement strStr() Discription Implement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nExample: Input: haystack = \u0026quot;hello\u0026quot;, needle = \u0026quot;ll\u0026quot; Output: 2 Input: haystack = \u0026quot;aaaaa\u0026quot;, needle = \u0026quot;bba\u0026quot; Output: -1  Clarification: What should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string.","tags":["LeetCode","DSA"],"title":"[LeetCode] 028 Implement StrStr()","uri":"https://kaka-lin.github.io/2020/06/028_implement_strstr/","year":"2020"},{"content":"35. Search Insert Position Discription Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nExample: Input: [1,3,5,6], 5 Output: 2 Input: [1,3,5,6], 7 Output: 4  Solution: Array  Runtime: 32 ms (93.73%) Memory Usage: 13.4 MB (98.27%)  class Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: for i in range(len(nums)): if target == nums[i] or target \u0026lt; nums[i]: return i return len(nums)  Time complexity  O(n)  Space complexity Solution: Binary Search  Runtime: 28 ms (98.70%) Memory Usage: 13.5 MB (93.66%)  class Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: low = 0 high = len(nums) - 1 while low \u0026lt;= high: mid = low + (high - low) // 2 if nums[mid] \u0026lt; target: low = mid + 1 else: high = mid - 1 return low  Time complexity  O(logn)  Space complexity ","id":30,"section":"posts","summary":"35. Search Insert Position Discription Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nExample: Input: [1,3,5,6], 5 Output: 2 Input: [1,3,5,6], 7 Output: 4  Solution: Array  Runtime: 32 ms (93.73%) Memory Usage: 13.4 MB (98.27%)  class Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: for i in range(len(nums)): if target == nums[i] or target \u0026lt; nums[i]: return i return len(nums)  Time complexity  O(n)  Space complexity Solution: Binary Search  Runtime: 28 ms (98.","tags":["LeetCode","DSA"],"title":"[LeetCode] 035 Search Insert Position","uri":"https://kaka-lin.github.io/2020/06/035_search_insert_position/","year":"2020"},{"content":"53. Maximum Subarray Discription Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nExample: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.  Solution 1: Divide and Conquer Ref: divide and conquer - maximum subarray\n Runtime: 124 ms (7.29%) Memory Usage: 13.6 MB (65.85%)  class Solution: def maxSubArray(self, nums: List[int]) -\u0026gt; int: if len(nums) == 1: return nums[0] k = len(nums) // 2 left_sum = self.maxSubArray(nums[:k]) right_sum = self.maxSubArray(nums[k:]) middle_sum = self.maxCrossSubArray(nums[:k], nums[k:]) return max(left_sum, right_sum, middle_sum) def maxCrossSubArray(self, left, right): left_sum = float(\u0026quot;-inf\u0026quot;) _sum = 0 for index in range(len(left)-1, -1, -1): _sum += left[index] if _sum \u0026gt; left_sum: left_sum = _sum right_sum = float(\u0026quot;-inf\u0026quot;) _sum = 0 for index in range(len(right)): _sum += right[index] if _sum \u0026gt; right_sum: right_sum = _sum return left_sum + right_sum  Time complexity  $O(nlogn)$  Space complexity  $O(nlogn)$  Solution 2: Dynamic Programming If sum[i-1] is negative, it will only make a smaller sum, so if sum[i-1] is negative, we let sum[i] is nums[i], and we add only if sum[i-1] is non-negative.\n Runtime: 40 ms (93.49%) Memory Usage: 14 MB (13.39%)  class Solution: def maxSubArray(self, nums: List[int]) -\u0026gt; int: if nums is None: return 0 length = len(nums) table = [0] * length table[0] = nums[0] _max = table[0] for i in range(1, length): if table[i-1] \u0026lt; 0: table[i] = nums[i] else: table[i] = table[i-1] + nums[i] if table[i] \u0026gt; _max: _max = table[i] return _max  Time complexity  $O(n)$  Space complexity  $O(n)$  ","id":31,"section":"posts","summary":"53. Maximum Subarray Discription Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nExample: Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.  Solution 1: Divide and Conquer Ref: divide and conquer - maximum subarray\n Runtime: 124 ms (7.29%) Memory Usage: 13.6 MB (65.85%)  class Solution: def maxSubArray(self, nums: List[int]) -\u0026gt; int: if len(nums) == 1: return nums[0] k = len(nums) // 2 left_sum = self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 053 Maximum Subarray","uri":"https://kaka-lin.github.io/2020/06/053_maximum_subarray/","year":"2020"},{"content":"70. Climbing Stairs Discription You are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer.\nExample 1: Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps  Example 2: Input: 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step  Solution: Dynamic Programming (Bottom-up)  Runtime: 24 ms (93.8%) Memory Usage: 12.8 MB (100%)  class Solution: def climbStairs(self, n: int) -\u0026gt; int: if n \u0026lt;= 2: return n table = [0] * (n+1) table[1] = 1 table[2] = 2 for i in range(3, n+1): table[i] = table[i-1] + table[i-2] return table[n]  Time complexity  O(n)  Space complexity  O(n)  ","id":32,"section":"posts","summary":"70. Climbing Stairs Discription You are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer.\nExample 1: Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2.","tags":["LeetCode","DSA"],"title":"[LeetCode] 070 Climbing Stairs","uri":"https://kaka-lin.github.io/2020/06/070_climbing_stairs/","year":"2020"},{"content":"83. Remove Duplicates from Sorted List Discription Given a sorted linked list, delete all duplicates such that each element appear only once.\nExample: Input: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;3 Output: 1-\u0026gt;2-\u0026gt;  Solution:  Runtime: 44 ms (93.15%) Memory Usage: 13.1 MB (67.00%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def deleteDuplicates(self, head: ListNode) -\u0026gt; ListNode: if head is None or head.next is None: return head ptr = head while ptr and ptr.next: if ptr.next.val == ptr.val: ptr.next = ptr.next.next else: ptr = ptr.next return head  Time complexity  O(n)  Space complexity  O(1)  ","id":33,"section":"posts","summary":"83. Remove Duplicates from Sorted List Discription Given a sorted linked list, delete all duplicates such that each element appear only once.\nExample: Input: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;3 Output: 1-\u0026gt;2-\u0026gt;  Solution:  Runtime: 44 ms (93.15%) Memory Usage: 13.1 MB (67.00%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def deleteDuplicates(self, head: ListNode) -\u0026gt; ListNode: if head is None or head.","tags":["LeetCode","DSA"],"title":"[LeetCode] 083 Remove Duplicates From Sorted List","uri":"https://kaka-lin.github.io/2020/06/083_remove_duplicates_from_sorted_list/","year":"2020"},{"content":"94. Binary Tree Inorder Traversal Discription Given a binary tree, return the inorder traversal of its nodes\u0026rsquo; values.\ninorder:\nleft tree -\u0026gt; root tree -\u0026gt; right tree  Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [1,3,2]  Solution 1: Recursive  Runtime: 32 ms (91.99%) Memory Usage: 13.2 MB (56.18%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def inorderTraversal(self, root: TreeNode) -\u0026gt; List[int]: if root is None: return [] ans = [] self._inorderTraversal(root, ans) return ans def _inorderTraversal(self, node: TreeNode, ans: List[int]): if node.left: self._inorderTraversal(node.left, ans) ans.append(node.val) if node.right: self._inorderTraversal(node.right, ans)  Time complexity:  O(n)  Space complexity  worst case: O(n) average case: O(logn)  Solution 2: Iterating  Runtime: 32 ms (91.99%) Memory Usage: 13.1 MB (62.12%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def inorderTraversal(self, root: TreeNode) -\u0026gt; List[int]: array = [] stack = [] while root or stack: while root: stack.append(root) root = root.left root = stack.pop() array.append(root.val) root = root.right return array  Time complexity:  O(n)  Space complexity  O(n)  ","id":34,"section":"posts","summary":"94. Binary Tree Inorder Traversal Discription Given a binary tree, return the inorder traversal of its nodes\u0026rsquo; values.\ninorder:\nleft tree -\u0026gt; root tree -\u0026gt; right tree  Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [1,3,2]  Solution 1: Recursive  Runtime: 32 ms (91.99%) Memory Usage: 13.2 MB (56.18%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 094 Binary Tree Inorder Traversal","uri":"https://kaka-lin.github.io/2020/06/094_binary_tree_inorder_traversal/","year":"2020"},{"content":"98. Validate Binary Search Tree Discription Given a binary tree, determine if it is a valid binary search tree (BST).\nAssume a BST is defined as follows:\n The left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key. Both the left and right subtrees must also be binary search trees.  Example 1:  2 / \\ 1 3 Input: [2,1,3] Output: true  Example 2:  5 / \\ 1 4 / \\ 3 6 Input: [5,1,4,null,null,3,6] Output: false Explanation: The root node's value is 5 but its right child's value is 4.  Solution 1: Recursion  Runtime: 36 ms (95.54%) Memory Usage: 14.9 MB (100%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isValidBST(self, root: TreeNode) -\u0026gt; bool: return self.helper(root, float(\u0026quot;-inf\u0026quot;), float(\u0026quot;inf\u0026quot;)) def helper(self, root, min_val, max_val): if not root: return True if root.val \u0026lt;= min_val or root.val \u0026gt;= max_val: return False return self.helper(root.left, min_val, root.val) and \\ self.helper(root.right, root.val, max_val)  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Inorder traversal  Runtime: 36 ms (95.54%) Memory Usage: 15 MB (100%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isValidBST(self, root: TreeNode) -\u0026gt; bool: stack, inorder = [], float(\u0026quot;-inf\u0026quot;) while root or stack: while root: stack.append(root) root = root.left root = stack.pop() if root.val \u0026lt;= inorder: return False inorder = root.val root = root.right return True  Time complexity  O(n)  Space complexity  O(n)  ","id":35,"section":"posts","summary":"98. Validate Binary Search Tree Discription Given a binary tree, determine if it is a valid binary search tree (BST).\nAssume a BST is defined as follows:\n The left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key. Both the left and right subtrees must also be binary search trees.","tags":["LeetCode","DSA"],"title":"[LeetCode] 098 Validate Binary Search Tree","uri":"https://kaka-lin.github.io/2020/06/098_validate_binary_search_tree/","year":"2020"},{"content":"100. Same Tree Discription Given two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\nExample 1: Input: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] Output: true  Example 2: Input: 1 1 / \\ 2 2 [1,2], [1,null,2] Output: false  Example 3: Input: 1 1 / \\ / \\ 2 1 1 2 [1,2,1], [1,1,2] Output: false  Solution 1: Recursion  Runtime: 36ms (86.76%) Memory Usage: 13.3 MB (17.64%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -\u0026gt; bool: if p is None and q is None: return True if p is None or q is None: return False if p.val != q.val: return False return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)  Time complexity:  O(n)  Space complexity  O(n)  ","id":36,"section":"posts","summary":"100. Same Tree Discription Given two binary trees, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical and the nodes have the same value.\nExample 1: Input: 1 1 / \\ / \\ 2 3 2 3 [1,2,3], [1,2,3] Output: true  Example 2: Input: 1 1 / \\ 2 2 [1,2], [1,null,2] Output: false  Example 3: Input: 1 1 / \\ / \\ 2 1 1 2 [1,2,1], [1,1,2] Output: false  Solution 1: Recursion  Runtime: 36ms (86.","tags":["LeetCode","DSA"],"title":"[LeetCode] 100 Same Tree","uri":"https://kaka-lin.github.io/2020/06/100_same_tree/","year":"2020"},{"content":"102. Binary Tree Level Order Traversal Level-order Traversal - Introduction\nDiscription Given a binary tree, return the level order traversal of its nodes\u0026rsquo; values. (ie, from left to right, level by level).\nExample: Given binary tree [3,9,20,null,null,15,7],\n 3 / \\ 9 20 / \\ 15 7  return its level order traversal as:\n[ [3], [9,20], [15,7] ]  Solution:  Runtime: 32 ms (99.58%) Memory Usage: 13.5 MB (33.61%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def levelOrder(self, root: TreeNode) -\u0026gt; List[List[int]]: ans = [] stack = [root] level_ans = [] level_stack = [] while root and stack: while stack: root = stack.pop(0) level_ans.append(root.val) if root.left: level_stack.append(root.left) if root.right: level_stack.append(root.right) ans.append(level_ans) stack = level_stack level_ans = [] level_stack = [] return ans  Time complexity Space complexity ","id":37,"section":"posts","summary":"102. Binary Tree Level Order Traversal Level-order Traversal - Introduction\nDiscription Given a binary tree, return the level order traversal of its nodes\u0026rsquo; values. (ie, from left to right, level by level).\nExample: Given binary tree [3,9,20,null,null,15,7],\n 3 / \\ 9 20 / \\ 15 7  return its level order traversal as:\n[ [3], [9,20], [15,7] ]  Solution:  Runtime: 32 ms (99.58%) Memory Usage: 13.5 MB (33.","tags":["LeetCode","DSA"],"title":"[LeetCode] 102 Binary Tree Level Order Traversal","uri":"https://kaka-lin.github.io/2020/06/102_binary_tree_level_order_traversal/","year":"2020"},{"content":"118. Pascal\u0026rsquo;s Triangle Discription Given a non-negative integer numRows, generate the first numRows of Pascal\u0026rsquo;s triangle.\nIn Pascal\u0026rsquo;s triangle, each number is the sum of the two numbers directly above it. Example: Input: 5 Output: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ]  Solution: Dynamic Programming  Runtime: 20 ms (98.97%) Memory Usage: 12.7 MB (100%)  class Solution: def generate(self, numRows: int) -\u0026gt; List[List[int]]: pascal_list = [] for row in range(numRows): pascal_list.append([0] * (row+1)) for col in range(len(pascal_list[row])): self.helper(row, col, pascal_list) return pascal_list def helper(self, nr, nc, pascal_list): if nc == 0 or nc == nr: pascal_list[nr][nc] = 1 else: pascal_list[nr][nc] = pascal_list[nr - 1][nc - 1] \\ + pascal_list[nr - 1][nc]  Time complexity  $O(numRows^2)$  Space complexity  $O(numRows^2)$  ","id":38,"section":"posts","summary":"118. Pascal\u0026rsquo;s Triangle Discription Given a non-negative integer numRows, generate the first numRows of Pascal\u0026rsquo;s triangle.\nIn Pascal\u0026rsquo;s triangle, each number is the sum of the two numbers directly above it. Example: Input: 5 Output: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ]  Solution: Dynamic Programming  Runtime: 20 ms (98.97%) Memory Usage: 12.7 MB (100%)  class Solution: def generate(self, numRows: int) -\u0026gt; List[List[int]]: pascal_list = [] for row in range(numRows): pascal_list.","tags":["LeetCode","DSA"],"title":"[LeetCode] 118 Pascals Triangle","uri":"https://kaka-lin.github.io/2020/06/118_pascals_triangle/","year":"2020"},{"content":"119. Pascal\u0026rsquo;s Triangle II Discription Given a non-negative index k where k ≤ 33, return the $k^{th}$ index row of the Pascal\u0026rsquo;s triangle.\nNote that the row index starts from 0.\nIn Pascal\u0026rsquo;s triangle, each number is the sum of the two numbers directly above it. Example: Input: 3 Output: [1,3,3,1]  Solution: Dynamic Programming  Runtime: 24 ms (96.54%) Memory Usage: 12.7 MB (100%)  class Solution: def getRow(self, rowIndex: int) -\u0026gt; List[int]: pascal_list = [1] for row in range(1, rowIndex + 1): # Previous row prev_pascal_list = pascal_list # Start th new row pascal_list = [1] for col in range(1, row): pascal_list.append(prev_pascal_list[col-1] + prev_pascal_list[col]) pascal_list.append(1) return pascal_list  Time complexity  $O(numRows^2)$  Space complexity  $O(k)$  ","id":39,"section":"posts","summary":"119. Pascal\u0026rsquo;s Triangle II Discription Given a non-negative index k where k ≤ 33, return the $k^{th}$ index row of the Pascal\u0026rsquo;s triangle.\nNote that the row index starts from 0.\nIn Pascal\u0026rsquo;s triangle, each number is the sum of the two numbers directly above it. Example: Input: 3 Output: [1,3,3,1]  Solution: Dynamic Programming  Runtime: 24 ms (96.54%) Memory Usage: 12.7 MB (100%)  class Solution: def getRow(self, rowIndex: int) -\u0026gt; List[int]: pascal_list = [1] for row in range(1, rowIndex + 1): # Previous row prev_pascal_list = pascal_list # Start th new row pascal_list = [1] for col in range(1, row): pascal_list.","tags":["LeetCode","DSA"],"title":"[LeetCode] 119 Pascals Triangle Ii","uri":"https://kaka-lin.github.io/2020/06/119_pascals_triangle_ii/","year":"2020"},{"content":"136. Single Number Discription Given a non-empty array of integers, every element appears twice except for one. Find that single one.\nNote: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\nExample: Input: [2,2,1] Output: 1 Input: [4,1,2,1,2] Output: 4  Solution 1: Lsit operation  Runtime: 1160 ms (8.54%) Memory Usage: 14.9 MB (36.99%)  class Solution: def singleNumber(self, nums: List[int]) -\u0026gt; int: if len(nums) \u0026lt;= 1: return nums[0] record_list = [] for i in range(len(nums)): if nums[i] not in record_list: record_list.append(nums[i]) else: record_list.remove(nums[i]) return record_list[0]  Time complexity  O(n^2)  Space complexity  O(n)  Solution 2: Bit Manipulation Concept   If we take XOR of zero and some bit, it will return that bit\na xor 0 = a    If we take XOR of two same bits, it will return 0\na xor a = 0    Commutativity and Associativity\na xor b xor a = (a xor a) xor b = 0 xor b = b      Runtime: 36 ms (97.49%) Memory Usage: 14.7 MB (69.52%)  class Solution: def singleNumber(self, nums: List[int]) -\u0026gt; int: a = 0 for num in nums: a ^= num return a  Time complexity  O(n)  Space complexity  O(1)  ","id":40,"section":"posts","summary":"136. Single Number Discription Given a non-empty array of integers, every element appears twice except for one. Find that single one.\nNote: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\nExample: Input: [2,2,1] Output: 1 Input: [4,1,2,1,2] Output: 4  Solution 1: Lsit operation  Runtime: 1160 ms (8.54%) Memory Usage: 14.9 MB (36.99%)  class Solution: def singleNumber(self, nums: List[int]) -\u0026gt; int: if len(nums) \u0026lt;= 1: return nums[0] record_list = [] for i in range(len(nums)): if nums[i] not in record_list: record_list.","tags":["LeetCode","DSA"],"title":"[LeetCode] 136 Single Number","uri":"https://kaka-lin.github.io/2020/06/136_single_number/","year":"2020"},{"content":"144. Binary Tree Preorder Traversal Discription Given a binary tree, return the preorder traversal of its nodes\u0026rsquo; values.\ninorder:\nroot tree -\u0026gt; left tree -\u0026gt; right tree  Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [1,2,3]  Solution 1: Recursive  Runtime: 32 ms (92.42%) Memory Usage: 13.2 MB (52.73%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def preorderTraversal(self, root: TreeNode) -\u0026gt; List[int]: if root is None: return [] array = [] self.preorderHelper(root, array) return array def preorderHelper(self, root: TreeNode, array: List[int]): array.append(root.val) if root.left: self.preorderHelper(root.left, array) if root.right: self.preorderHelper(root.right, array)  Time complexity:  O(n)  Space complexity  worst case: O(n) average case: O(logn)  Solution 2: Iterating  Runtime: 24 ms (99.77%) Memory Usage: 13.1 MB (75.32%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def preorderTraversal(self, root: TreeNode) -\u0026gt; List[int]: stack = [] array = [] while root: array.append(root.val) if root.right: stack.append(root.right) if root.left: root = root.left elif stack: root = stack.pop() else: break return array  Time complexity:  O(n)  Space complexity  O(n)  ","id":41,"section":"posts","summary":"144. Binary Tree Preorder Traversal Discription Given a binary tree, return the preorder traversal of its nodes\u0026rsquo; values.\ninorder:\nroot tree -\u0026gt; left tree -\u0026gt; right tree  Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [1,2,3]  Solution 1: Recursive  Runtime: 32 ms (92.42%) Memory Usage: 13.2 MB (52.73%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 144 Binary Tree Preorder Traversal","uri":"https://kaka-lin.github.io/2020/06/144_binary_tree_preorder_traversal/","year":"2020"},{"content":"145. Binary Tree Postorder Traversal Discription Given a binary tree, return the postorder traversal of its nodes\u0026rsquo; values.\ninorder:\nleft tree -\u0026gt; rigth tree -\u0026gt; root tree  Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [3,2,1]  Solution 1: Recursive  Runtime: 32 ms (91.82%) Memory Usage: 13 MB (95.36%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def postorderTraversal(self, root: TreeNode) -\u0026gt; List[int]: if root is None: return [] array = [] self.postorderHelper(root, array) return array def postorderHelper(self, root: TreeNode, array: List[int]): if root.left: self.postorderHelper(root.left, array) if root.right: self.postorderHelper(root.right, array) array.append(root.val)  Time complexity:  O(n)  Space complexity  worst case: O(n) average case: O(logn)  Solution 2: Iterating  Runtime: 36 ms (75.55%) Memory Usage: 13.2 MB (37.93%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def postorderTraversal(self, root: TreeNode) -\u0026gt; List[int]: pre = None array = [] stack = [] while root or stack: while root: stack.append(root) root = root.left root = stack.pop() if root.right and pre != root.right: stack.append(root) root = root.right continue array.append(root.val) pre = root root = None return array  Time complexity:  O(n)  Space complexity  O(n)  ","id":42,"section":"posts","summary":"145. Binary Tree Postorder Traversal Discription Given a binary tree, return the postorder traversal of its nodes\u0026rsquo; values.\ninorder:\nleft tree -\u0026gt; rigth tree -\u0026gt; root tree  Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [3,2,1]  Solution 1: Recursive  Runtime: 32 ms (91.82%) Memory Usage: 13 MB (95.36%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 145 Binary Tree Postorder Traversal","uri":"https://kaka-lin.github.io/2020/06/145_binary_tree_postorder_traversal/","year":"2020"},{"content":"160. Intersection of Two Linked Lists Discription Write a program to find the node at which the intersection of two singly linked lists begins.\nExample: Solution 1: Two Pointers  Runtime: 192ms (91.82%) Memory Usage: 41.8 MB (67.17%)  # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def getIntersectionNode(self, headA, headB): \u0026quot;\u0026quot;\u0026quot; :type head1, head1: ListNode :rtype: ListNode \u0026quot;\u0026quot;\u0026quot; if headA is None or headB is None: return None ptr_a = headA ptr_b = headB while ptr_a is not ptr_b: ptr_a = headB if ptr_a is None else ptr_a.next ptr_b = headA if ptr_b is None else ptr_b.next return ptr_a  Time complexity:  O(m+n)  Space complexity  O(1)  ","id":43,"section":"posts","summary":"160. Intersection of Two Linked Lists Discription Write a program to find the node at which the intersection of two singly linked lists begins.\nExample: Solution 1: Two Pointers  Runtime: 192ms (91.82%) Memory Usage: 41.8 MB (67.17%)  # Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def getIntersectionNode(self, headA, headB): \u0026quot;\u0026quot;\u0026quot; :type head1, head1: ListNode :rtype: ListNode \u0026quot;\u0026quot;\u0026quot; if headA is None or headB is None: return None ptr_a = headA ptr_b = headB while ptr_a is not ptr_b: ptr_a = headB if ptr_a is None else ptr_a.","tags":["LeetCode","DSA"],"title":"[LeetCode] 160 Intersection Of Two Linked List","uri":"https://kaka-lin.github.io/2020/06/160_intersection_of_two_linked_list/","year":"2020"},{"content":"167. Two Sum II - Input array is sorted Discription Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.\nNote:  Your returned answers (both index1 and index2) are not zero-based. You may assume that each input would have exactly one solution and you may not use the same element twice.  Example: Input: numbers = [2,7,11,15], target = 9 Output: [1,2] Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.  Solution:  Runtime: 36ms (94.20%) Memory Usage: 13.5MB (76.45%)  class Solution: def twoSum(self, numbers: List[int], target: int) -\u0026gt; List[int]: table = {} for i in range(len(numbers)): rest = target - numbers[i] if rest in table: return [table[rest], i + 1] else: table[numbers[i]] = i+1  Time complexity  O(n)  Space complexity  O(n)  ","id":44,"section":"posts","summary":"167. Two Sum II - Input array is sorted Discription Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.\nThe function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.\nNote:  Your returned answers (both index1 and index2) are not zero-based.","tags":["LeetCode","DSA"],"title":"[LeetCode] 167 Two Sum II Input Array Is Sorted","uri":"https://kaka-lin.github.io/2020/06/167_two_sum_ii_input_array_is_sorted/","year":"2020"},{"content":"169. Majority Element Discription Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\nYou may assume that the array is non-empty and the majority element always exist in the array.\nExample: Input: [3,2,3] Output: 3 Input: [2,2,1,1,1,2,2] Output: 2  Solution 1: HashMap  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def majorityElement(self, nums: List[int]) -\u0026gt; int: record = {} for num in nums: if num not in record: record[num] = 1 else: record[num] += 1 return max(record.items(), key=operator.itemgetter(1))[0]  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Sort  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def majorityElement(self, nums: List[int]) -\u0026gt; int: nums.sort() return nums[len(nums)//2]  Time complexity  O(nlogn)  Space complexity  O(1) or O(n)  Solution 3: Boyer-Moore Voting Algorithm  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def majorityElement(self, nums: List[int]) -\u0026gt; int: count = 0 candidate = None for num in nums: if count == 0: candidate = num count += 1 elif num == candidate: count += 1 else: count -= 1 return candidate  Time complexity  O(n)  Space complexity  O(1)  ","id":45,"section":"posts","summary":"169. Majority Element Discription Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\nYou may assume that the array is non-empty and the majority element always exist in the array.\nExample: Input: [3,2,3] Output: 3 Input: [2,2,1,1,1,2,2] Output: 2  Solution 1: HashMap  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def majorityElement(self, nums: List[int]) -\u0026gt; int: record = {} for num in nums: if num not in record: record[num] = 1 else: record[num] += 1 return max(record.","tags":["LeetCode","DSA"],"title":"[LeetCode] 169 Majority Element","uri":"https://kaka-lin.github.io/2020/06/169_majority_element/","year":"2020"},{"content":"191. Number of 1 Bits Discription Write a function that takes an unsigned integer and return the number of \u0026lsquo;1\u0026rsquo; bits it has (also known as the Hamming weight).\nExample: Input: 00000000000000000000000000001011 Output: 3 Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits. Input: 11111111111111111111111111111101 Output: 31 Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.  Solution 1: Loop and Flip The solution is straight-forward. We check each of the 32 bits of the number. If the bit is 1, we add one to the number of 1-bits.\n Runtime: 8 ms (99.56%) Memory Usage: 11.8 MB (26.43%)  class Solution(object): def hammingWeight(self, n): \u0026quot;\u0026quot;\u0026quot; :type n: int :rtype: int \u0026quot;\u0026quot;\u0026quot; bits = n \u0026amp; 1 for i in range(31): if (n \u0026amp; (2 \u0026lt;\u0026lt; i)): bits += 1 return bits  Time complexity The run time depends on the number of bits in n. Because n in this piece of code is a 32-bit integer, the time complexity is\n O(1)  Space complexity  O(1)  ","id":46,"section":"posts","summary":"191. Number of 1 Bits Discription Write a function that takes an unsigned integer and return the number of \u0026lsquo;1\u0026rsquo; bits it has (also known as the Hamming weight).\nExample: Input: 00000000000000000000000000001011 Output: 3 Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits. Input: 11111111111111111111111111111101 Output: 31 Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.  Solution 1: Loop and Flip The solution is straight-forward.","tags":["LeetCode","DSA"],"title":"[LeetCode] 191 Number Of 1 Bits","uri":"https://kaka-lin.github.io/2020/06/191_number_of_1_bits/","year":"2020"},{"content":"202. Happy Number Discription Write an algorithm to determine if a number is \u0026ldquo;happy\u0026rdquo;.\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.\nExample: Input: 19 Output: true Explanation: 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1  Solution:  Runtime: 20 ms (99.42%) Memory Usage: 12.7 MB (100%)  class Solution: def isHappy(self, n: int) -\u0026gt; bool: if n == 1: return True seen = set() return self.helper(n, seen) def helper(self, n, seen): new_n = 0 while n: res = n % 10 new_n += pow(res, 2) n //= 10 if new_n == 1: return True elif new_n in seen: return False else: seen.add(new_n) return self.helper(new_n, seen)  Time complexity Space complexity ","id":47,"section":"posts","summary":"202. Happy Number Discription Write an algorithm to determine if a number is \u0026ldquo;happy\u0026rdquo;.\nA happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.","tags":["LeetCode","DSA"],"title":"[LeetCode] 202 Happy Number","uri":"https://kaka-lin.github.io/2020/06/202_happy_number/","year":"2020"},{"content":"203. Remove Linked List Elements Discription Remove all elements from a linked list of integers that have value val.\nExample: Input: 1-\u0026gt;2-\u0026gt;6-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;6, val = 6 Output: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5  Solution: Using dummy node can convenience to treat the special case, like the val appear at head of list and immediately after it.\nFor example:\nInput: 1 -\u0026gt; 1 -\u0026gt; 1 Output: []   Runtime: 72ms (90.70%) Memory Usage: 16.1MB (99.7%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def removeElements(self, head: ListNode, val: int) -\u0026gt; ListNode: dummy = ListNode(None) dummy.next = head curr = dummy while curr.next: if curr.next.val == val: curr.next = curr.next.next else: curr = curr.next return dummy.next  Time complexity  O(n)  Space complexity  O(1)  ","id":48,"section":"posts","summary":"203. Remove Linked List Elements Discription Remove all elements from a linked list of integers that have value val.\nExample: Input: 1-\u0026gt;2-\u0026gt;6-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;6, val = 6 Output: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5  Solution: Using dummy node can convenience to treat the special case, like the val appear at head of list and immediately after it.\nFor example:\nInput: 1 -\u0026gt; 1 -\u0026gt; 1 Output: []   Runtime: 72ms (90.70%) Memory Usage: 16.1MB (99.7%)  # Definition for singly-linked list.","tags":["LeetCode","DSA"],"title":"[LeetCode] 203 Remove Linked List Elements","uri":"https://kaka-lin.github.io/2020/06/203_remove_linked_list_elements/","year":"2020"},{"content":"206. Reverse Linked List Discription Reverse a singly linked list.\nExample: Input: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL Output: 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL  Solution: ref: https://www.youtube.com/watch?v=MRe3UsRadKw\u0026amp;t=4s\n Runtime: 32 ms (99.15%) Memory Usage: 18.7 MB (21.78%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseList(self, head: ListNode) -\u0026gt; ListNode: if head is None or head.next is None: return head ptr = self.reverseList(head.next) head.next.next = head head.next = None return ptr  Time complexity Space complexity ","id":49,"section":"posts","summary":"206. Reverse Linked List Discription Reverse a singly linked list.\nExample: Input: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL Output: 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL  Solution: ref: https://www.youtube.com/watch?v=MRe3UsRadKw\u0026amp;t=4s\n Runtime: 32 ms (99.15%) Memory Usage: 18.7 MB (21.78%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def reverseList(self, head: ListNode) -\u0026gt; ListNode: if head is None or head.next is None: return head ptr = self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 206 Reverse Linked List","uri":"https://kaka-lin.github.io/2020/06/206_reverse_linked_list/","year":"2020"},{"content":"217. Contains Duplicate Discription Given an array of integers, find if the array contains any duplicates.\nYour function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\nExample: Input: [1,2,3,1] Output: true Input: [1,2,3,4] Output: false Input: [1,1,1,3,3,4,3,2,4,2] Output: true  Solution 1: Hash Table  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def containsDuplicate(self, nums: List[int]) -\u0026gt; bool: array = set() for num in nums: if num in array: return True array.add(num) return False  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Pythonic  Runtime: 108 ms (99.88%) Memory Usage: 18.1 MB (88.68%)  class Solution: def containsDuplicate(self, nums: List[int]) -\u0026gt; bool: return len(nums) != len(set(nums))  Time complexity  O(n)  Space complexity  O(n)  ","id":50,"section":"posts","summary":"217. Contains Duplicate Discription Given an array of integers, find if the array contains any duplicates.\nYour function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.\nExample: Input: [1,2,3,1] Output: true Input: [1,2,3,4] Output: false Input: [1,1,1,3,3,4,3,2,4,2] Output: true  Solution 1: Hash Table  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def containsDuplicate(self, nums: List[int]) -\u0026gt; bool: array = set() for num in nums: if num in array: return True array.","tags":["LeetCode","DSA"],"title":"[LeetCode] 217 Contains Duplicate","uri":"https://kaka-lin.github.io/2020/06/217_contains_duplicate/","year":"2020"},{"content":"226. Invert Binary Tree Discription Invert a binary tree.\nExample: Input:\n 4 / \\ 2 7 / \\ / \\ 1 3 6 9  Output:\n 4 / \\ 7 2 / \\ / \\ 9 6 3 1  Solution 1: Recursion  Runtime: 24 ms (87.55%) Memory Usage: 12.7 MB (100%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def invertTree(self, root: TreeNode) -\u0026gt; TreeNode: if not root: return root.left, root.right = self.invertTree(root.right), self.invertTree(root.left) return root  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Iterative  Runtime: ms (%) Memory Usage: MB (%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def invertTree(self, root: TreeNode) -\u0026gt; TreeNode: stack = [root] while stack: curr = stack.pop(0) if curr: temp = curr.left curr.left = curr.right curr.right = temp if curr.left: stack.append(curr.left) if curr.right: stack.append(curr.right) return root  Time complexity  O(n)  Space complexity  O(n)  ","id":51,"section":"posts","summary":"226. Invert Binary Tree Discription Invert a binary tree.\nExample: Input:\n 4 / \\ 2 7 / \\ / \\ 1 3 6 9  Output:\n 4 / \\ 7 2 / \\ / \\ 9 6 3 1  Solution 1: Recursion  Runtime: 24 ms (87.55%) Memory Usage: 12.7 MB (100%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 226 Invert Binary Tree","uri":"https://kaka-lin.github.io/2020/06/226_invert_binary_tree/","year":"2020"},{"content":"234. Palindrome Linked List Discription Given a singly linked list, determine if it is a palindrome.\nExample: Input: 1-\u0026gt;2 Output: false Input: 1-\u0026gt;2-\u0026gt;2-\u0026gt;1 Output: true  Follow up: Could you do it in O(n) time and O(1) space?\nSolution:  Find the middle of the linked list. Reverse the second half of the linked list. Compare.   Runtime: 76 ms (84.86%) Memory Usage: 23.6 MB (92.34%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def isPalindrome(self, head: ListNode) -\u0026gt; bool: if head is None or head.next is None: return True # find the middle of the linked list slow = fast = head while fast and fast.next: slow = slow.next fast = fast.next.next # reverse the second half of the linked list reverse = None curr = slow while curr: _next = curr.next curr.next = reverse reverse = curr curr = _next # compare backward = reverse forward = head while backward: if forward.val != backward.val: return False forward = forward.next backward = backward.next return True  Time complexity Space complexity ","id":52,"section":"posts","summary":"234. Palindrome Linked List Discription Given a singly linked list, determine if it is a palindrome.\nExample: Input: 1-\u0026gt;2 Output: false Input: 1-\u0026gt;2-\u0026gt;2-\u0026gt;1 Output: true  Follow up: Could you do it in O(n) time and O(1) space?\nSolution:  Find the middle of the linked list. Reverse the second half of the linked list. Compare.   Runtime: 76 ms (84.86%) Memory Usage: 23.6 MB (92.34%)  # Definition for singly-linked list.","tags":["LeetCode","DSA"],"title":"[LeetCode] 234 Palindrome Linked List","uri":"https://kaka-lin.github.io/2020/06/234_palindrome_linked_list/","year":"2020"},{"content":"236. Lowest Common Ancestor of a Binary Tree Discription Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\nGiven the following binary tree: root = [3,5,1,6,2,0,8,null,null,7,4]\nExample1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3.  Example2: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.  Note:  All of the nodes\u0026rsquo; values will be unique. p and q are different and both values will exist in the binary tree.  Solution: Recursive Youtube: Lowest Common Ancestor Between 2 Binary Tree Nodes (A Recursive Approach)\n Runtime: 72 ms (98.28%) Memory Usage: 25.7 MB (42.25%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -\u0026gt; 'TreeNode': if root is None or root == p or root == q: return root left = self.lowestCommonAncestor(root.left, p, q) right = self.lowestCommonAncestor(root.right, p, q) if left is None: return right if right is None: return left return root  Time complexity  O(n)  Space complexity  O(h), worst case: h = n  ","id":53,"section":"posts","summary":"236. Lowest Common Ancestor of a Binary Tree Discription Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).","tags":["LeetCode","DSA"],"title":"[LeetCode] 236 Lowest Common Ancestor Of A Binary Tree","uri":"https://kaka-lin.github.io/2020/06/236_lowest_common_ancestor_of_a_binary_tree/","year":"2020"},{"content":"240. Search a 2D Matrix II Discription Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom.  Example: Consider the following matrix:\n[ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ]  Given target = 5, return true.\nGiven target = 20, return false.\nSolution:  Runtime: 28 ms (94.02%) Memory Usage: 17.4 MB (100%)  class Solution: def searchMatrix(self, matrix, target): \u0026quot;\u0026quot;\u0026quot; :type matrix: List[List[int]] :type target: int :rtype: bool \u0026quot;\u0026quot;\u0026quot; if not matrix or not matrix[0]: return False m = len(matrix) n = len(matrix[0]) # from bottom-left point i = m - 1 j = 0 while i \u0026gt;= 0 and j \u0026lt; n: if matrix[i][j] == target: return True if matrix[i][j] \u0026gt; target: i -= 1 else: j += 1 return False  Time complexity  O(m+n)  Space complexity  O(1)  ","id":54,"section":"posts","summary":"240. Search a 2D Matrix II Discription Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\n Integers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom.  Example: Consider the following matrix:\n[ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ]  Given target = 5, return true.","tags":["LeetCode","DSA"],"title":"[LeetCode] 240 Search A 2d Matrix Ii","uri":"https://kaka-lin.github.io/2020/06/240_search_a_2d_matrix_ii/","year":"2020"},{"content":"242. Valid Anagram Discription Given two strings s and t , write a function to determine if t is an anagram of s.\nExample: Input: s = \u0026quot;anagram\u0026quot;, t = \u0026quot;nagaram\u0026quot; Output: true Input: s = \u0026quot;rat\u0026quot;, t = \u0026quot;car\u0026quot; Output: false  Solution: Hash Table  Runtime: 48 ms (84.31%) Memory Usage: 13.5 MB  class Solution: def isAnagram(self, s: str, t: str) -\u0026gt; bool: if len(s) != len(t): return False length = len(s) table = {} for i in range(length): if s[i] in table: table[s[i]] += 1 else: table[s[i]] = 1 if t[i] in table: table[t[i]] -= 1 else: table[t[i]] = -1 for key, val in table.items(): if val != 0: return False return True  Time complexity  O(n)  Space complexity ","id":55,"section":"posts","summary":"242. Valid Anagram Discription Given two strings s and t , write a function to determine if t is an anagram of s.\nExample: Input: s = \u0026quot;anagram\u0026quot;, t = \u0026quot;nagaram\u0026quot; Output: true Input: s = \u0026quot;rat\u0026quot;, t = \u0026quot;car\u0026quot; Output: false  Solution: Hash Table  Runtime: 48 ms (84.31%) Memory Usage: 13.5 MB  class Solution: def isAnagram(self, s: str, t: str) -\u0026gt; bool: if len(s) != len(t): return False length = len(s) table = {} for i in range(length): if s[i] in table: table[s[i]] += 1 else: table[s[i]] = 1 if t[i] in table: table[t[i]] -= 1 else: table[t[i]] = -1 for key, val in table.","tags":["LeetCode","DSA"],"title":"[LeetCode] 242 Valid Anagram","uri":"https://kaka-lin.github.io/2020/06/242_valid_anagram/","year":"2020"},{"content":"297. Serialize and Deserialize Binary Tree Discription Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nExample: You may serialize the following tree: 1 / \\ 2 3 / \\ 4 5 as \u0026quot;[1,2,3,null,null,4,5]\u0026quot;  Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\nNote: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\nSolution: Youtube: Serialize \u0026amp; Deserialize A Binary Tree - Crafting Recursive Solutions To Interview Problems\n Runtime: 100 ms (97.46%) Memory Usage: 18.1 MB (58.35%)  # Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Codec: def serialize(self, root: TreeNode) -\u0026gt; str: \u0026quot;\u0026quot;\u0026quot;Encodes a tree to a single string.\u0026quot;\u0026quot;\u0026quot; if root is None: return 'X' left = self.serialize(root.left) right = self.serialize(root.right) return \u0026quot;{},{},{}\u0026quot;.format(root.val, left, right) def deserialize(self, data: str) -\u0026gt; TreeNode: \u0026quot;\u0026quot;\u0026quot;Decodes your encoded data to tree.\u0026quot;\u0026quot;\u0026quot; def deserializeHelper(): val = next(datas) if val == 'X': return None node = TreeNode(int(val)) node.left = deserializeHelper() node.right = deserializeHelper() return node datas = iter(data.split(',')) return deserializeHelper() \u0026quot;\u0026quot;\u0026quot; def deserialize(self, data: str) -\u0026gt; TreeNode: datas = data.split(',') return self.deserializeHelper(datas) def deserializeHelper(self, datas: List) -\u0026gt; TreeNode: val = datas.pop(0) if val == 'X': return None node = TreeNode(int(val)) node.left = self.deserializeHelper(datas) node.right = self.deserializeHelper(datas) return node \u0026quot;\u0026quot;\u0026quot; # Your Codec object will be instantiated and called as such: # codec = Codec() # codec.deserialize(codec.serialize(root))  Time complexity Space complexity ","id":56,"section":"posts","summary":"297. Serialize and Deserialize Binary Tree Discription Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work.","tags":["LeetCode","DSA"],"title":"[LeetCode] 297 Serialize And Deserialize Binar Tree","uri":"https://kaka-lin.github.io/2020/06/297_serialize_and_deserialize_binar_tree/","year":"2020"},{"content":"344. Reverse String Discription Write a function that reverses a string. The input string is given as an array of characters char[].\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nYou may assume all the characters consist of printable ascii characters.\nExample 1: Input: [\u0026quot;h\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;o\u0026quot;] Output: [\u0026quot;o\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;h\u0026quot;]  Example 2: Input: [\u0026quot;H\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;h\u0026quot;] Output: [\u0026quot;h\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;H\u0026quot;]  Solution 1: Two Pointers  Runtime: 212 ms (70.29%) Memory Usage: 17.2 MB (100%)  class Solution: def reverseString(self, s: List[str]) -\u0026gt; None: \u0026quot;\u0026quot;\u0026quot; Do not return anything, modify s in-place instead. \u0026quot;\u0026quot;\u0026quot; prev, post = 0, len(s) - 1 while prev \u0026lt; post: s[prev], s[post] = s[post], s[prev] prev, post = prev + 1, post - 1  Time complexity  O(N)  Space complexity  O(1)  Solution 2: Pythonic class Solution: def reverseString(self, s: List[str]) -\u0026gt; None: \u0026quot;\u0026quot;\u0026quot; Do not return anything, modify s in-place instead. \u0026quot;\u0026quot;\u0026quot; s.reverse()  ","id":57,"section":"posts","summary":"344. Reverse String Discription Write a function that reverses a string. The input string is given as an array of characters char[].\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\nYou may assume all the characters consist of printable ascii characters.\nExample 1: Input: [\u0026quot;h\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;o\u0026quot;] Output: [\u0026quot;o\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;l\u0026quot;,\u0026quot;e\u0026quot;,\u0026quot;h\u0026quot;]  Example 2: Input: [\u0026quot;H\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;h\u0026quot;] Output: [\u0026quot;h\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;n\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;H\u0026quot;]  Solution 1: Two Pointers  Runtime: 212 ms (70.","tags":["LeetCode","DSA"],"title":"[LeetCode] 344 Reverse String","uri":"https://kaka-lin.github.io/2020/06/344_reverse_string/","year":"2020"},{"content":"371. Sum of Two Integers Discription Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.\nExample: Input: a = 1, b = 2 Output: 3 Input: a = -2, b = 3 Output: 1  Solution 1: Bit manipulation Ref: https://www.youtube.com/watch?v=qq64FrA2UXQ\nExplain key point\n2 -\u0026gt; 10 3 -\u0026gt; 11  explain with 1 + 3:\n 11 =\u0026gt; this is called carry 1: 001 3: 011 --- 4: 100 if we use \u0026quot;AND(\u0026amp;)\u0026quot;: 111 -\u0026gt; carry 111 111 --- 111 -\u0026gt; we can find carry if we use \u0026quot;xor(^)\u0026quot;: 1 1010 1100 ----- 0110 -\u0026gt; \u0026quot;simulating addition\u0026quot;  Conclusion:  Find carries (\u0026amp;) Do the \u0026ldquo;addition (^) left-shifted carry (\u0026laquo;)    Runtime: 32ms (93.36%) Memory Usage: 13.3 MB (14.29%)  class Solution: def getSum(self, a: int, b: int) -\u0026gt; int: if a == -b: return 0 if abs(a) \u0026gt; abs(b): a, b = b, a if a \u0026lt; 0: return -self.getSum(-a, -b) while b: carry = a \u0026amp; b a = a ^ b b = carry \u0026lt;\u0026lt; 1 return a  Solution 2: Two’s Complement of negative Ref: https://notfalse.net/20/signed-number-representations#2-Two8217s-Complement\nExplain 8bit: -128~127 =\u0026gt; 254 = -2 val = 254 -\u0026gt; 11111110 val ^ 0ff -\u0026gt; 11111111 -------- 00000001 -\u0026gt; 1, ~1 = -2    Runtime: 28ms (98.50%) Memory Usage: 13.3 MB (13.55%)  class Solution: def getSum(self, a: int, b: int) -\u0026gt; int: # 32bit: -2147483648 ~ 2147483647 MAX = 0x7FFFFFFF # 2147483647 mask = 0xFFFFFFFF while b: carry = a \u0026amp; b a = (a ^ b) \u0026amp; mask # 確保為32bit b = (carry \u0026lt;\u0026lt; 1) \u0026amp; mask # 確保為32bit # 如果a是負數，需做修正 return a if a \u0026lt;= MAX else ~(a ^ mask)  ","id":58,"section":"posts","summary":"371. Sum of Two Integers Discription Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -. Example: Input: a = 1, b = 2 Output: 3 Input: a = -2, b = 3 Output: 1 Solution 1: Bit manipulation Ref: https://www.youtube.com/watch?v=qq64FrA2UXQ Explain key point 2 -\u0026gt; 10 3 -\u0026gt; 11 explain with 1 + 3: 11 =\u0026gt; this is","tags":["LeetCode","DSA"],"title":"[LeetCode] 371 Sum Of Two Integers","uri":"https://kaka-lin.github.io/2020/06/371_sum_of_two_integers/","year":"2020"},{"content":"394. Decode String Discription Given an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\nFurthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won\u0026rsquo;t be input like 3a or 2[4].\nExample: s = \u0026quot;3[a]2[bc]\u0026quot;, return \u0026quot;aaabcbc\u0026quot;. s = \u0026quot;3[a2[c]]\u0026quot;, return \u0026quot;accaccacc\u0026quot;. s = \u0026quot;2[abc]3[cd]ef\u0026quot;, return \u0026quot;abcabccdcdcdef\u0026quot;.  Solution:  Runtime: 20ms (99.06%) Memory Usage: 12.7MB (100%)  class Solution: def decodeString(self, s: str) -\u0026gt; str: pre_string = [] repeat_stack = [] tmp_string = \u0026quot;\u0026quot; tmp_repeat = \u0026quot;\u0026quot; ans = \u0026quot;\u0026quot; balance = 0 for char in s: if (ord(char) - 48 \u0026lt; 10): tmp_repeat += char elif (char == \u0026quot;[\u0026quot;): balance += 1 repeat_stack.append(int(tmp_repeat)) pre_string.append(tmp_string) tmp_repeat = \u0026quot;\u0026quot; tmp_string = \u0026quot;\u0026quot; elif (char == \u0026quot;]\u0026quot;): balance -=1 if balance != 0: tmp_string = pre_string.pop() + tmp_string * repeat_stack.pop() else: ans = ans + pre_string.pop() + tmp_string * repeat_stack.pop() tmp_string = \u0026quot;\u0026quot; else: tmp_string += char ans += tmp_string return ans  Time complexity  O(n)  Space complexity  O(n)  ","id":59,"section":"posts","summary":"394. Decode String Discription Given an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.\nFurthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k.","tags":["LeetCode","DSA"],"title":"[LeetCode] 394 Decode String","uri":"https://kaka-lin.github.io/2020/06/394_decode_string/","year":"2020"},{"content":"509. Fibonacci Number Discription Example 1: Input: 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.  Example 2: Input: 4 Output: 3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.  Solution: Top-Down  Runtime: 24 ms (95.55%) Memory Usage: 12.7 MB (100%)  class Solution: def fib(self, N: int) -\u0026gt; int: if N \u0026lt;= 1: return N cache = {0: 0, 1: 1} for i in range(2, N+1): cache[i] = cache[i-1] + cache[i-2] return cache[N]  Time complexity  O(N)  Space complexity  O(N)  ","id":60,"section":"posts","summary":"509. Fibonacci Number Discription Example 1: Input: 2 Output: 1 Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.  Example 2: Input: 4 Output: 3 Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.  Solution: Top-Down  Runtime: 24 ms (95.55%) Memory Usage: 12.7 MB (100%)  class Solution: def fib(self, N: int) -\u0026gt; int: if N \u0026lt;= 1: return N cache = {0: 0, 1: 1} for i in range(2, N+1): cache[i] = cache[i-1] + cache[i-2] return cache[N]  Time complexity  O(N)  Space complexity  O(N)  ","tags":["LeetCode","DSA"],"title":"[LeetCode] 509 Fibonacci Number","uri":"https://kaka-lin.github.io/2020/06/509_fibonacci_number/","year":"2020"},{"content":"542. 01 Matrix Discription Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.\nExample 1: Input: [[0,0,0], [0,1,0], [0,0,0]] Output: [[0,0,0], [0,1,0], [0,0,0]]  Example 2: Input: [[0,0,0], [0,1,0], [1,1,1]] Output: [[0,0,0], [0,1,0], [1,2,1]]  Solution:  Runtime: 656 ms (82.67%) Memory Usage: 14.7 MB (100%)  class Solution: def updateMatrix(self, matrix: List[List[int]]) -\u0026gt; List[List[int]]: m, n = len(matrix), len(matrix[0]) for i in range(m): for j in range(n): if matrix[i][j] == 1: d = self.bfs(matrix, i, j) matrix[i][j] = d return matrix def bfs(self, matrix, r, c): queue, visited = [], [] depth = 0 queue.append((r, c, depth)) visited.append((r, c, depth)) directions = [(0,1), (0,-1), (1,0), (-1,0)] while queue: r, c, dep = queue.pop(0) for d in directions: x = r + d[0] y = c + d[1] if x \u0026lt; 0 or x \u0026gt;= len(matrix) or y \u0026lt; 0 or y \u0026gt;= len(matrix[0]): continue else: if (x, y) not in visited: if matrix[x][y] == 0: return dep + 1 queue.append((x, y, dep + 1)) visited.append((x, y, dep + 1))  Time complexity  O(row * column)  Space complexity  O(row * column)  ","id":61,"section":"posts","summary":"542. 01 Matrix Discription Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.\nExample 1: Input: [[0,0,0], [0,1,0], [0,0,0]] Output: [[0,0,0], [0,1,0], [0,0,0]]  Example 2: Input: [[0,0,0], [0,1,0], [1,1,1]] Output: [[0,0,0], [0,1,0], [1,2,1]]  Solution:  Runtime: 656 ms (82.67%) Memory Usage: 14.7 MB (100%)  class Solution: def updateMatrix(self, matrix: List[List[int]]) -\u0026gt; List[List[int]]: m, n = len(matrix), len(matrix[0]) for i in range(m): for j in range(n): if matrix[i][j] == 1: d = self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 542 01 Matrix","uri":"https://kaka-lin.github.io/2020/06/542_01_matrix/","year":"2020"},{"content":"557. Reverse Words in a String III Discription Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\nExample: Input: \u0026quot;Let's take LeetCode contest\u0026quot; Output: \u0026quot;s'teL ekat edoCteeL tsetnoc\u0026quot;  Note: In the string, each word is separated by single space and there will not be any extra space in the string.\nSolution 1:  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def reverseWords(self, s: str) -\u0026gt; str: ans = \u0026quot;\u0026quot; for sub_s in s.split(\u0026quot; \u0026quot;): ans += self.helper(sub_s) ans += \u0026quot; \u0026quot; return ans[:-1] def helper(self, sub_s: str) -\u0026gt; str: if not sub_s: return \u0026quot;\u0026quot; sub_ans = self.helper(sub_s[1:]) return sub_ans + sub_s[0]  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Pythonic  Runtime: 28 ms (85.62%) Memory Usage: 13.2 MB (96.15%)  class Solution: def reverseWords(self, s: str) -\u0026gt; str: return \u0026quot; \u0026quot;.join(x[::-1] for x in s.split())  ","id":62,"section":"posts","summary":"557. Reverse Words in a String III Discription Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\nExample: Input: \u0026quot;Let's take LeetCode contest\u0026quot; Output: \u0026quot;s'teL ekat edoCteeL tsetnoc\u0026quot;  Note: In the string, each word is separated by single space and there will not be any extra space in the string.\nSolution 1:  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def reverseWords(self, s: str) -\u0026gt; str: ans = \u0026quot;\u0026quot; for sub_s in s.","tags":["LeetCode","DSA"],"title":"[LeetCode] 557 Reverse Words In A String Iii","uri":"https://kaka-lin.github.io/2020/06/557_reverse_words_in_a_string_iii/","year":"2020"},{"content":"617. Merge Two Binary Trees Discription Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.\nExample: Input: Tree 1 Tree 2 1 2 / \\ / \\ 3 2 1 3 / \\ \\ 5 4 7 Output: Merged tree: 3 / \\ 4 5 / \\ \\ 5 4 7  Solution: Recursion  Runtime: ms (%) Memory Usage: MB (%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def mergeTrees(self, t1: TreeNode, t2: TreeNode) -\u0026gt; TreeNode: if t1 is None: return t2 if t2 is None: return t1 t1.val += t2.val t1.left = self.mergeTrees(t1.left, t2.left) t1.right = self.mergeTrees(t1.right, t2.right) return t1  Time complexity  O(m), A total of mm nodes need to be traversed. Here, mm represents the minimum number of nodes from the two given trees.  Space complexity  O(m), The depth of the recursion tree can go upto mm in the case of a skewed tree. In average case, depth will be O(logm)  ","id":63,"section":"posts","summary":"617. Merge Two Binary Trees Discription Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.\nYou need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.","tags":["LeetCode","DSA"],"title":"[LeetCode] 617 Merge Two Binary Trees","uri":"https://kaka-lin.github.io/2020/06/617_merge_two_binary_trees/","year":"2020"},{"content":"700. Search in a Binary Search Tree Discription Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node\u0026rsquo;s value equals the given value. Return the subtree rooted with that node. If such node doesn\u0026rsquo;t exist, you should return NULL.\nExample: Given the tree: 4 / \\ 2 7 / \\ 1 3 And the value to search: 2  You should return this subtree:\n 2 / \\ 1 3  Solution:  Runtime: 64 ms (98.54%) Memory Usage: 14.8 MB (100%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def searchBST(self, root: TreeNode, val: int) -\u0026gt; TreeNode: while root: if val == root.val: return root elif val \u0026gt; root.val: root = root.right else: root = root.left return None  Time complexity  O(N)  Space complexity  O(1)  ","id":64,"section":"posts","summary":"700. Search in a Binary Search Tree Discription Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node\u0026rsquo;s value equals the given value. Return the subtree rooted with that node. If such node doesn\u0026rsquo;t exist, you should return NULL.\nExample: Given the tree: 4 / \\ 2 7 / \\ 1 3 And the value to search: 2  You should return this subtree:","tags":["LeetCode","DSA"],"title":"[LeetCode] 700 Search In A Binary Search Tree","uri":"https://kaka-lin.github.io/2020/06/700_search_in_a_binary_search_tree/","year":"2020"},{"content":"733. Flood Fill Discription An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\nGiven a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, \u0026ldquo;flood fill\u0026rdquo; the image.\nTo perform a \u0026ldquo;flood fill\u0026rdquo;, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. Replace the color of all of the aforementioned pixels with the newColor.\nAt the end, return the modified image.\nExample: Input: image = [[1,1,1],[1,1,0],[1,0,1]] sr = 1, sc = 1, newColor = 2 Output: [[2,2,2],[2,2,0],[2,0,1]] Explanation: From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected by a path of the same color as the starting pixel are colored with the new color. Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.  Solution:  Runtime: 68 ms (99.54%) Memory Usage: 12.6 MB (100%)  class Solution: def floodFill(self, image: List[List[int]], sr: int, sc: int, newColor: int) -\u0026gt; List[List[int]]: queue = [] visited = [] originColor = image[sr][sc] image[sr][sc] = newColor queue.append((sr, sc)) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] while queue: r, c = queue.pop(0) for d in directions: x = r + d[0] y = c + d[1] if x \u0026lt; 0 or x \u0026gt;= len(image) or y \u0026lt; 0 or y \u0026gt;= len(image[0]) or image[x][y] != originColor: continue else: if (x, y) not in visited: queue.append((x, y)) visited.append((x, y)) image[x][y] = newColor return image  Time complexity  O(N)  Space complexity  O(N)  ","id":65,"section":"posts","summary":"733. Flood Fill Discription An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).\nGiven a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, \u0026ldquo;flood fill\u0026rdquo; the image.\nTo perform a \u0026ldquo;flood fill\u0026rdquo;, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.","tags":["LeetCode","DSA"],"title":"[LeetCode] 733 Flood Fill","uri":"https://kaka-lin.github.io/2020/06/733_flood_fill/","year":"2020"},{"content":"841. Keys and Rooms Discription There are N rooms and you start in room 0. Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room.\nFormally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length. A key rooms[i][j] = v opens the room with number v.\nInitially, all the rooms start locked (except for room 0).\nYou can walk back and forth between rooms freely.\nReturn true if and only if you can enter every room.\nExample 1: Input: [[1],[2],[3],[]] Output: true Explanation: We start in room 0, and pick up key 1. We then go to room 1, and pick up key 2. We then go to room 2, and pick up key 3. We then go to room 3. Since we were able to go to every room, we return true.  Example 2: Input: [[1,3],[3,0,1],[2],[0]] Output: false Explanation: We can't enter the room with number 2.  Solution:  Runtime: 60 ms (97.92%) Memory Usage: 13 MB (100%)  class Solution: def canVisitAllRooms(self, rooms: List[List[int]]) -\u0026gt; bool: queue = [0] visited = set() visited.add(0) while queue: key = queue.pop(0) for get_key in rooms[key]: if get_key not in visited and get_key \u0026lt; len(rooms): visited.add(get_key) queue.append(get_key) if len(visited) == len(rooms): return True return len(visited) == len(rooms)  Time complexity  O(N+E)  Space complexity  O(N)  ","id":66,"section":"posts","summary":"841. Keys and Rooms Discription There are N rooms and you start in room 0. Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room.\nFormally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length. A key rooms[i][j] = v opens the room with number v.","tags":["LeetCode","DSA"],"title":"[LeetCode] 841 Keys And Rooms","uri":"https://kaka-lin.github.io/2020/06/841_keys_and_rooms/","year":"2020"},{"content":"876. Middle of the Linked List Discription Given a non-empty, singly linked list with head node head, return a middle node of linked list.\nIf there are two middle nodes, return the second middle node.\nNote:  The number of nodes in the given list will be between 1 and 100.  Example: Input: [1,2,3,4,5] Output: Node 3 from this list (Serialization: [3,4,5]) The returned node has value 3. (The judge's serialization of this node is [3,4,5]). Note that we returned a ListNode object ans, such that: ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. Input: [1,2,3,4,5,6] Output: Node 4 from this list (Serialization: [4,5,6]) Since the list has two middle nodes with values 3 and 4, we return the second one.  Solution 1: Output to Array  Runtime: 28ms (97.95%) Memory Usage: 13.1MB (75.48%)  # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def middleNode(self, head: ListNode) -\u0026gt; ListNode: table = [] while head: table.append(head) head = head.next return table[(len(table) // 2)]  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Fast and Slow Pointer Ref: https://www.youtube.com/watch?v=UitXxwVeOrk\n","id":67,"section":"posts","summary":"876. Middle of the Linked List Discription Given a non-empty, singly linked list with head node head, return a middle node of linked list.\nIf there are two middle nodes, return the second middle node.\nNote:  The number of nodes in the given list will be between 1 and 100.  Example: Input: [1,2,3,4,5] Output: Node 3 from this list (Serialization: [3,4,5]) The returned node has value 3. (The judge's serialization of this node is [3,4,5]).","tags":["LeetCode","DSA"],"title":"[LeetCode] 876 Middle Of The Linked List","uri":"https://kaka-lin.github.io/2020/06/876_middle_of_the_linked_list/","year":"2020"},{"content":"905. Sort Array By Parity Discription Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.\nYou may return any answer array that satisfies this condition.\nExample: Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.  Note:  1 \u0026lt;= A.length \u0026lt;= 5000 0 \u0026lt;= A[i] \u0026lt;= 5000  Solution 1: Two Pass  Runtime: 76 ms (91.65%) Memory Usage: 13.4 MB (98.70%)  class Solution: def sortArrayByParity(self, A: List[int]) -\u0026gt; List[int]: even = [] odd = [] for i in A: if i % 2 == 0: even.append(i) else: odd.append(i) return even + odd  Time complexity  O(n)  Space complexity  O(n)  Solution 2: Sort  Runtime: 72 ms (98.05%) Memory Usage: 13.3 MB (98.70%)  class Solution: def sortArrayByParity(self, A: List[int]) -\u0026gt; List[int]: A.sort(key = lambda x: x % 2) return A  Time complexity  O(nlogn)  Space complexity  O(n)  ","id":68,"section":"posts","summary":"905. Sort Array By Parity Discription Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.\nYou may return any answer array that satisfies this condition.\nExample: Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.  Note:  1 \u0026lt;= A.length \u0026lt;= 5000 0 \u0026lt;= A[i] \u0026lt;= 5000  Solution 1: Two Pass  Runtime: 76 ms (91.","tags":["LeetCode","DSA"],"title":"[LeetCode] 905 Sort Array By Parity","uri":"https://kaka-lin.github.io/2020/06/905_sort_array_by_parity/","year":"2020"},{"content":"912. Sort an Array  Merge Sort  Discription Given an array of integers nums, sort the array in ascending order.\nExample: Input: nums = [5,2,3,1] Output: [1,2,3,5] Input: nums = [5,1,1,2,0,0] Output: [0,0,1,1,2,5]  Constraints  1 \u0026lt;= nums.length \u0026lt;= 50000 -50000 \u0026lt;= nums[i] \u0026lt;= 50000  Solution 1: Merge Sort (Top-down Approach (Recursion))  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def sortArray(self, nums: List[int]) -\u0026gt; List[int]: if len(nums) \u0026lt;= 1: return nums mid = len(nums) // 2 left = self.sortArray(nums[:mid]) right = self.sortArray(nums[mid:]) return self.merge(left, right) def merge(self, left, right): result = [] while left and right: if left[0] \u0026lt;= right[0]: result.append(left.pop(0)) else: result.append(right.pop(0)) if left: result += left if right: result += right return result  Time complexity Space complexity Solution 2: Merge Sort (Bottom-up Approach (Iteratively)))  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def sortArray(self, nums: List[int]) -\u0026gt; List[int]: length = len(nums) size = 1 result = nums while size \u0026lt; length: for index in range(0, length, size * 2): left = result[index : index + size] right = result[index + size : index + size * 2] result[index : index + size * 2] = self.merge(left, right) size *= 2 return result def merge(self, left, right): result = [] while left and right: if left[0] \u0026lt;= right[0]: result.append(left.pop(0)) else: result.append(right.pop(0)) if left: result += left if right: result += right return result  Time complexity Space complexity ","id":69,"section":"posts","summary":"912. Sort an Array  Merge Sort  Discription Given an array of integers nums, sort the array in ascending order.\nExample: Input: nums = [5,2,3,1] Output: [1,2,3,5] Input: nums = [5,1,1,2,0,0] Output: [0,0,1,1,2,5]  Constraints  1 \u0026lt;= nums.length \u0026lt;= 50000 -50000 \u0026lt;= nums[i] \u0026lt;= 50000  Solution 1: Merge Sort (Top-down Approach (Recursion))  Runtime: ms (%) Memory Usage: MB (%)  class Solution: def sortArray(self, nums: List[int]) -\u0026gt; List[int]: if len(nums) \u0026lt;= 1: return nums mid = len(nums) // 2 left = self.","tags":["LeetCode","DSA"],"title":"[LeetCode] 912 Sort An Array","uri":"https://kaka-lin.github.io/2020/06/912_sort_an_array/","year":"2020"},{"content":"938. Range Sum of BST Discription Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).\nThe binary search tree is guaranteed to have unique values.\nExample: Input: root = [10,5,15,3,7,null,18], L = 7, R = 15 Output: 32 Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10 Output: 23  Solution: Depth First Search  Runtime: 212 ms (93.81%) Memory Usage: 20.5 MB (100%)  # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def rangeSumBST(self, root: TreeNode, L: int, R: int) -\u0026gt; int: self.sum_val = 0 self.dfs(root, L, R) return self.sum_val def dfs(self, root, L, R): if root: if L \u0026lt;= root.val and root.val \u0026lt;= R: self.sum_val += root.val if root.val \u0026gt; L: self.dfs(root.left, L, R) if root.val \u0026lt; R: self.dfs(root.right, L, R)  Time complexity  O(N), where N is the number of nodes in the tree.  Space complexity  O(H), where H is the height of the tree.  ","id":70,"section":"posts","summary":"938. Range Sum of BST Discription Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).\nThe binary search tree is guaranteed to have unique values.\nExample: Input: root = [10,5,15,3,7,null,18], L = 7, R = 15 Output: 32 Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10 Output: 23  Solution: Depth First Search  Runtime: 212 ms (93.","tags":["LeetCode","DSA"],"title":"[LeetCode] 938 Range Sum Of Bs","uri":"https://kaka-lin.github.io/2020/06/938_range_sum_of_bs/","year":"2020"},{"content":"Python Basics Interactive Shell Compiled language v.s. Interpreted language   Compiled language (編譯語言)\nThrough compiler convert source code into machine code and execute it.\n C/C++ Go Rust    Interpreted language (直譯語言)\nExecute the code step-by-step.\n Python JavaScript Ruby PHP    Python Interactive Shell Python is a Interpreted language. It means it excutes the code line by line.\nPython provides a Python Shell (Python Interactive Shell) which is used to execute a single Python command and get the result.\n Open terminal  # or python3 $ python  Then you will see the figure below  Now, you can type a single statement and get the result  Python Comments Comments can be used to explain code, make the code more readable.\n #: single line \u0026quot;\u0026quot;\u0026quot; \u0026quot;\u0026quot;\u0026quot;: multiple lines  Examples:\n# This is a comment print('Hello world') \u0026quot;\u0026quot;\u0026quot; This is a comment written in more than just one line \u0026quot;\u0026quot;\u0026quot; print('Hello world')  Python Expressions: Math Operators # Addition: Integer 2 + 3 # 5  # Addition: Floating point \u0026amp; Floating point -\u0026gt; Floating point 2.0 + 3.0 # 5.0  # Addition: Floating point \u0026amp; Integet -\u0026gt; Floating point 2.0 + 3 # 5.0  # Multiplication 3 * 2 # 6  # Exponent 2 ** 5 # 32  Exercise Suppose you have $100, which you can invets with a 10% return each year. After one year, it's 100 x 1.1 = 110 dollars, and after two years it's 100 x 1.1 x 1.1 = 121.  Add code to calculate how much money you end up with after 7 years, and print the result.\n# Click below for a solution return_money = 100 * (1.1 ** 7) return_money  [Out]: 194.87171000000012  Display the Output Builtin-in function print() serves as an output statement in Python.\n# type 1. print(\u0026quot;Hello World!\u0026quot;) # type 2. print(\u0026quot;Hello\u0026quot; + \u0026quot; World1\u0026quot;) # type 3. text = \u0026quot;world!\u0026quot; print(\u0026quot;Hello\u0026quot;, text) # type 4. text = \u0026quot;world!\u0026quot; print(\u0026quot;Hello {}\u0026quot;.format(text))  Hello World! Hello World1 Hello world! Hello world!  Getting the User\u0026rsquo;s Input The input() function is part of the core library of standard Python distribution.\nIt reads the key strokes as a string object which can be referred to by a variable having a suitable name.\n_input = input() print(\u0026quot;input: {}, type: {}\u0026quot;.format(_input, type(_input)))  123 input: 123, type: \u0026lt;class 'str'\u0026gt;  name = input(\u0026quot;Enter your name: \u0026quot;) print(\u0026quot;Welcome, {}\u0026quot;.format(name))  Enter your name: kaka Welcome, kaka  Variables Variables are containers for storing data values. In order to conveniently repeatedly refer to the store value, it is given a suitable name.\n Specific, case-sensitive name Call up value through variable name  A value is bound to a name by the assignment operator =\nExample Height 1.75m, Weight 68.7kg, Calculate BMI\nheight = 1.75 weight = 68.7 bmi = weight / (height ** 2) print(\u0026quot;BMI: {}\u0026quot;.format(bmi))  Data Types Variables can store data of different types, and different types can do different things.\nA data type is a category for values, and every value belongs to exactly one data type.\nPython has the following standard or built-in data types:\nNumeric  Integets (int): 1, 0, 1 Float (float): -1.25, -0.5, 0.0, 1.25 Complex (complex): 1j  Boolean Data with one of two built-in values True or False.\nSequence   Strings (str):\nString literals in python are surrounded by either single quotation marks, or double quotation marks.\n\u0026lsquo;Hello\u0026rsquo; is the same as \u0026ldquo;Hello\u0026rdquo;.\nExample:\na = 'Hello Wrold!'    list:\nList is a collention which is ordered and changeable. Allow duplicate members.\nExample:\na = ['Hello', 'World', '!']    tuple: Tuple is a collention which is ordered and unchangeable. Allow duplicate members.\nExample:\na = ('Hello', 'World', '!')    Dictionary Dictionary is a collention which is unordered, changeable and indexed. No duplicate members.\nExample:\na = {\u0026quot;name\u0026quot;: \u0026quot;kaka\u0026quot;, \u0026quot;age\u0026quot;: 28}  Storing Values in Variables Assignment 在程式語言的世界裡，=代表的是指定(assignment)的意思\n例如：x = 7 就是把7這個物件指定給x這個變數，換句話說也就是把x這個變數指向(綁定)7這個物件，如下圖所示：\nx = 7 x  [Out]: 7  x = 7 y = x y  [Out]: 7  x = 8 print(\u0026quot;x =\u0026quot;, x, \u0026quot;y =\u0026quot;, y)  [Out]: x = 8 y = 7  Pyhton Assignmes: Bindding # Fist, we see an example as below: x = [1, 2, 3] y = x x[1] = 100 print(\u0026quot;x: \u0026quot;, x) print(\u0026quot;y: \u0026quot;, y)  x: [1, 100, 3] y: [1, 100, 3]  Explain Python的=實際上是 binds an object reference to an object\nx = [1, 2, 3]  X ----\u0026gt; [1 2 3]   y = x  x ---\u0026gt; [1 2 3] ^ | y ------   x[1] = 100  x ---\u0026gt; [100 2 3] ^ | y ------  Your First Program  Referece: Automate the Boring Stuff with Python  # This program says hello and asks for my name and age. print('Hello World!') print('What is your name?') print('------------------') name = input() print('It is good to meet you, ' + name) print('The length of your name is: ', len(name)) print('What is your age?') age = input() print('------------------') print('You will be ' + str(int(age) + 1) + ' in a year')  Hello World! What is your name? ------------------ kaka It is good to meet you, kaka The length of your name is: 4 What is your age? 28 ------------------ You will be 29 in a year  ","id":71,"section":"posts","summary":"Python Basics Interactive Shell Compiled language v.s. Interpreted language Compiled language (編譯語言) Through compiler convert source code into machine code and execute it. C/C++ Go Rust Interpreted language (直譯語言) Execute the code step-by-step. Python JavaScript Ruby PHP Python Interactive Shell Python is a Interpreted language. It means it excutes the code line by line. Python provides a Python Shell (Python","tags":["Python"],"title":"[Python] Ch1: Python Basics - 01 Python Basics","uri":"https://kaka-lin.github.io/2020/06/01_python_basics/","year":"2020"},{"content":"Flow Control Python if ... else The general syntax for Python\u0026rsquo;s if statement is this:\nif condition1: # statement1 for True condition1 elif condition2 : # statement2 for True condition2 elif condition3 : # statement3 for True condition3 else: # statements for each condition False  score = int(input(\u0026quot;請輸入成績\u0026quot;)) if score \u0026gt;= 60: print(\u0026quot;成績及格!\u0026quot;) else: print(\u0026quot;不及格，被當了!\u0026quot;)  請輸入成績45 不及格，被當了!  # Click below for a solution score = int(input(\u0026quot;score: \u0026quot;)) if score \u0026gt;= 90: print('Grade is: A') elif score \u0026gt;= 80: print('Grade is: B') elif score \u0026gt;= 70: print('Grade is: C') elif score \u0026gt;= 60: print('Grade is: D') else: print('Grade is: F')  score: 90 Grade is: A  Python for  loops Python\u0026rsquo;s for loop reuses the in keyword, and has the following syntax:\nfor variable in iterable: # suite  sequences = [0, 1, 2, 3, 4] for i in sequences: print(i)  0 1 2 3 4  countries = ['Denmark', 'Finland', 'Norway', 'Sweden', 'Taiwan'] for country in countries: print(country)  Denmark Finland Norway Sweden Taiwan  for i in range(10): print(i, end=' ')  0 1 2 3 4 5 6 7 8 9  Nested for loops # 99乘法表 for i in range(1, 10): for j in range(1, 10): if j == 9: print('\\t', i * j) else: print('\\t', i * j, end=' ')   1 2 3 4 5 6 7 8 9 2 4 6 8 10 12 14 16 18 3 6 9 12 15 18 21 24 27 4 8 12 16 20 24 28 32 36 5 10 15 20 25 30 35 40 45 6 12 18 24 30 36 42 48 54 7 14 21 28 35 42 49 56 63 8 16 24 32 40 48 56 64 72 9 18 27 36 45 54 63 72 81  Python while loops The while statement is used to execute a suite zero or more times, the number of times depending on the state of the while loop\u0026rsquo;s condition. Here\u0026rsquo;s the syntax:\nwhile boolean_expression: # Body of while  i = 1 while i \u0026lt;= 10: print(i, end=' ') i += 1  1 2 3 4 5 6 7 8 9 10  break and continue # break i = 0 while True: i += 1 if i == 10: break print(i, end=' ')  1 2 3 4 5 6 7 8 9  # continue i = 0 while i \u0026lt; 10: i += 1 if i == 4: continue print(i, end=' ')  1 2 3 5 6 7 8 9 10  Exercise: Guessing Game import random number = random.randint(1, 100) print('Guess the number!') while True: print('Please enter your guess:') guess = int(input()) if guess == number: print('Good job') break elif guess \u0026lt; number: print('Your guess is too low') else: print('Your guess is too heigh')  ","id":72,"section":"posts","summary":"Flow Control Python if ... else The general syntax for Python\u0026rsquo;s if statement is this: if condition1: # statement1 for True condition1 elif condition2 : # statement2 for True condition2 elif condition3 : # statement3 for True condition3 else: # statements for each condition False score = int(input(\u0026quot;請輸入成績\u0026q","tags":["Python"],"title":"[Python] Ch1: Python Basics - 02 Flow Control","uri":"https://kaka-lin.github.io/2020/06/02_flow_control/","year":"2020"},{"content":"List 串列 List 用來儲存一連串有順序的資料，如：\ncountries = ['Taiwan', 'Janpan', 'America'] print(countries)  ['Taiwan', 'Janpan', 'America']  取得 List 裡有幾個元素: len() length = len(countries) length  [Out]: 3  取得List 裡的元素 list_name[index]  countries[0]  [Out]: 'Taiwan'  取得最後一個元素 list[-1]  print(countries[-1])  [Out]: America  list.index(x[, start[, end]])  範圍取值: list slicing list[start_index:end_index:sep]  countries[0:1]  [Out]: ['Taiwan']  countries[::3]  [Out]: ['Taiwan']  增加 List 裡面的元素 append method list.append(object)  將一個新的元素加到 list 的尾端。\ncountries.append('Korea') countries  ['Taiwan', 'Janpan', 'America', 'Korea']  insert method list.insert(position, object)  將一個新的元素加到指定的 list 位置。\ncountries.insert(-1, 'China') countries  ['Taiwan', 'Janpan', 'America', 'China', 'Korea']  extend method list_1 = [object1, object2, object3, ...] list_2 = [object0] list_2.extend(list_1)  countries_2 = ['Malaysia', 'Singapore'] countries.extend(countries_2) countries  ['Taiwan', 'Janpan', 'America', 'China', 'Korea', 'Malaysia', 'Singapore']  移除 List 裡的元素 remove method list.remove(object)  countries.remove('China') countries  ['Taiwan', 'Janpan', 'America', 'Korea', 'Malaysia', 'Singapore']  pop method list.pop(index)  如果括號內不指定index, 預設是最後一個元素(-1)\ncountries.pop() countries  ['Taiwan', 'Janpan', 'America', 'Korea', 'Malaysia']  List 與 for-loop for item in list: print(item)  for country in countries: print(country, end=', ')  Taiwan, Janpan, America, Korea, Malaysia,  用 for-loop 來建立 List temp = [] for i in range(10): temp.append(i ** 2) temp  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  pyhonic a = [x ** 2 for x in range(10)] a  [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]  b = [1, 2, 3, 4, 5, 6, 7, 8, 9] c = [x ** 2 for x in b] c  [1, 4, 9, 16, 25, 36, 49, 64, 81]  ","id":73,"section":"posts","summary":"List 串列 List 用來儲存一連串有順序的資料，如： countries = ['Taiwan', 'Janpan', 'America'] print(countries) ['Taiwan', 'Janpan', 'America'] 取得 List 裡有幾個元素: len() length = len(countries) length [Out]: 3 取得List 裡的元素 list_name[index] countries[0] [Out]: 'Taiwan' 取得最後一個元素 list[-1] print(countries[-1])","tags":["Python"],"title":"[Python] Ch1: Python Basics - 03 List","uri":"https://kaka-lin.github.io/2020/06/03_list/","year":"2020"},{"content":"Dictionary 字典 在字典裡，皆由key(鍵)和value(值)組成\ndict = {key1 : value1, key2 : value2 }  kaka = {'firstname':'lin', 'age': 28, 'height': 175} print(kaka)  {'firstname': 'lin', 'age': 28, 'height': 175}  取得 Dictionary 裡有幾個元素: len() print(len(kaka))  [Out]: 3  取得 Dictionay 裡的資料 透過key來取得相對應的value\ndict[key] -\u0026gt; return value  kaka['age']  [Out]: 28  取得 Dictionary 裡的所有 key dict.keys()  kaka.keys()  dict_keys(['firstname', 'age', 'height'])  取得 Dictionary 裡的所有 value dict.values()  kaka.values()  dict_values(['lin', 28, 175])  取得 Dictionary 裡的所有資料 dict.items()  kaka.items()  dict_items([('firstname', 'lin'), ('age', 28), ('height', 175)])  增加 Dictionary 裡的資料 dict[new_key] = value  kaka['weight'] = 68 kaka  {'firstname': 'lin', 'age': 28, 'height': 175, 'weight': 68}  更新 Dictionary 裡的資料 dict[key] = new_value  kaka['weight'] = 70 kaka  {'firstname': 'lin', 'age': 28, 'height': 175, 'weight': 70}  移除 Dictionary 裡的資料 del method del dict[key]  del kaka['weight'] kaka  {'firstname': 'lin', 'age': 28, 'height': 175}  pop method dict.pop(key)  kaka['weight'] = 70 kaka  {'firstname': 'lin', 'age': 28, 'height': 175, 'weight': 70}  kaka.pop('weight') kaka  {'firstname': 'lin', 'age': 28, 'height': 175}  檢查指定的key是否存在於Dictionary中 key in dict -\u0026gt; return True 或是 False  'firstname' in kaka  [Out]: True  'weight' in kaka  [Out]: False  Dictionary 與 for-loop for k, v in kaka.items(): print('{}: {}'.format(k, v))  firstname: lin age: 28 height: 175  用 for-loop 來建立 Dictionary temp = {} for i in range(10): temp[i] = i ** 2 temp  {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}  pyhonic a = {x: x ** 2 for x in range(10)} a  {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}  ","id":74,"section":"posts","summary":"Dictionary 字典 在字典裡，皆由key(鍵)和value(值)組成 dict = {key1 : value1, key2 : value2 } kaka = {'firstname':'lin', 'age': 28, 'height': 175} print(kaka) {'firstname': 'lin', 'age': 28, 'height': 175} 取得 Dictionary 裡有幾個元素: len() print(len(kaka)) [Out]: 3 取得 Dictionay 裡的資","tags":["Python"],"title":"[Python] Ch1: Python Basics - 04 Dictionary","uri":"https://kaka-lin.github.io/2020/06/04_dictionary/","year":"2020"},{"content":"Function 函式 def 函式名稱(參數): 程式碼  def printf(text): print(\u0026quot;[Out]: {}\u0026quot;.format(text))  printf('Hello world!')  [Out]: Hello world!  閏年 根據維基百科，分辨平閏年的方法為：\n 公元年份除以4不可整除，為平年。 公元年份除以4可整除但除以100不可整除，為閏年。 公元年份除以100可整除但除以400不可整除，為平年。 公元年份除以400可以整除為閏年  def check_leap_year(year): if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0): print(\u0026quot;閏年\u0026quot;) return 1 else: print(\u0026quot;平年\u0026quot;) return 0  year = int(input()) print(check_leap_year(1377))  1344 平年 0  ","id":75,"section":"posts","summary":"Function 函式 def 函式名稱(參數): 程式碼 def printf(text): print(\u0026quot;[Out]: {}\u0026quot;.format(text)) printf('Hello world!') [Out]: Hello world! 閏年 根據維基百科，分辨平閏年的方法為： 公元年份除以4不可整除，為平年。 公元年份除以4可整除","tags":["Python"],"title":"[Python] Ch1: Python Basics - 05 Function","uri":"https://kaka-lin.github.io/2020/06/05_function/","year":"2020"},{"content":" title: \u0026ldquo;Common Packages\u0026rdquo; date: 2020-06-10 Install Common Packages After you installed python.\n$ pip install numpy scipy pandas matplotlib seaborn pillow scikit-learn mlxtend # or $ pip install -r requirements.txt  ","id":76,"section":"posts","summary":" title: \u0026ldquo;Common Packages\u0026rdquo; date: 2020-06-10 Install Common Packages After you installed python.\n$ pip install numpy scipy pandas matplotlib seaborn pillow scikit-learn mlxtend # or $ pip install -r requirements.txt  ","tags":null,"title":"Common Packages","uri":"https://kaka-lin.github.io/2020/06/common_packages/","year":"2020"},{"content":"Python Environment Setup Tutorials Medium: Install Python on Windows\n Windows macOS Ubuntu  ","id":77,"section":"posts","summary":"Python Environment Setup Tutorials Medium: Install Python on Windows\n Windows macOS Ubuntu  ","tags":["Python"],"title":"[Python] Ch0: Install Python","uri":"https://kaka-lin.github.io/2020/05/readme/","year":"2020"},{"content":"1. Install Package Manager   Homebrew\nIt is the package manager for macOS. Following the install step on the website to install it.\n  2. Install Python3 2-1. Homebrew $ brew install python  2-2. Miniconda 1. Download installer $ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh  2. Install # install miniconda in ~/opt $ mkdir -p ~/opt $ chmod +x Miniconda3-latest-MacOSX-x86_64.sh $ bash Miniconda3-latest-MacOSX-x86_64.sh  3. Activate conda 1. bash  Copy conda initialize in ~/.bash_profile to ~/.bashrc, as below:   Activate  $ source ~/.bashrc # or open new Terminal  2. zsh  Copy conda initialize in ~/.bash_profile to ~/.zshrc, as below:   Activate  $ source ~/.zshrc # or open new Terminal  ","id":78,"section":"posts","summary":"1. Install Package Manager   Homebrew\nIt is the package manager for macOS. Following the install step on the website to install it.\n  2. Install Python3 2-1. Homebrew $ brew install python  2-2. Miniconda 1. Download installer $ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh  2. Install # install miniconda in ~/opt $ mkdir -p ~/opt $ chmod +x Miniconda3-latest-MacOSX-x86_64.sh $ bash Miniconda3-latest-MacOSX-x86_64.sh  3. Activate conda 1. bash  Copy conda initialize in ~/.","tags":["Python"],"title":"[Python] Ch0: Install Python: Mac","uri":"https://kaka-lin.github.io/2020/05/mac/","year":"2020"},{"content":"1. Install request package $ sudo apt-get update \u0026amp;\u0026amp; apt-get upgrade $ sudo apt-get install wget vim  2. Install Python3 Miniconda\n2-1. Download installer $ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  2-2. Change the access permissions of files $ chmod +x Miniconda3-latest-Linux-x86_64.sh  2-3. Install # install miniconda in ~/opt $ mkdir -p ~/opt $ bash Miniconda3-latest-Linux-x86_64.sh  2-4. Activate conda 1. bash  Copy conda initialize in ~/.bash_profile to ~/.bashrc, as below:   Activate  $ source ~/.bashrc # or open new Terminal  ","id":79,"section":"posts","summary":"1. Install request package $ sudo apt-get update \u0026amp;\u0026amp; apt-get upgrade $ sudo apt-get install wget vim  2. Install Python3 Miniconda\n2-1. Download installer $ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  2-2. Change the access permissions of files $ chmod +x Miniconda3-latest-Linux-x86_64.sh  2-3. Install # install miniconda in ~/opt $ mkdir -p ~/opt $ bash Miniconda3-latest-Linux-x86_64.sh  2-4. Activate conda 1. bash  Copy conda initialize in ~/.bash_profile to ~/.bashrc, as below:   Activate  $ source ~/.","tags":["Python"],"title":"[Python] Ch0: Install Python: Ubuntu","uri":"https://kaka-lin.github.io/2020/05/ubuntu/","year":"2020"},{"content":"1. Install Package Manager   Chocolate\nIt is the package manager for windows. Following the install step on the website to install it.\n  2. Install More Handy Terminal   ConEmu\nUsing choco to install it.\n\u0026gt; choco install conemu    3. Install Git Bash   Git for Window\nDownload and Install it.\n  4. Open ConEmu Opening ConEmu and choose git bash, then you can use Unix-commands.\n  git bash\n  5. Install Python3   Install Miniconda3\n$ choco install miniconda3 --params=\u0026quot;'/AddToPath:1'\u0026quot;  then you can use conda and python\n  If you want to use python3.6\n$ conda install python=3.6  or create a new environment (Recommend)\n$ conda create --name py36 python=3.6    Activate the environment of py36\n   Note: Because git bash use MinTTY that doesn\u0026rsquo;t support interactive operation, If you want to use python interactive shell, you can follow the method as follows\n$ python -i  ","id":80,"section":"posts","summary":"1. Install Package Manager   Chocolate\nIt is the package manager for windows. Following the install step on the website to install it.\n  2. Install More Handy Terminal   ConEmu\nUsing choco to install it.\n\u0026gt; choco install conemu    3. Install Git Bash   Git for Window\nDownload and Install it.\n  4. Open ConEmu Opening ConEmu and choose git bash, then you can use Unix-commands.","tags":["Python"],"title":"[Python] Ch0: Install Python: Windows","uri":"https://kaka-lin.github.io/2020/05/windows/","year":"2020"},{"content":"Google Trends to Google Data Studion COVID-19 Search Trends in 2020 ","id":81,"section":"posts","summary":"Google Trends to Google Data Studion COVID-19 Search Trends in 2020 ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Data Science Visualization Matplotlib  Matplotlib 顯示中文  Windows macOS Ubuntu    ","id":82,"section":"posts","summary":"Data Science Visualization Matplotlib Matplotlib 顯示中文 Windows macOS Ubuntu","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"MySQL 1. Install database Ubuntu $ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade # install MySQL $ sudo apt install mysql-server $ sudo apt install mysql-client $ sudo apt install libmysqlclient-dev  Mac # install MySQL $ brew install openssl $ brew install mysql $ brew install mysql-connector-c  2. Install requirement packages  mysql mysqlclient  $ pip3 install mysql  ","id":83,"section":"posts","summary":"MySQL 1. Install database Ubuntu $ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade # install MySQL $ sudo apt install mysql-server $ sudo apt install mysql-client $ sudo apt install libmysqlclient-dev  Mac # install MySQL $ brew install openssl $ brew install mysql $ brew install mysql-connector-c  2. Install requirement packages  mysql mysqlclient  $ pip3 install mysql  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Database Learning Notes   Database Basics\n  SQL Style Guide\n  Relational database (關聯式資料庫)\n SQLite MySQL    Install requirement packages  jupyter SQLAlchemy ipython-sql  $ pip3 install -r requirements.txt  ","id":84,"section":"posts","summary":"Database Learning Notes Database Basics SQL Style Guide Relational database (關聯式資料庫) SQLite MySQL Install requirement packages jupyter SQLAlchemy ipython-sql $ pip3 install -r requirements.txt","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"SQLAlchemy SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.\n SQLAlchemy - Tutorial  ","id":85,"section":"posts","summary":"SQLAlchemy SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.\n SQLAlchemy - Tutorial  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"SQLite Install database Ubuntu $ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade # install SQlite $ sudo apt install sqlite3 # install MySQL $ sudo apt install mysql-server $ sudo apt install mysql-client $ sudo apt install libmysqlclient-dev  Mac # install SQLite $ brew install sqlite # install MySQL $ brew install openssl $ brew install mysql $ brew install mysql-connector-c  ","id":86,"section":"posts","summary":"SQLite Install database Ubuntu $ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade # install SQlite $ sudo apt install sqlite3 # install MySQL $ sudo apt install mysql-server $ sudo apt install mysql-client $ sudo apt install libmysqlclient-dev  Mac # install SQLite $ brew install sqlite # install MySQL $ brew install openssl $ brew install mysql $ brew install mysql-connector-c  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"DevOps DevOps = Development + Operations\nTable of Contents  CI/CD Tools  GitLab CI/CD    ","id":87,"section":"posts","summary":"DevOps DevOps = Development + Operations\nTable of Contents  CI/CD Tools  GitLab CI/CD    ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Data Structures and Algorithms, NTU Hsuan-Tien Lin This is my study notes\n Array  ","id":88,"section":"posts","summary":"Data Structures and Algorithms, NTU Hsuan-Tien Lin This is my study notes\n Array  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Climbing Stairs (Fibonacci sequence) Wiki: Fibonacci_number\nleetcode: Climbing Stairs\nDescription You are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer.\n","id":89,"section":"posts","summary":"Climbing Stairs (Fibonacci sequence) Wiki: Fibonacci_number\nleetcode: Climbing Stairs\nDescription You are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer.","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Dynamic Programming (DP) ","id":90,"section":"posts","summary":"Dynamic Programming (DP) ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"0. Template Discription Example:  Solution:  Runtime: ms (%) Memory Usage: MB (%)   Time complexity Space complexity ","id":91,"section":"posts","summary":"0. Template Discription Example:  Solution:  Runtime: ms (%) Memory Usage: MB (%)   Time complexity Space complexity ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/000_template/","year":"0001"},{"content":"LeetCode https://github.com/kaka-lin/Notes/blob/master/DSA/leetcode/python/000_template.md\n   # Title Solution Topics Difficulty     1 Tow Sum Python Array, Hash Table Easy   2 Add Tow Numbers Python Linked List, Math Medium   7 Reverse Integer Python  Easy   9 Palindrome Number Python  Easy   13 Roman to Integer Python Math, String Easy   19 Remove Nth Node From End of List Python Linked List, Two Pointers Medium   21 Merge Two Sorted Lists Python Linked List Easy   24 Swap Nodes in Pairs Python Linked List Medium   27 Remove Element Python Array, Two Pointers Easy   28 Implement strStr() Python String, Two Pointers Easy   35 Search Insert Position Python Array, Binary Search Easy   53 Maximum Subarray Python Dynamic Programming Easy   70 Climbing Stairs Python Dynamic Programming Easy   83 Remove Duplicates from Sorted List Python Linked List Easy   94 Binary Tree Inorder Traversal Python Tree Medium   98 Validate Binary Search Tree Python Binary Search Tree Medium   100 Same Tree Python Tree Easy   102 Binary Tree Level Order Traversal Python Tree, Breadth-first Search Medium   118 Pascal\u0026rsquo;s Triangle Python Array, Recursion, Dynamic Programming Easy   119 Pascal\u0026rsquo;s Triangle II Python Array, Recursion, Dynamic Programming Easy   136 Single Number Python List, Hash Table, Bit Manipulation Easy   144 Binary Tree Preorder Traversal Python Stack, Tree Medium   145 Binary Tree Postorder Traversal Python Stack, Tree Hard   160 Intersection of Two Linked Lists Python Linked List Easy   167 Two Sum II - Input array is sorted Python Array, Two Pointers, Binary Search Easy   169 Majority Element Python Array, Divide and Conquer, Bit Manipulation Easy   191 Number of 1 Bits Python Bit Manipulation Easy   202 Happy Number Python Hash Table, Math Easy   203 Remove Linked List Elements Python Linked List Easy   206 Reverse Linked List Python Linked List Easy   217 Contains Duplicate Python Array, Hash Table Easy   226 Invert Binary Tree Python Tree Easy   234 Palindrome Linked List Python Linked List, Two Pointers Easy   236 Lowest Common Ancestor of a Binary Tree Python Tree, Stack, Recursion Medium   240 Search a 2D Matrix II Python Binary Search, Divide and Conquer Medium   242 Valid Anagram Python Hash Table Easy   297 Serialize and Deserialize Binary Tree Python Tree, Stack, Recursion Hard   344 344. Reverse String Python Two Pointers, String Easy   371 Sum of Two Integers Python Bit Manipulation Easy   394 Decode String Python Stack, Depth-first Search Medium   509 Fibonacci Number Python Recursion, Dynamic Programming Easy   542 01 Matrix Python Depth-first Search, Breadth-first Search Medium   557 Reverse Words in a String III Python String Easy   617 Merge Two Binary Trees Python Tree Easy   700 Search in a Binary Search Tree Python Tree Easy   733 Flood Fill Python Depth-first Search Easy   841 Keys and Rooms Python Depth-first Search, Graph Medium   876 Middle of the Linked List Python Linked List Easy   905 Sort Array By Parity Python Array Easy   *912 Sort an Array Python Sorted Medium   938 Range Sum of BST Python Tree, Recursion Easy    ","id":92,"section":"posts","summary":"LeetCode https://github.com/kaka-lin/Notes/blob/master/DSA/leetcode/python/000_template.md\n   # Title Solution Topics Difficulty     1 Tow Sum Python Array, Hash Table Easy   2 Add Tow Numbers Python Linked List, Math Medium   7 Reverse Integer Python  Easy   9 Palindrome Number Python  Easy   13 Roman to Integer Python Math, String Easy   19 Remove Nth Node From End of List Python Linked List, Two Pointers Medium   21 Merge Two Sorted Lists Python Linked List Easy   24 Swap Nodes in Pairs Python Linked List Medium   27 Remove Element Python Array, Two Pointers Easy   28 Implement strStr() Python String, Two Pointers Easy   35 Search Insert Position Python Array, Binary Search Easy   53 Maximum Subarray Python Dynamic Programming Easy   70 Climbing Stairs Python Dynamic Programming Easy   83 Remove Duplicates from Sorted List Python Linked List Easy   94 Binary Tree Inorder Traversal Python Tree Medium   98 Validate Binary Search Tree Python Binary Search Tree Medium   100 Same Tree Python Tree Easy   102 Binary Tree Level Order Traversal Python Tree, Breadth-first Search Medium   118 Pascal\u0026rsquo;s Triangle Python Array, Recursion, Dynamic Programming Easy   119 Pascal\u0026rsquo;s Triangle II Python Array, Recursion, Dynamic Programming Easy   136 Single Number Python List, Hash Table, Bit Manipulation Easy   144 Binary Tree Preorder Traversal Python Stack, Tree Medium   145 Binary Tree Postorder Traversal Python Stack, Tree Hard   160 Intersection of Two Linked Lists Python Linked List Easy   167 Two Sum II - Input array is sorted Python Array, Two Pointers, Binary Search Easy   169 Majority Element Python Array, Divide and Conquer, Bit Manipulation Easy   191 Number of 1 Bits Python Bit Manipulation Easy   202 Happy Number Python Hash Table, Math Easy   203 Remove Linked List Elements Python Linked List Easy   206 Reverse Linked List Python Linked List Easy   217 Contains Duplicate Python Array, Hash Table Easy   226 Invert Binary Tree Python Tree Easy   234 Palindrome Linked List Python Linked List, Two Pointers Easy   236 Lowest Common Ancestor of a Binary Tree Python Tree, Stack, Recursion Medium   240 Search a 2D Matrix II Python Binary Search, Divide and Conquer Medium   242 Valid Anagram Python Hash Table Easy   297 Serialize and Deserialize Binary Tree Python Tree, Stack, Recursion Hard   344 344.","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Data Structure and Algorithms (DSA) Courses Data Structures and Algorithms, NTU Hsuan-Tien Lin\nLeetCode  LeetCode  Algorithm  Recursion Dynamic Programming  ","id":93,"section":"posts","summary":"Data Structure and Algorithms (DSA) Courses Data Structures and Algorithms, NTU Hsuan-Tien Lin\nLeetCode  LeetCode  Algorithm  Recursion Dynamic Programming  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Bitonic Champion Problem   Input: A bitonic sequence A[1], A[2], \u0026hellip;, A[n] for distinct positive integers.\n  Output: the index $i$ with $1 {\\leq} i {\\leq} n$ such that\n$$A[i] = \\max_{1 {\\leq} j {\\leq} n} A[j]$$\n  Bitonic sequence The bitonic sequence means \u0026quot;increasing\u0026quot; before the champion and \u0026quot;decreasing\u0026quot; after the champion  Exmaple\n3 7 9 17 35 28 21 18 6 4  Bitonic Champion Problem Complexity   Upper bound: $O(logn)$\n  Lower bound: $\\Omega(logn)$\n  ","id":94,"section":"posts","summary":"Bitonic Champion Problem   Input: A bitonic sequence A[1], A[2], \u0026hellip;, A[n] for distinct positive integers.\n  Output: the index $i$ with $1 {\\leq} i {\\leq} n$ such that\n$$A[i] = \\max_{1 {\\leq} j {\\leq} n} A[j]$$\n  Bitonic sequence The bitonic sequence means \u0026quot;increasing\u0026quot; before the champion and \u0026quot;decreasing\u0026quot; after the champion  Exmaple\n3 7 9 17 35 28 21 18 6 4  Bitonic Champion Problem Complexity   Upper bound: $O(logn)$","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Maximum Subarray Problem   Input: A sequence A[1], A[2], \u0026hellip;, A[n] of integers.\n  Output: Two indicex $i$ and $j$ with $1 {\\leq} i {\\leq} j {\\leq} n$ that maximize\n$$A[i] + A[i+1] + \\cdots + A[j]$$\n  Solution 1. Divide and Conquer  Base case (n = 1)  Return itself (maximum subarray)   Recursive case (n \u0026gt; 1)  Divide the array into two sub-arrays Find the maximum sub-array recuresively Merge the result    Bitonic Champion Problem Complexity   Upper bound: $O(n)$\n  Lower bound: $\\Omega(n)$\n  Reference  ADA, NTU CSIE  ","id":95,"section":"posts","summary":"Maximum Subarray Problem   Input: A sequence A[1], A[2], \u0026hellip;, A[n] of integers.\n  Output: Two indicex $i$ and $j$ with $1 {\\leq} i {\\leq} j {\\leq} n$ that maximize\n$$A[i] + A[i+1] + \\cdots + A[j]$$\n  Solution 1. Divide and Conquer  Base case (n = 1)  Return itself (maximum subarray)   Recursive case (n \u0026gt; 1)  Divide the array into two sub-arrays Find the maximum sub-array recuresively Merge the result    Bitonic Champion Problem Complexity   Upper bound: $O(n)$","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Merge Sort One of the classic examples of the divide-and-conquer algorithm is the merge sort algorithm. Merge sort is an efficient and general-purpose sorting algorithm.\nIntuition There are two apporaches to implement the merge sort algorithm: top-down or bottom-up.\nThe merge sort algorithm can be divided into three steps, like all divide-and-conquer algorithms.\n1. Divide the given unsorted list into several sublists. (Divide) 2. Sort each of the sublists recursively. (Conquer) 3. Merge the sorted sublists to produce new sorted list. (Combine)  1. Top-down Approach (Recursion): 1. In the first step, we divide the list into two sublists. (Divide) 2. The in the next step, we recursively sort the sublists in the previous step. (Conquer) 3. Finally we merge the sorted sublists in the above step repeatedly to obtain the final list of sorted elements. (Combine)  We demonstrate an example of the merge process as following:\nOther gifs of merge sort 2. Bottom-up Approach (Iteratively) In the bottom-up approach\n1. In the first, We divide the list into the sublists of a single element. (Divide) 2. Each of the sublists is then sorted already. (Conquer) 3. Finally we merge the sublist two at a time until a single list remains. (Combine)  Reference   合併排序(wiki)\n  LeetCode learn - Recursion II, Divide and Conquer\n  初學者學演算法｜排序法進階：合併排序法\n  ","id":96,"section":"posts","summary":"Merge Sort One of the classic examples of the divide-and-conquer algorithm is the merge sort algorithm. Merge sort is an efficient and general-purpose sorting algorithm. Intuition There are two apporaches to implement the merge sort algorithm: top-down or bottom-up. The merge sort algorithm can be divided into three steps, like all divide-and-conquer algorithms. 1. Divide the given unsorted list into several sublists. (Divide) 2. Sort each of the sublists recursively.","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Quick Sort Quick sort is another classical divide-and-conquer algorithm for sorting.\nIntuition The quick sort algorithm can be implemented in three steps, namely dividing the problem, solving the subproblems and combing the results of subproblems.\nIn detail, given a list of values to sort, the quick sort algorithm works in following steps:\n  First, it selects a value from the list, which serves as a pivot value to divide the list into two sublists. One sublist contains all the values that are less than the pivot value, while the other sublist contains the values that are greater than or equal to the pivot value. This process is also called partitioning.\nThe strategy of choosing a pivot value can vary. Typically, one can choose the first element in the list as the pivot, or randomly pick an element from the list.    After the partitioning process, the original list is then reduce into two smaller sublists. We then recursively sort the two sublists.\n  After the partitioning process, we are sure that all elements in one sublist are less or equal than any element in another sublist. Therefore, we can simply concatenate the two sorted sublists that we obtain in step 2 to obtain the final sorted list.\n  The base cases of the recursion in step 2 are either when the input list is empty or the empty list contains only a single element. In either case, the input list can be considered as sorted already.\nAlgorithm The pivot selection and partitioning steps can be done in several different ways.\n1. Lomuto partition scheme   Pick the last element as a pivot value.\n  Use two pointer i and j\n if element of index j less than pivot -\u0026gt; swap i and j and then i + 1.    After the iteration process, swap the pivot and the elemet of index i.\n  Reference   Quick Sort(wiki)\n  快速排序 Quicksort\n  快速排序法（三）\n  ","id":97,"section":"posts","summary":"Quick Sort Quick sort is another classical divide-and-conquer algorithm for sorting. Intuition The quick sort algorithm can be implemented in three steps, namely dividing the problem, solving the subproblems and combing the results of subproblems. In detail, given a list of values to sort, the quick sort algorithm works in following steps: First, it selects a value from the list, which serves as a pivot value to divide the list","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Divide and Conquer Solve a problwm recursively\nThree steps   Divide\nDivide the problem into a number of subproblems that are smaller instances of the same problem.    Conquer\nConquer the subproblems by solving them recursively.    Base case (Termination condition): Solve the subproblems if the subproblem sizes are small enough.\n  Recursive case: Recursively solve itself.\n    Combine\nCombine the solutions to the subproblems into the solution for the original problem.    Exmaples Reference   ADA, NTU CSIE\n  LeetCode Learn - Divide and Conquer\n  ","id":98,"section":"posts","summary":"Divide and Conquer Solve a problwm recursively\nThree steps   Divide\nDivide the problem into a number of subproblems that are smaller instances of the same problem.    Conquer\nConquer the subproblems by solving them recursively.    Base case (Termination condition): Solve the subproblems if the subproblem sizes are small enough.\n  Recursive case: Recursively solve itself.\n    Combine\nCombine the solutions to the subproblems into the solution for the original problem.","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Tower of Hanoi  Problem: move n disks from A to C Rules:  Move one disk at a time. Cannot place a large dosk onto a smaller disk.    Reference  ADA, NTU CSIE  ","id":99,"section":"posts","summary":"Tower of Hanoi  Problem: move n disks from A to C Rules:  Move one disk at a time. Cannot place a large dosk onto a smaller disk.    Reference  ADA, NTU CSIE  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Recursion ","id":100,"section":"posts","summary":"Recursion ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Go Tutorial  01 Go Basics 02 Flow Control 03 Structs 04 Array \u0026amp; Slices 05 Maps 06 Advanced Function  ","id":101,"section":"posts","summary":"Go Tutorial  01 Go Basics 02 Flow Control 03 Structs 04 Array \u0026amp; Slices 05 Maps 06 Advanced Function  ","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Operate System (OS)  I/O Models: 同步、非同步、阻塞、非阻塞  ","id":102,"section":"posts","summary":"Operate System (OS) I/O Models: 同步、非同步、阻塞、非阻塞","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"Python Tutorial Table of Contents 00. Install Python  Windows macOS Ubuntu  01. Python Basics  01. Python Basics 02. Flow Control 03. List 04. Dictionary 05. Function  02. Process Management  01. Multithread (多執行緒) 02. Multiprocessing (多程序)  ","id":103,"section":"posts","summary":"Python Tutorial Table of Contents 00. Install Python Windows macOS Ubuntu 01. Python Basics 01. Python Basics 02. Flow Control 03. List 04. Dictionary 05. Function 02. Process Management 01. Multithread (多執行緒) 02. Multiprocessing (多程序)","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"},{"content":"My Learning Notes My Medium: AIoT Taipei\n  Python\n  Go\n  Data Structure and Algorithms (DSA)\n  Operate System (OS)\n  Database\n  DevOps\n  Data Science\n  Scripts   Convert ipynb to md\n# all `ipynb` files $ python convert_ipynb_to_md.py # the specific `ipynb` file python convert_ipynb_to_md.py --ipynb_file {specific ipynb file}    Adding Front Matter to Markdown file\n# all `md` files except `REAMDE.md` $ python3 add_front_matter_to_md.py # the specific `md` file $ python3 add_front_matter_to_md.py --file_path {specific md file}    ","id":104,"section":"posts","summary":"My Learning Notes My Medium: AIoT Taipei\n  Python\n  Go\n  Data Structure and Algorithms (DSA)\n  Operate System (OS)\n  Database\n  DevOps\n  Data Science\n  Scripts   Convert ipynb to md\n# all `ipynb` files $ python convert_ipynb_to_md.py # the specific `ipynb` file python convert_ipynb_to_md.py --ipynb_file {specific ipynb file}    Adding Front Matter to Markdown file","tags":null,"title":"","uri":"https://kaka-lin.github.io/1/01/readme/","year":"0001"}],"tags":[{"title":"CI/CD Tools","uri":"https://kaka-lin.github.io/tags/ci/cd-tools/"},{"title":"Data Science","uri":"https://kaka-lin.github.io/tags/data-science/"},{"title":"Data Structure","uri":"https://kaka-lin.github.io/tags/data-structure/"},{"title":"Database","uri":"https://kaka-lin.github.io/tags/database/"},{"title":"DevOps","uri":"https://kaka-lin.github.io/tags/devops/"},{"title":"DSA","uri":"https://kaka-lin.github.io/tags/dsa/"},{"title":"Go","uri":"https://kaka-lin.github.io/tags/go/"},{"title":"Google Trends","uri":"https://kaka-lin.github.io/tags/google-trends/"},{"title":"I/O Models","uri":"https://kaka-lin.github.io/tags/i/o-models/"},{"title":"LeetCode","uri":"https://kaka-lin.github.io/tags/leetcode/"},{"title":"matplotlib","uri":"https://kaka-lin.github.io/tags/matplotlib/"},{"title":"MySQL","uri":"https://kaka-lin.github.io/tags/mysql/"},{"title":"OS","uri":"https://kaka-lin.github.io/tags/os/"},{"title":"Python","uri":"https://kaka-lin.github.io/tags/python/"},{"title":"SQLAlchemy","uri":"https://kaka-lin.github.io/tags/sqlalchemy/"},{"title":"SQLite","uri":"https://kaka-lin.github.io/tags/sqlite/"}]}